 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 1 - 8/17/2019 18:52:23


       1/       0 :                     ; ---------------------------------------------------------------------------
       2/       0 :                     ; Cube Z80 Sound Driver
       3/       0 :                     ;
       4/       0 :                     ; Disassembled by Wizardwhosaysni(02.08.2014).
       5/       0 :                     ; https://github.com/wizardwhosaysni/CUBEWIZ
       6/       0 :                     ; ---------------------------------------------------------------------------
       7/       0 :                     
       8/       0 :                     ; =============== S U B R O U T I N E =======================================
       9/       0 :                     
      10/       0 :                     		!org	0
      11/       0 :                     		CPU Z80
      12/       0 :                     		listing on
      13/       0 :                     
      14/       0 :                     ; Constants
      15/       0 : =0H                 SFX_BANK 							equ 00h
      16/       0 : =8000H              SFX_BANK_OFFSET 					equ 08000h
      17/       0 :                     
      18/       0 : =3AH                DAC_BANK_1 						equ (1D0000h>>15)
      19/       0 :                     
      20/       0 : =3BH                MUSIC_BANK_1 						equ (1D8000h>>15)
      21/       0 : =3CH                MUSIC_BANK_2 						equ (1E0000h>>15)
      22/       0 : =3DH                MUSIC_BANK_3 						equ (1E8000h>>15)
      23/       0 :                     
      24/       0 : =39H                YM_INSTRUMENTS_BANK 			equ (1C8000h>>15)		; 1E8000h|E000h
      25/       0 : =CA00H              YM_INSTRUMENTS_BANK_OFFSET	equ 0CA00h				; Текущий офсет(не плюсовать). 0 = 8000h
      26/       0 :                     ; ---------------------------------------------------------------------------
      27/       0 :                     
      28/       0 :                     ; Offsets
      29/       0 : =1500H              pt_SFX								equ 1500h
      30/       0 : =1FF0H              STACK_START						equ 1FF0h
      31/       0 : =1FF0H              COMMANDS_COUNTER				equ 1FF0h
      32/       0 : =1FF1H              LAST_COMMAND					equ 1FF1h
      33/       0 :                     ;INITS_COUNTER					equ 1FF3h
      34/       0 : =1FF4H              DAC_LAST_OFFSET					equ 1FF4h
      35/       0 : =1FF6H              DAC_REMAINING_LENGTH			equ 1FF6h
      36/       0 : =1FF8H              NEW_SAMPLE_TO_LOAD				equ 1FF8h
      37/       0 : =1FF9H              YM_TIMER_VALUE					equ 1FF9h
      38/       0 : =1FFAH              SAVED_YM_TIMER_VALUE			equ 1FFAh
      39/       0 : =1FFCH              FADE_IN_PARAMETERS				equ 1FFCh
      40/       0 : =1FFDH              MUSIC_LEVEL						equ 1FFDh
      41/       0 : =1FFFH              NEW_OPERATION					equ 1FFFh
      42/       0 : =4000H              YM1_REGISTER						equ 4000h
      43/       0 : =4001H              YM1_DATA							equ 4001h
      44/       0 : =4002H              YM2_REGISTER						equ 4002h
      45/       0 : =4003H              YM2_DATA							equ 4003h
      46/       0 : =6000H              BANK_REGISTER						equ 6000h
      47/       0 : =7F11H              PSG_PORT							equ 7F11h
      48/       0 :                     
      49/       0 :                     ; =============== S U B R O U T I N E =======================================
      50/       0 :                     
      51/       0 :                     init:
      52/       0 : F3                  		di			; disable interrupts : synchronisation is just based on	YM Timer
      53/       1 : 31 F0 1F            		ld	sp, STACK_START	; initialize stack pointer
      54/       4 : 3E 0F               		ld	a, 0Fh
      55/       6 : 32 FD 1F            		ld	(MUSIC_LEVEL), a ; init	music level at max value
      56/       9 : 3E FF               		ld	a, 0FFh
      57/       B : 32 F9 1F            		ld	(YM_TIMER_VALUE), a ; init timer value without sending it to YM
      58/       E : 3E 0F               		ld	a, 0Fh
      59/      10 : 32 FC 1F            		ld	(FADE_IN_PARAMETERS), a	; init fade in parameters : no fade in
      60/      13 : 3E 20               		ld	a, 20h ; ' '    ; load music $20, which is void
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 2 - 8/17/2019 18:52:23


      61/      15 : CD 8D 01            		call	Main		; process new operation	$20 to initialize YM and PSG with void data
      62/      18 : 3A 4C 15            		ld	a, (DAC_BANK)
      63/      1B : CD 43 01            		call	LoadAnyBank	; init loaded bank, and	enter the driver's main loop !
      64/      1E :                     ; End of function init
      65/      1E :                     
      66/      1E :                     
      67/      1E :                     ; =============== S U B R O U T I N E =======================================
      68/      1E :                     
      69/      1E :                     
      70/      1E :                     Main_Loop:
      71/      1E :                     					; Update_YM_Instruments+6j  <---- still need to figure out the exact purpose of this way to return to main loop
      72/      1E :                     
      73/      1E :                     		; This part updates sequential sound at each YM Timer overflow
      74/      1E :                     
      75/      1E : 3A 00 40            		ld	a, (YM1_REGISTER)
      76/      21 : E6 02               		and	2
      77/      23 : 28 26               		jr	z, Dac_Loop	; jump as long as there	is no timer overflow
      78/      25 : 7A                  		ld	a, d
      79/      26 : 32 F6 1F            		ld	(DAC_REMAINING_LENGTH), a
      80/      29 : 7B                  		ld	a, e
      81/      2A : 32 F7 1F            		ld	(DAC_REMAINING_LENGTH+1), a
      82/      2D : 7C                  		ld	a, h
      83/      2E : 32 F4 1F            		ld	(DAC_LAST_OFFSET), a
      84/      31 : 7D                  		ld	a, l
      85/      32 : 32 F5 1F            		ld	(DAC_LAST_OFFSET+1), a
      86/      35 : CD 2F 04            		call	UpdateSound	; This is the entry point to the big sound update process, which causes a large plateau in DAC sound.
      87/      38 : 3A F4 1F            		ld	a, (DAC_LAST_OFFSET)
      88/      3B : 67                  		ld	h, a
      89/      3C : 3A F5 1F            		ld	a, (DAC_LAST_OFFSET+1)
      90/      3F : 6F                  		ld	l, a
      91/      40 : 3A F6 1F            		ld	a, (DAC_REMAINING_LENGTH)
      92/      43 : 57                  		ld	d, a
      93/      44 : 3A F7 1F            		ld	a, (DAC_REMAINING_LENGTH+1)
      94/      47 : 5F                  		ld	e, a
      95/      48 : C3 4F 00            		jp	loc_34
      96/      4B :                     
      97/      4B :                     		; This part loops a number of times varying according to DAC rate
      98/      4B :                     Dac_Loop:
      99/      4B : 06 05               		ld	b, 5		; loop parameter is dynamically	changed	to adjust time period of a DAC sound
     100/      4D :                     loc_32:
     101/      4D : 10 FE               		djnz	$		; loop b times before checking things to do
     102/      4F :                     
     103/      4F :                     		; This part checks for a new command to process
     104/      4F :                     loc_34:
     105/      4F : 3A FF 1F            		ld	a, (NEW_OPERATION)
     106/      52 : B7                  		or	a
     107/      53 : C4 8D 01            		call	nz, Main ; This is the entry point to load a new command
     108/      56 :                     
     109/      56 :                     		; This part checks for a new DAC sample to load
     110/      56 :                     
     111/      56 : 3A F8 1F            		ld	a, (NEW_SAMPLE_TO_LOAD)
     112/      59 : B7                  		or	a
     113/      5A : C4 58 01            		call	nz, LoadDacSound
     114/      5D :                     
     115/      5D :                     		; This part checks if there is DAC data to send to YM
     116/      5D :                     
     117/      5D : 7A                  		ld	a, d		; check	remaining sound	length
     118/      5E : B3                  		or	e
     119/      5F : 28 BD               		jr	z, Main_Loop	; if remaining length =	0, then	it's end of DAC sample, or it's because sample $FE has been loaded at initialization
     120/      61 :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 3 - 8/17/2019 18:52:23


     121/      61 :                     		; This part transmits DAC Data
     122/      61 :                     
     123/      61 : 06 2A               		ld	b, 2Ah ; '*'    ; YM Register : DAC data
     124/      63 : 4E                  		ld	c, (hl)		; get next DAC sample byte. It's 8-bit PCM
     125/      64 : 23                  		inc	hl
     126/      65 :                     
     127/      65 :                     loc_4A:
     128/      65 : 3A 00 40            		ld	a, (YM1_REGISTER)
     129/      68 : E6 80               		and	80h ; 'Ђ'
     130/      6A : 20 F9               		jr	nz, loc_4A	; loop as long as YM busy
     131/      6C : 78                  		ld	a, b
     132/      6D : 32 00 40            		ld	(YM1_REGISTER),	a
     133/      70 : 79                  		ld	a, c
     134/      71 : 32 01 40            		ld	(YM1_DATA), a	; transmit DAC Data
     135/      74 : 1B                  		dec	de		; decrement remaining sound length to play
     136/      75 : C3 1E 00            		jp	Main_Loop	; End of the driver's main loop !
     137/      78 :                     ; End of function Main_Loop
     138/      78 :                     
     139/      78 :                     ; =============== S U B R O U T I N E =======================================
     140/      78 :                     
     141/      78 :                     Pause_Sound:
     142/      78 : E5                  		push	hl		; mutes	sound at reception of operation	$FF
     143/      79 : D5                  		push	de
     144/      7A : AF                  		xor	a
     145/      7B : 32 44 15            		ld	(CURRENTLY_MANAGING_SFX), a ; clear
     146/      7E : 32 45 15            		ld	(CALL_YM2_INSTEAD_OF_YM1), a ; set to $01 when managing	YM4,5,6	channels, to call part 2 of YM
     147/      81 : 01 7F 40            		ld	bc, 407Fh	; set Total Level to smallest amplitude
     148/      84 : 16 04               		ld	d, 4		; 4 loops, one for each	operator of the	3 channels
     149/      86 :                     
     150/      86 :                     loc_6B:					; Conditional input to implement here !
     151/      86 : CD 7A 05            		call	YM_Input
     152/      89 : 04                  		inc	b
     153/      8A : CD 7A 05            		call	YM_Input
     154/      8D : 04                  		inc	b
     155/      8E : CD 7A 05            		call	YM_Input
     156/      91 : 04                  		inc	b
     157/      92 : 04                  		inc	b
     158/      93 : 15                  		dec	d
     159/      94 : 20 F0               		jr	nz, loc_6B
     160/      96 : 3E 01               		ld	a, 1
     161/      98 : 32 45 15            		ld	(CALL_YM2_INSTEAD_OF_YM1), a ; set to $01 when managing	YM4,5,6	channels, to call part 2 of YM
     162/      9B : 01 7F 40            		ld	bc, 407Fh	; set Total Level to smallest amplitude
     163/      9E : 16 04               		ld	d, 4		; 4 loops, one for each	operator of 3 channels
     164/      A0 :                     
     165/      A0 :                     loc_85:
     166/      A0 : CD A5 05            		call	YM2_Input
     167/      A3 : 04                  		inc	b
     168/      A4 : CD A5 05            		call	YM2_Input
     169/      A7 : 04                  		inc	b
     170/      A8 : CD A5 05            		call	YM2_Input
     171/      AB : 04                  		inc	b
     172/      AC : 04                  		inc	b
     173/      AD : 15                  		dec	d
     174/      AE : 20 F0               		jr	nz, loc_85
     175/      B0 : 21 11 7F            		ld	hl, PSG_PORT
     176/      B3 : 3E 9F               		ld	a, 9Fh
     177/      B5 : 77                  		ld	(hl), a		; set PSG channel 1 volume to 0
     178/      B6 : 3E BF               		ld	a, 0BFh
     179/      B8 : 77                  		ld	(hl), a		; set PSG channel 2 volume to 0
     180/      B9 : 3E DF               		ld	a, 0DFh
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 4 - 8/17/2019 18:52:23


     181/      BB : 77                  		ld	(hl), a		; set PSG channel 3 volume to 0
     182/      BC : 3E FF               		ld	a, 0FFh
     183/      BE : 77                  		ld	(hl), a		; set PSG noise	channel	volume to 0
     184/      BF :                     
     185/      BF :                     loc_A4:
     186/      BF : 3A FF 1F            		ld	a, (NEW_OPERATION) ; new operation to process (play music/sfx, fade out	...), sent from	68k
     187/      C2 : B7                  		or	a
     188/      C3 : 28 FA               		jr	z, loc_A4	; loop as long as there	is no new operation to process
     189/      C5 : FE FF               		cp	0FFh
     190/      C7 : 20 04               		jr	nz, Update_YM_Instruments ; if next sent operation is not to mute the sound, go	process	it in the main loop
     191/      C9 : AF                  		xor	a		; if next sent operation is to mute the	sound, then ignore it, and also	go back	to main	loop !
     192/      CA : 32 FF 1F            		ld	(NEW_OPERATION), a ; new operation to process (play music/sfx, fade out	...), sent from	68k
     193/      CD :                     ; End of function Pause_Sound
     194/      CD :                     
     195/      CD :                     ; =============== S U B R O U T I N E =======================================
     196/      CD :                     
     197/      CD :                     Update_YM_Instruments:
     198/      CD : CD D6 00            		call	YM_UpdateInstrumentsLevels
     199/      D0 : D1                  		pop	de
     200/      D1 : E1                  		pop	hl
     201/      D2 : F1                  		pop	af
     202/      D3 : C3 1E 00            		jp	Main_Loop	; go back to main loop
     203/      D6 :                     ; End of function Update_YM_Instruments
     204/      D6 :                     
     205/      D6 :                     ; =============== S U B R O U T I N E =======================================
     206/      D6 :                     
     207/      D6 :                     YM_UpdateInstrumentsLevels:
     208/      D6 :                     
     209/      D6 :                     					; new workflow yet to implement :
     210/      D6 :                     					; for each of the 10 channels, update SFX channel instrument in priority over music instrument
     211/      D6 :                     
     212/      D6 : FD 21 42 15         		ld	iy, CURRENT_CHANNEL ; indicates	the channel to process,	from a relative	point of view :	YM1, YM2, PSG or SFX channels
     213/      DA : AF                  		xor	a
     214/      DB : 32 45 15            		ld	(CALL_YM2_INSTEAD_OF_YM1), a ; set to $01 when managing	YM4,5,6	channels, to call part 2 of YM
     215/      DE : FD 77 00            		ld	(iy+0),	a
     216/      E1 : DD 21 10 18         		ld	ix, MUSIC_CHANNEL_YM1 ;	get channel data area
     217/      E5 : DD 7E 04            		ld	a, (ix+4)	; get channel level
     218/      E8 : CD A4 0A            		call	YM1_LoadInstrument ; reload instrument to load the new level
     219/      EB : FD 34 00            		inc	(iy+0)
     220/      EE : DD 21 40 18         		ld	ix, MUSIC_CHANNEL_YM2
     221/      F2 : DD 7E 04            		ld	a, (ix+4)
     222/      F5 : CD A4 0A            		call	YM1_LoadInstrument
     223/      F8 : FD 34 00            		inc	(iy+0)
     224/      FB : DD 21 70 18         		ld	ix, MUSIC_CHANNEL_YM3
     225/      FF : DD 7E 04            		ld	a, (ix+4)
     226/     102 : CD A4 0A            		call	YM1_LoadInstrument
     227/     105 : AF                  		xor	a
     228/     106 : FD 77 00            		ld	(iy+0),	a
     229/     109 : 3E 01               		ld	a, 1
     230/     10B : 32 45 15            		ld	(CALL_YM2_INSTEAD_OF_YM1), a ; set to $01 when managing	YM4,5,6	channels, to call part 2 of YM
     231/     10E : DD 21 A0 18         		ld	ix, MUSIC_CHANNEL_YM4
     232/     112 : DD 7E 04            		ld	a, (ix+4)
     233/     115 : CD 6C 0B            		call	YM2_LoadInstrument
     234/     118 : FD 34 00            		inc	(iy+0)
     235/     11B : DD 21 D0 18         		ld	ix, MUSIC_CHANNEL_YM5
     236/     11F : DD 7E 04            		ld	a, (ix+4)
     237/     122 : CD 6C 0B            		call	YM2_LoadInstrument
     238/     125 : DD 21 00 19         		ld	ix, MUSIC_CHANNEL_YM6
     239/     129 : DD 7E 04            		ld	a, (ix+4)
     240/     12C : CD 6C 0B            		call	YM2_LoadInstrument
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 5 - 8/17/2019 18:52:23


     241/     12F : AF                  		xor	a
     242/     130 : C9                  		ret
     243/     131 :                     ; End of function YM_UpdateInstrumentsLevels
     244/     131 :                     
     245/     131 :                     ; =============== S U B R O U T I N E =======================================
     246/     131 :                     
     247/     131 :                     Update_YM_Level:
     248/     131 : E5                  		push	hl
     249/     132 : D5                  		push	de
     250/     133 : 21 FD 1F            		ld	hl, MUSIC_LEVEL	; general output level for music and SFX type 1, sent from 68k
     251/     136 : 7E                  		ld	a, (hl)
     252/     137 : E6 0F               		and	0Fh
     253/     139 : 77                  		ld	(hl), a
     254/     13A : C3 CD 00            		jp	Update_YM_Instruments
     255/     13D : 3A 4C 15            		ld	a, (DAC_BANK)
     256/     140 : C3 43 01            		jp	LoadAnyBank
     257/     143 :                     ; End of function Update_YM_Level
     258/     143 :                     
     259/     143 :                     ; =============== S U B R O U T I N E =======================================
     260/     143 :                     
     261/     143 :                     LoadAnyBank:
     262/     143 : E5                  		push	hl
     263/     144 : 21 00 60            		ld	hl, BANK_REGISTER
     264/     147 : 77                  		ld	(hl), a
     265/     148 : 1F                  		rra
     266/     149 : 77                  		ld	(hl), a
     267/     14A : 1F                  		rra
     268/     14B : 77                  		ld	(hl), a
     269/     14C : 1F                  		rra
     270/     14D : 77                  		ld	(hl), a
     271/     14E : 1F                  		rra
     272/     14F : 77                  		ld	(hl), a
     273/     150 : 1F                  		rra
     274/     151 : 77                  		ld	(hl), a
     275/     152 : 1F                  		rra
     276/     153 : 77                  		ld	(hl), a
     277/     154 : 75                  		ld	(hl), l
     278/     155 : 75                  		ld	(hl), l
     279/     156 : E1                  		pop	hl
     280/     157 : C9                  		ret
     281/     158 :                     ; End of function LoadAnyBank
     282/     158 :                     
     283/     158 :                     ; =============== S U B R O U T I N E =======================================
     284/     158 :                     
     285/     158 :                     LoadDacSound:
     286/     158 : FE FE               		cp	0FEh
     287/     15A : 20 07               		jr	nz, loc_1A0	; if a != FE
     288/     15C : 21 00 C0            		ld	hl, 0C000h	; if a = FE, play nothing
     289/     15F : 11 00 00            		ld	de, 0		; 0 remaining length, so just stay in the main loop
     290/     162 : C9                  		ret
     291/     163 :                     ; ---------------------------------------------------------------------------
     292/     163 :                     
     293/     163 :                     loc_1A0:
     294/     163 : 3D                  		dec	a		; a is DAC sound index,	starting at 1, so decrement it
     295/     164 : 26 00               		ld	h, 0
     296/     166 : 6F                  		ld	l, a
     297/     167 : 29                  		add	hl, hl
     298/     168 : 29                  		add	hl, hl
     299/     169 : 29                  		add	hl, hl		; hl = 8 * a, so each DAC sound	entry uses 8 bytes
     300/     16A : 01 60 15            		ld	bc, t_SAMPLE_LOAD_DATA
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 6 - 8/17/2019 18:52:23


     301/     16D : 09                  		add	hl, bc		; hl now points	to the right entry
     302/     16E : 7E                  		ld	a, (hl)		; get byte 0 : time period used
     303/     16F : 23                  		inc	hl		; ignore byte 1	!
     304/     170 : 23                  		inc	hl		; point	to byte	2 : bank to load
     305/     171 : 32 4C 00            		ld	(Dac_Loop+1), a	; change loop number to	change DAC play	time period
     306/     174 : 7E                  		ld	a, (hl)		; get byte 2
     307/     175 : 32 4C 15            		ld	(DAC_BANK), a ; save byte 2
     308/     178 : 23                  		inc	hl		; ignore byte 3	!
     309/     179 : 23                  		inc	hl
     310/     17A : 5E                  		ld	e, (hl)
     311/     17B : 23                  		inc	hl
     312/     17C : 56                  		ld	d, (hl)		; de = bytes 5-4 : sound length
     313/     17D : 23                  		inc	hl
     314/     17E : 7E                  		ld	a, (hl)		; 7th byte
     315/     17F : 23                  		inc	hl
     316/     180 : 66                  		ld	h, (hl)		; 8th byte
     317/     181 : 6F                  		ld	l, a		; hl = bytes 7-6 : sound data pointer
     318/     182 : AF                  		xor	a
     319/     183 : 32 F8 1F            		ld	(NEW_SAMPLE_TO_LOAD), a	; clear	to say that DAC	sound is now loaded
     320/     186 : 3A 4C 15            		ld	a, (DAC_BANK)
     321/     189 : CD 43 01            		call	LoadAnyBank	; loads	bank 0x1E0000 or 0x1E8000
     322/     18C : C9                  		ret
     323/     18D :                     ; End of function LoadDacSound
     324/     18D :                     
     325/     18D :                     ; =============== S U B R O U T I N E =======================================
     326/     18D :                     
     327/     18D :                     Main:
     328/     18D : F5                  		push	af		; main handles any new operation sent by 68K (or Z80 itself)
     329/     18E : AF                  		xor	a
     330/     18F : 32 FF 1F            		ld	(NEW_OPERATION), a ; clear 0x1FFF (its value is	already	in pushed a)
     331/     192 : 3A F0 1F            		ld	a, (COMMANDS_COUNTER)
     332/     195 : C6 01               		add	a, 1
     333/     197 : 32 F0 1F            		ld	(COMMANDS_COUNTER), a
     334/     19A : F1                  		pop	af
     335/     19B : 32 F1 1F            		ld	(LAST_COMMAND), a
     336/     19E : FE FF               		cp	0FFh
     337/     1A0 : CA 78 00            		jp	z, Pause_Sound	; if a = FFh : mute sound
     338/     1A3 : FE FE               		cp	0FEh ; 'ю'
     339/     1A5 : CA 7B 03            		jp	z, StopMusic	; if a = FEh : stop music by muting PSG	and releasing YM keys
     340/     1A8 : FE FD               		cp	0FDh ; 'э'
     341/     1AA : CA E7 11            		jp	z, Fade_Out	; if a = FDh : fade out
     342/     1AD : FE FC               		cp	0FCh
     343/     1AF : CA 04 12            		jp	z, Save_Music	; if a = FCh : save current music
     344/     1B2 : FE FB               		cp	0FBh
     345/     1B4 : CA 2F 12            		jp	z, Resume_Music	; if a = FBh : resume saved music
     346/     1B7 : FE F0               		cp	0F0h ; 'р'
     347/     1B9 : CA 31 01            		jp	z, Update_YM_Level ; if	a = F0h
     348/     1BC : FE F1               		cp	0F1h ; 'с'
     349/     1BE : CA F8 11            		jp	z, YM_SetTimer	; if a = F1h
     350/     1C1 : FE 41               		cp	41h ; 'A'
     351/     1C3 : D2 C0 02            		jp	nc, Load_SFX	; if a > 41h, then play	an SFX (already	stored in ram along with the code)
     352/     1C6 : E5                  		push	hl		; else,	play a music !
     353/     1C7 : D5                  		push	de
     354/     1C8 : F5                  		push	af
     355/     1C9 : FE 0F               		cp	0Fh ; '!'
     356/     1CB : 30 0F               		jr	nc, loc_201	; if a > 21h, then play	music from chunk 0x1F0000
     357/     1CD : 3E 3B               		ld	a, MUSIC_BANK_1		; otherwise play music from 0x1F8000
     358/     1CF : 32 4D 15            		ld	(MUSIC_BANK), a	; load 01h to 0x152D
     359/     1D2 : CD 43 01            		call	LoadAnyBank	; load rom chunk 0x1F8000 to bank
     360/     1D5 : F1                  		pop	af
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 7 - 8/17/2019 18:52:23


     361/     1D6 : 11 00 80            		ld	de, 8000h
     362/     1D9 : C3 FF 01            		jp	Load_Music	; decrement music/sound	index (no $00 entry)
     363/     1DC :                     ; ---------------------------------------------------------------------------
     364/     1DC :                     
     365/     1DC :                     loc_201:
     366/     1DC : FE 1E               		cp	01Eh ; '!'
     367/     1DE : 30 11               		jr	nc, loc_201_1	; if a > 21h, then play	music from chunk 0x1F0000
     368/     1E0 : 3E 3C               		ld	a, MUSIC_BANK_2
     369/     1E2 : 32 4D 15            		ld	(MUSIC_BANK), a
     370/     1E5 : CD 43 01            		call	LoadAnyBank	; load rom chunk 0x1F0000 to bank
     371/     1E8 : F1                  		pop	af
     372/     1E9 : 11 00 80            		ld	de, 8000h
     373/     1EC : D6 0E               		sub	0Eh
     374/     1EE : C3 FF 01            		jp	Load_Music	; decrement music/sound	index (no $00 entry)
     375/     1F1 :                     ; ---------------------------------------------------------------------------
     376/     1F1 :                     
     377/     1F1 :                     loc_201_1:
     378/     1F1 : 3E 3D               		ld	a, MUSIC_BANK_3
     379/     1F3 : 32 4D 15            		ld	(MUSIC_BANK), a
     380/     1F6 : CD 43 01            		call	LoadAnyBank	; load rom chunk 0x1F0000 to bank
     381/     1F9 : F1                  		pop	af
     382/     1FA : 11 00 80            		ld	de, 8000h
     383/     1FD : D6 1D               		sub	01Dh
     384/     1FF :                     
     385/     1FF :                     Load_Music:
     386/     1FF : 3D                  		dec	a		; decrement music/sound	index (no $00 entry)
     387/     200 : 87                  		add	a, a		; double index because the pointer table to reach has 2	bytes per entry
     388/     201 : 26 00               		ld	h, 0
     389/     203 : 6F                  		ld	l, a
     390/     204 : 19                  		add	hl, de
     391/     205 : 7E                  		ld	a, (hl)
     392/     206 : 23                  		inc	hl
     393/     207 : 66                  		ld	h, (hl)
     394/     208 : 6F                  		ld	l, a		; now hl contains pointer to music/sound data
     395/     209 : 7E                  		ld	a, (hl)		; get byte 0
     396/     20A : B7                  		or	a		; check	if a = 0 with z	flag
     397/     20B : C2 C0 02            		jp	nz, Load_SFX	; if byte 0 of music data != 0,	actually load it as an SFX instead
     398/     20E : 3A FC 1F            		ld	a, (FADE_IN_PARAMETERS)	; fade in parameter applied from 68k when a music is loaded. nibble 1 :	fade in	speed. nibble 2	: fade in start	level.
     399/     211 : E6 0F               		and	0Fh
     400/     213 : 32 FD 1F            		ld	(MUSIC_LEVEL), a ; general output level	for music and SFX type 1, sent from 68k
     401/     216 : AF                  		xor	a
     402/     217 : 32 52 15            		ld	(FADE_IN_TIMER), a ; reset fade	in timer
     403/     21A : CD 04 12            		call	Save_Music
     404/     21D : CD 7B 03            		call	StopMusic	; stop currently playing music if there	was one
     405/     220 : 23                  		inc	hl
     406/     221 : 7E                  		ld	a, (hl)		; get music data byte 1	: indicates if music uses DAC Samples
     407/     222 : 23                  		inc	hl		; so music byte	2 is useless ? I guess it was intended to use YM Timer A first,	which needs two	data bytes
     408/     223 : 23                  		inc	hl		; point	to byte	3 : YM Timer B value
     409/     224 : 32 53 15            		ld	(MUSIC_DOESNT_USE_SAMPLES), a ;	indicates if music uses	DAC Samples
     410/     227 : 7E                  		ld	a, (hl)
     411/     228 : 32 F9 1F            		ld	(YM_TIMER_VALUE), a
     412/     22B : CD F8 11            		call	YM_SetTimer
     413/     22E : AF                  		xor	a
     414/     22F : 32 43 15            		ld	(CURRENTLY_FADING_OUT),	a ; clear fade out bytes
     415/     232 : 32 49 15            		ld	(FADE_OUT_COUNTER), a ;	Counts how many	times the fade out timer reached 0. Fade out stops at value $0C.
     416/     235 : 3E 63               		ld	a, 63h ; 'c'
     417/     237 : 32 48 15            		ld	(FADE_OUT_TIMER), a ; Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while	loading	music
     418/     23A : 23                  		inc	hl		; hl now points	to the first of	the ten	pointers
     419/     23B : 06 0A               		ld	b, 0Ah		; number of loops
     420/     23D : DD 21 10 18         		ld	ix, MUSIC_CHANNEL_YM1 ;	start of the data to store
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 8 - 8/17/2019 18:52:23


     421/     241 :                     
     422/     241 :                     Load_Music_Channels:
     423/     241 : 5E                  		ld	e, (hl)		; this part initializes	each channel ram data
     424/     242 : 23                  		inc	hl
     425/     243 : 56                  		ld	d, (hl)		; de = channel data pointer
     426/     244 : 23                  		inc	hl		; point	to first byte of next pointer
     427/     245 : DD 73 00            		ld	(ix+0),	e
     428/     248 : DD 72 01            		ld	(ix+1),	d	; init data pointer
     429/     24B : AF                  		xor	a		; and let me present to	you ...
     430/     24C : DD 77 02            		ld	(ix+2),	a	; time counter for note/sample length
     431/     24F : DD 77 03            		ld	(ix+3),	a	; "channel not in use" indicator
     432/     252 : DD 77 06            		ld	(ix+6),	a	; key release time (release key	when time counter 02 reaches this value)
     433/     255 : DD 77 08            		ld	(ix+8),	a	; set to $80 when there	is no key release
     434/     258 : DD 77 13            		ld	(ix+13h), a
     435/     25B : DD 77 14            		ld	(ix+14h), a	; loop A start pointer
     436/     25E : DD 77 1C            		ld	(ix+1Ch), a	; note shift value
     437/     261 : DD 77 1D            		ld	(ix+1Dh), a	; frequency shift value
     438/     264 : DD 77 1F            		ld	(ix+1Fh), a	; slide	speed
     439/     267 : 3E 01               		ld	a, 1
     440/     269 : DD 77 1E            		ld	(ix+1Eh), a	; stereo setting
     441/     26C : DD 56 01            		ld	d, (ix+1)
     442/     26F : DD 5E 00            		ld	e, (ix+0)
     443/     272 : 1A                  		ld	a, (de)		; get first pointed data byte
     444/     273 : FE FF               		cp	0FFh
     445/     275 : 20 05               		jr	nz, loc_28A
     446/     277 : 3E 01               		ld	a, 1		; if first byte	of channel data	= FF, then there is no data for	this channel
     447/     279 : DD 77 03            		ld	(ix+3),	a	; "channel not in use"
     448/     27C :                     
     449/     27C :                     loc_28A:
     450/     27C : 11 30 00            		ld	de, 30h
     451/     27F : DD 19               		add	ix, de
     452/     281 : 10 BE               		djnz	Load_Music_Channels ; actual loop instruction based on register	b
     453/     283 : 06 02               		ld	b, 2		; loop two times
     454/     285 :                     
     455/     285 :                     Activate_Stereo_Outputs:
     456/     285 : C5                  		push	bc
     457/     286 : 78                  		ld	a, b
     458/     287 : 3D                  		dec	a
     459/     288 : 32 45 15            		ld	(CALL_YM2_INSTEAD_OF_YM1), a ; set to $01 when managing	YM4,5,6	channels, to call part 2 of YM
     460/     28B : 01 C0 B4            		ld	bc, 0B4C0h	; activate left	and right sound	outputs	for each channel
     461/     28E : CD 7A 05            		call	YM_Input	; first	channel	of called YM part
     462/     291 : 04                  		inc	b
     463/     292 : CD 7A 05            		call	YM_Input	; second channel
     464/     295 : 04                  		inc	b
     465/     296 : CD 7A 05            		call	YM_Input	; third	channel
     466/     299 : C1                  		pop	bc
     467/     29A : 10 E9               		djnz	Activate_Stereo_Outputs
     468/     29C :                     
     469/     29C : 3E C0               		ld	a, 0C0h	; 'А'   ; set C0h for byte 1E of YM channels
     470/     29E : 32 2E 18            		ld	(MUSIC_CHANNEL_YM1_STEREO), a
     471/     2A1 : 32 5E 18            		ld	(MUSIC_CHANNEL_YM2_STEREO), a
     472/     2A4 : 32 8E 18            		ld	(MUSIC_CHANNEL_YM3_STEREO), a
     473/     2A7 : 32 BE 18            		ld	(MUSIC_CHANNEL_YM4_STEREO), a
     474/     2AA : 32 EE 18            		ld	(MUSIC_CHANNEL_YM5_STEREO), a
     475/     2AD : 32 1E 19            		ld	(MUSIC_CHANNEL_YM6_STEREO), a
     476/     2B0 : 3E FE               		ld	a, 0FEh	; 'ю'   ; put value FE as DAC Sound sample to load ... which loads nothing. Why such a thing then ?
     477/     2B2 : 32 F8 1F            		ld	(NEW_SAMPLE_TO_LOAD), a	; stores the index of a	new DAC	sample to play
     478/     2B5 : CD 61 05            		call	YM_LoadTimerB
     479/     2B8 :                     
     480/     2B8 :                     Load_End:
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 9 - 8/17/2019 18:52:23


     481/     2B8 : D1                  		pop	de		; end of the loadSFX and loadMusic chunks
     482/     2B9 : E1                  		pop	hl
     483/     2BA : 3A 4C 15            		ld	a, (DAC_BANK)
     484/     2BD : C3 43 01            		jp	LoadAnyBank
     485/     2C0 :                     ; ---------------------------------------------------------------------------
     486/     2C0 :                     
     487/     2C0 :                     Load_SFX:
     488/     2C0 : E5                  		push	hl		; looks	like the part to play SFX
     489/     2C1 : D5                  		push	de
     490/     2C2 : D6 41               		sub	41h ; 'A'
     491/     2C4 : 26 00               		ld	h, 0
     492/     2C6 : 6F                  		ld	l, a
     493/     2C7 : 3E 00               		ld	a, SFX_BANK
     494/     2C9 : CD 43 01            		call	LoadAnyBank
     495/     2CC : 29                  		add	hl, hl		; a is an index, and you double	it to access to	a pointer table
     496/     2CD : 11 00 80            		ld	de, SFX_BANK_OFFSET	; SFX in ROM Bank
     497/     2D0 : 19                  		add	hl, de
     498/     2D1 : 7E                  		ld	a, (hl)
     499/     2D2 : 23                  		inc	hl
     500/     2D3 : 66                  		ld	h, (hl)		; get the proper pointer
     501/     2D4 : 6F                  		ld	l, a
     502/     2D5 :                     
     503/     2D5 :                     		; hl now points to original sfx offset, with sfx data starting at 0x162D
     504/     2D5 :                     		; now sfx data starts at 0xB070 so 0xB070 - 0x162D = 9A43h to add
     505/     2D5 : C5                  		push	bc
     506/     2D6 : 06 9A               		ld	b, 9Ah
     507/     2D8 : 0E 43               		ld	c, 43h
     508/     2DA : 09                  		add	hl, bc
     509/     2DB : C1                  		pop	bc
     510/     2DC :                     
     511/     2DC : 7E                  		ld	a, (hl)		; get pointed byte 0
     512/     2DD : 32 F2 1F            		ld	(01FF2h), a	; my debug commands
     513/     2E0 : 3E 00               		ld	a, SFX_BANK
     514/     2E2 : 32 F3 1F            		ld	(01FF3h), a
     515/     2E5 : 7C                  		ld	a, h
     516/     2E6 : 32 F4 1F            		ld	(01FF4h), a
     517/     2E9 : 7D                  		ld	a, l
     518/     2EA : 32 F5 1F            		ld	(01FF5h), a
     519/     2ED : 3A F2 1F            		ld	a, (01FF2h)
     520/     2F0 : 23                  		inc	hl		; hl points to byte 1 of sfx data
     521/     2F1 : FE 01               		cp	1
     522/     2F3 : 20 23               		jr	nz, Load_SFX_Type_2 ; if a != 1	(then a	= 2, which means the sound just	concerns 3 channels)
     523/     2F5 : 06 0A               		ld	b, 0Ah		; loop 10 times
     524/     2F7 : DD 21 F0 19         		ld	ix, SFX_CHANNEL_YM1
     525/     2FB :                     
     526/     2FB :                     Load_SFX_Channels:
     527/     2FB : 5E                  		ld	e, (hl)		; part to get next channel data
     528/     2FC : 23                  		inc	hl
     529/     2FD : 56                  		ld	d, (hl)		; de = bytes 2-3 of sound data = pointer
     530/     2FE : 23                  		inc	hl
     531/     2FF :                     
     532/     2FF :                     		; add 9A43h to sfx data offset since it's been moved from driver to bank
     533/     2FF : E5                  		push	hl
     534/     300 : 21 43 9A            		ld	hl, 09A43h
     535/     303 : ED 5A               		adc	hl, de
     536/     305 : EB                  		ex	hl, de
     537/     306 : E1                  		pop	hl
     538/     307 :                     
     539/     307 : 1A                  		ld	a, (de)		; a = first byte of current channel
     540/     308 : FE FF               		cp	0FFh		; if first byte	= FF, there is no data to setup, so skip subroutine call
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 10 - 8/17/2019 18:52:23


     541/     30A : 28 03               		jr	z, loc_2EA
     542/     30C : CD 4E 03            		call	InitChannelDataForSFX
     543/     30F :                     
     544/     30F :                     loc_2EA:
     545/     30F : 11 30 00            		ld	de, 30h
     546/     312 : DD 19               		add	ix, de		; go to	next channel data
     547/     314 : 10 E5               		djnz	Load_SFX_Channels ; loop
     548/     316 : 18 A0               		jr	Load_End
     549/     318 :                     ; ---------------------------------------------------------------------------
     550/     318 :                     
     551/     318 :                     Load_SFX_Type_2:
     552/     318 : 01 04 03            		ld	bc, 304h	; loop 3 times
     553/     31B : DD 21 80 1A         		ld	ix, SFX_CHANNEL_YM4 ;	the 3 channel SFX are stored in	dedicated temp channel data, in	order not to overwrite current music data
     554/     31F :                     
     555/     31F :                     loc_309:
     556/     31F : C5                  		push	bc
     557/     320 : 5E                  		ld	e, (hl)
     558/     321 : 23                  		inc	hl
     559/     322 : 56                  		ld	d, (hl)
     560/     323 : 23                  		inc	hl		; hl points to next pointer
     561/     324 :                     
     562/     324 :                     		; add 9A43h to sfx data offset since it's been moved from driver to bank
     563/     324 : E5                  		push	hl
     564/     325 : 21 43 9A            		ld	hl, 09A43h
     565/     328 : ED 5A               		adc	hl, de
     566/     32A : EB                  		ex	hl, de
     567/     32B : E1                  		pop	hl
     568/     32C :                     
     569/     32C : 1A                  		ld	a, (de)		; a = first byte of current channel
     570/     32D : FE FF               		cp	0FFh
     571/     32F : 28 11               		jr	z, loc_324	; if a = FF, ignore this channel
     572/     331 : CD 4E 03            		call	InitChannelDataForSFX ;	otherwise, init	channel	data
     573/     334 : 06 28               		ld	b, 28h ; '('    ; YM register : Key on/off
     574/     336 : CD 83 05            		call	YM1_Input	; input	"key off" for YM channel 4, 5, 6 respectively for channel 1,2,3 of the sound
     575/     339 : 4F                  		ld	c, a		; a = c	= current YM channel to	use
     576/     33A : C6 B0               		add	a, 0B0h	; '°'   ; a = YM register to activate left and right stereo outputs
     577/     33C : 47                  		ld	b, a
     578/     33D : 0E C0               		ld	c, 0C0h	; 'А'   ; sets stereo left and right on
     579/     33F : CD A5 05            		call	YM2_Input
     580/     342 :                     
     581/     342 :                     loc_324:
     582/     342 : 11 30 00            		ld	de, 30h
     583/     345 : DD 19               		add	ix, de		; point	next channel destination slot
     584/     347 : C1                  		pop	bc
     585/     348 : 0C                  		inc	c		; next channel number
     586/     349 : 10 D4               		djnz	loc_309		; loop
     587/     34B : C3 B8 02            		jp	Load_End	; end of the loadSFX and loadMusic chunks
     588/     34E :                     ; End of function Main
     589/     34E :                     
     590/     34E :                     ; =============== S U B R O U T I N E =======================================
     591/     34E :                     
     592/     34E :                     InitChannelDataForSFX:
     593/     34E : DD 73 00            		ld	(ix+0),	e
     594/     351 : DD 72 01            		ld	(ix+1),	d	; bytes	0-1 = ed = offset of channel data source
     595/     354 : 3E C0               		ld	a, 0C0h
     596/     356 : DD 77 1E            		ld	(ix+1Eh), a	; byte 1E = C0
     597/     359 : AF                  		xor	a			; clear	a
     598/     35A : DD 77 02            		ld	(ix+2),	a	; clear	all those bytes
     599/     35D : DD 77 03            		ld	(ix+3),	a
     600/     360 : DD 77 06            		ld	(ix+6),	a
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 11 - 8/17/2019 18:52:23


     601/     363 : DD 77 08            		ld	(ix+8),	a
     602/     366 : DD 77 13            		ld	(ix+13h), a
     603/     369 : DD 77 14            		ld	(ix+14h), a
     604/     36C : DD 77 1C            		ld	(ix+1Ch), a
     605/     36F : DD 77 1D            		ld	(ix+1Dh), a
     606/     372 : DD 77 1F            		ld	(ix+1Fh), a
     607/     375 : 3E 01               		ld	a, 1
     608/     377 : DD 77 1E            		ld	(ix+1Eh), a	; byte 1E = 1 ... er ... why is	it set to $CO first and	then to	1 at the end ?
     609/     37A : C9                  		ret				; Definitely need to watch stereo stuff !
     610/     37B :                     ; End of function InitChannelDataForSFX
     611/     37B :                     
     612/     37B :                     ; =============== S U B R O U T I N E =======================================
     613/     37B :                     
     614/     37B :                     StopMusic:
     615/     37B : E5                  		push	hl		; the subroutine sets key off /	mutes channels playing music
     616/     37C : FD 21 42 15         		ld	iy, CURRENT_CHANNEL ; indicates	the channel to process,	from a relative	point of view :	YM1, YM2, PSG or SFX channels
     617/     380 : AF                  		xor	a
     618/     381 : 32 45 15            		ld	(CALL_YM2_INSTEAD_OF_YM1), a ; set to $01 when managing	YM4,5,6	channels, to call part 2 of YM
     619/     384 : FD 77 00            		ld	(iy+0),	a
     620/     387 : DD 21 10 18         		ld	ix, MUSIC_CHANNEL_YM1
     621/     38B : CD A4 0A            		call	YM1_LoadInstrument
     622/     38E : 01 00 28            		ld	bc, 2800h	; YM register :	Key on/off
     623/     391 : CD 66 05            		call	YM1_ConditionnalInput	; set Key OFF
     624/     394 : FD 34 00            		inc	(iy+0)
     625/     397 : AF                  		xor	a
     626/     398 : DD 21 40 18         		ld	ix, MUSIC_CHANNEL_YM2
     627/     39C : CD A4 0A            		call	YM1_LoadInstrument
     628/     39F : 01 01 28            		ld	bc, 2801h	; YM register :	Key on/off
     629/     3A2 : CD 66 05            		call	YM1_ConditionnalInput	; set Key OFF
     630/     3A5 : FD 34 00            		inc	(iy+0)
     631/     3A8 : AF                  		xor	a
     632/     3A9 : DD 21 70 18         		ld	ix, MUSIC_CHANNEL_YM3
     633/     3AD : CD A4 0A            		call	YM1_LoadInstrument
     634/     3B0 : 01 02 28            		ld	bc, 2802h	; YM register :	Key on/off
     635/     3B3 : CD 66 05            		call	YM1_ConditionnalInput	; set Key OFF
     636/     3B6 : 3E 01               		ld	a, 1
     637/     3B8 : 32 45 15            		ld	(CALL_YM2_INSTEAD_OF_YM1), a ; set to $01 when managing	YM4,5,6	channels, to call part 2 of YM
     638/     3BB : AF                  		xor	a
     639/     3BC : FD 77 00            		ld	(iy+0),	a
     640/     3BF : 3A 83 1A            		ld	a, (SFX_CHANNEL_YM4_NOT_IN_USE)
     641/     3C2 : B7                  		or	a
     642/     3C3 : 28 0E               		jr	z, loc_3B5
     643/     3C5 : AF                  		xor	a
     644/     3C6 : DD 21 A0 18         		ld	ix, MUSIC_CHANNEL_YM4
     645/     3CA : CD 6C 0B            		call	YM2_LoadInstrument
     646/     3CD : 01 04 28            		ld	bc, 2804h	; YM register :	Key on/off
     647/     3D0 : CD 66 05            		call	YM1_ConditionnalInput
     648/     3D3 :                     
     649/     3D3 :                     loc_3B5:				; CODE XREF: StopMusic+48j
     650/     3D3 : FD 34 00            		inc	(iy+0)
     651/     3D6 : 3A B3 1A            		ld	a, (SFX_CHANNEL_YM5_NOT_IN_USE)
     652/     3D9 : B7                  		or	a
     653/     3DA : 28 0E               		jr	z, loc_3CC
     654/     3DC : AF                  		xor	a
     655/     3DD : DD 21 D0 18         		ld	ix, MUSIC_CHANNEL_YM5
     656/     3E1 : CD 6C 0B            		call	YM2_LoadInstrument
     657/     3E4 : 01 05 28            		ld	bc, 2805h	; YM register :	Key on/off
     658/     3E7 : CD 66 05            		call	YM1_ConditionnalInput
     659/     3EA :                     
     660/     3EA :                     loc_3CC:				; CODE XREF: StopMusic+5Fj
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 12 - 8/17/2019 18:52:23


     661/     3EA : FD 34 00            		inc	(iy+0)
     662/     3ED : 3A E3 1A            		ld	a, (SFX_CHANNEL_YM6_NOT_IN_USE)
     663/     3F0 : B7                  		or	a
     664/     3F1 : 28 0E               		jr	z, loc_3E3
     665/     3F3 : AF                  		xor	a
     666/     3F4 : DD 21 00 19         		ld	ix, MUSIC_CHANNEL_YM6
     667/     3F8 : CD 6C 0B            		call	YM2_LoadInstrument
     668/     3FB : 01 06 28            		ld	bc, 2806h	; YM register :	Key on/off
     669/     3FE : CD 66 05            		call	YM1_ConditionnalInput
     670/     401 :                     
     671/     401 :                     loc_3E3:				; CODE XREF: StopMusic+76j
     672/     401 :                     
     673/     401 :                     					; doubt : stop SFX or use conditionnal input ?
     674/     401 :                     
     675/     401 : 21 11 7F            		ld	hl, PSG_PORT
     676/     404 : 3E 9F               		ld	a, 9Fh ; 'џ'
     677/     406 : 77                  		ld	(hl), a		; set PSG channel 1 volume to 0
     678/     407 : 3E BF               		ld	a, 0BFh	; 'ї'
     679/     409 : 77                  		ld	(hl), a		; set PSG channel 2 volume to 0
     680/     40A : 3E DF               		ld	a, 0DFh	; 'Я'
     681/     40C : 77                  		ld	(hl), a		; set PSG channel 3 volume to 0
     682/     40D : 3E FF               		ld	a, 0FFh
     683/     40F : 77                  		ld	(hl), a		; set PSG noise	channel	volume to 0
     684/     410 : 21 10 18            		ld	hl, MUSIC_CHANNEL_YM1 ; also pointed once	from 68k, to know if music/sfx is currently being played, I guess
     685/     413 : 11 30 00            		ld	de, 30h	; ' '   ; value to add to pointer to go to next channel in ram
     686/     416 : 06 0A               		ld	b, 0Ah		; loop ten times
     687/     418 : 3E 01               		ld	a, 1
     688/     41A :                     
     689/     41A :                     loc_3FC:				; CODE XREF: StopMusic+A1j
     690/     41A : 77                  		ld	(hl), a		; set "Channel not in use" byte
     691/     41B : 19                  		add	hl, de		; go to	next channel
     692/     41C : 10 FC               		djnz	loc_3FC		; loop until PSG Noise Channel.	SFX extra channels are not concerned.
     693/     41E : E1                  		pop	hl
     694/     41F : 11 00 00            		ld	de, 0
     695/     422 : AF                  		xor	a
     696/     423 : 32 43 15            		ld	(CURRENTLY_FADING_OUT),	a ; set	to 01 when a fade out operation	is being executed
     697/     426 : 32 49 15            		ld	(FADE_OUT_COUNTER), a ;	Counts how many	times the fade out timer reached 0. Fade out stops at value $0C.
     698/     429 : 3E 63               		ld	a, 63h ; 'c'
     699/     42B : 32 48 15            		ld	(FADE_OUT_TIMER), a ; Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while	loading	music
     700/     42E : C9                  		ret
     701/     42F :                     ; End of function StopMusic
     702/     42F :                     
     703/     42F :                     
     704/     42F :                     ; =============== S U B R O U T I N E =======================================
     705/     42F :                     
     706/     42F :                     
     707/     42F :                     UpdateSound:				; CODE XREF: Main_Loop+7p
     708/     42F : C5                  		push	bc		; this is THE subroutine that updates every channel at each YM Timer overflow. Quite important !
     709/     430 : D5                  		push	de
     710/     431 : E5                  		push	hl
     711/     432 :                     
     712/     432 :                     		; This part activates/deactivates DAC on YM6
     713/     432 :                     
     714/     432 : 01 80 2B            		ld	bc, 2B80h	; bc = enable DAC
     715/     435 : 3A 53 15            		ld	a, (MUSIC_DOESNT_USE_SAMPLES)
     716/     438 : B7                  		or	a
     717/     439 : 28 09               		jr	z, loc_42B	; if music uses	DAC samples, enable DAC
     718/     43B : 3A E3 1A            		ld	a, (SFX_CHANNEL_YM6_NOT_IN_USE)
     719/     43E : B7                  		or	a
     720/     43F : 28 03               		jr	z, loc_42B	; else,	if (0x1503) = 0, then a	DAC sample is played as	an SFX,	so enable DAC
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 13 - 8/17/2019 18:52:23


     721/     441 : 01 00 2B            		ld	bc, 2B00h	; else,	disable	DAC
     722/     444 :                     
     723/     444 :                     loc_42B:				; CODE XREF: UpdateSound+Aj
     724/     444 :                     					; UpdateSound+10j
     725/     444 : CD 83 05            		call	YM1_Input	; enable/disable DAC
     726/     447 :                     
     727/     447 :                     		; This part updates music level with possible fade in parameters
     728/     447 :                     
     729/     447 : 21 52 15            		ld	hl, FADE_IN_TIMER ; incremented	at each	YM Timer overflow. When	it corresponds to fade in parameter, increment YM instruments level until max level
     730/     44A : 34                  		inc	(hl)		; increment counter
     731/     44B : 3A FC 1F            		ld	a, (FADE_IN_PARAMETERS)	; fade in parameter applied from 68k when a music is loaded. nibble 1 :	fade in	speed. nibble 2	: fade in start	level.
     732/     44E : 0F                  		rrca			; two circular right rotates
     733/     44F : 0F                  		rrca
     734/     450 : E6 3C               		and	3Ch ; '<'       ; just keep nibble 1 * 4
     735/     452 : 28 11               		jr	z, loc_44C
     736/     454 : BE                  		cp	(hl)
     737/     455 : 20 0E               		jr	nz, loc_44C
     738/     457 : AF                  		xor	a		; if MusicCounter = Nibble 1 * 4 and !=	0
     739/     458 : 77                  		ld	(hl), a		; clear	MusicCounter
     740/     459 : 21 FD 1F            		ld	hl, MUSIC_LEVEL	; general output level for music and SFX type 1, sent from 68k
     741/     45C : 7E                  		ld	a, (hl)
     742/     45D : FE 0F               		cp	0Fh
     743/     45F : 28 04               		jr	z, loc_44C
     744/     461 : 34                  		inc	(hl)		; if music level not 0F, increment it and update YM instruments	levels
     745/     462 : CD D6 00            		call	YM_UpdateInstrumentsLevels
     746/     465 :                     
     747/     465 :                     loc_44C:				; CODE XREF: UpdateSound+23j
     748/     465 :                     					; UpdateSound+26j UpdateSound+30j
     749/     465 :                     
     750/     465 :                     		; This part manages fade out and stops music at fade out end
     751/     465 :                     
     752/     465 : 3A 43 15            		ld	a, (CURRENTLY_FADING_OUT) ; set	to 01 when a fade out operation	is being executed
     753/     468 : B7                  		or	a
     754/     469 : 28 21               		jr	z, loc_475	; jump unless currently	executing a fade out
     755/     46B : 3A 48 15            		ld	a, (FADE_OUT_TIMER) ; Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while	loading	music
     756/     46E : B7                  		or	a
     757/     46F : 20 17               		jr	nz, loc_471
     758/     471 : 3A 47 15            		ld	a, (FADE_OUT_LENGTH) ; number of YM Timer overflows to handle before incrementing the fade out counter
     759/     474 : 32 48 15            		ld	(FADE_OUT_TIMER), a ; Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while	loading	music
     760/     477 : 3A 49 15            		ld	a, (FADE_OUT_COUNTER) ;	Counts how many	times the fade out timer reached 0. Fade out stops at value $0C.
     761/     47A : 3C                  		inc	a
     762/     47B : 32 49 15            		ld	(FADE_OUT_COUNTER), a ;	increment fade out counter if fade out timer has reached 0
     763/     47E : FE 0C               		cp	0Ch
     764/     480 : 20 0A               		jr	nz, loc_475	; reload timer B
     765/     482 : CD 7B 03            		call	StopMusic	; if FadeOutCounter = 0Ch, then	stop music because it's the end of a fade out operation
     766/     485 : C3 57 05            		jp	loc_4DE
     767/     488 :                     ; ---------------------------------------------------------------------------
     768/     488 :                     
     769/     488 :                     loc_471:				; CODE XREF: UpdateSound+43j
     770/     488 : 3D                  		dec	a
     771/     489 : 32 48 15            		ld	(FADE_OUT_TIMER), a ; decrement	fade out timer
     772/     48C :                     
     773/     48C :                     loc_475:				; CODE XREF: UpdateSound+3Dj
     774/     48C :                     					; UpdateSound+54j
     775/     48C :                     
     776/     48C : 3A 4D 15            		ld	a, (MUSIC_BANK)
     777/     48F : CD 43 01            		call	LoadAnyBank
     778/     492 :                     
     779/     492 :                     		; Start of Music Update
     780/     492 :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 14 - 8/17/2019 18:52:23


     781/     492 : CD 61 05            		call	YM_LoadTimerB	; reload timer B
     782/     495 : FD 21 42 15         		ld	iy, CURRENT_CHANNEL ; indicates	the channel to process,	from a relative	point of view :	YM1, YM2, PSG or SFX channels
     783/     499 : AF                  		xor	a
     784/     49A : 32 44 15            		ld	(CURRENTLY_MANAGING_SFX), a
     785/     49D : 32 45 15            		ld	(CALL_YM2_INSTEAD_OF_YM1), a ; taking care of YM 1,2,3
     786/     4A0 : FD 77 00            		ld	(iy+0),	a
     787/     4A3 : CD E6 05            		call	YM1_ParseData
     788/     4A6 :                     
     789/     4A6 :                     		; DAC Byte intermediate transmission
     790/     4A6 : CD 7D 12            		call	SendDacByte
     791/     4A9 :                     
     792/     4A9 : FD 34 00            		inc	(iy+0)
     793/     4AC : CD E6 05            		call	YM1_ParseData
     794/     4AF :                     
     795/     4AF :                     		; DAC Byte intermediate transmission
     796/     4AF : CD 7D 12            		call	SendDacByte
     797/     4B2 :                     
     798/     4B2 : FD 34 00            		inc	(iy+0)
     799/     4B5 : CD E6 05            		call	YM1_ParseData
     800/     4B8 :                     
     801/     4B8 :                     		; DAC Byte intermediate transmission
     802/     4B8 : CD 7D 12            		call	SendDacByte
     803/     4BB :                     
     804/     4BB : 3E 01               		ld	a, 1
     805/     4BD : 32 45 15            		ld	(CALL_YM2_INSTEAD_OF_YM1), a ; taking care of YM 4,5,6
     806/     4C0 : AF                  		xor	a
     807/     4C1 : FD 77 00            		ld	(iy+0),	a
     808/     4C4 : CD 40 08            		call	YM2_ParseData
     809/     4C7 :                     
     810/     4C7 :                     		; DAC Byte intermediate transmission
     811/     4C7 : CD 7D 12            		call	SendDacByte
     812/     4CA :                     
     813/     4CA : FD 34 00            		inc	(iy+0)
     814/     4CD : CD 40 08            		call	YM2_ParseData
     815/     4D0 :                     
     816/     4D0 :                     		; DAC Byte intermediate transmission
     817/     4D0 : CD 7D 12            		call	SendDacByte
     818/     4D3 :                     
     819/     4D3 : FD 34 00            		inc	(iy+0)
     820/     4D6 : CD 30 0C            		call	YM2_ParseChannel6Data
     821/     4D9 :                     
     822/     4D9 :                     		; DAC Byte intermediate transmission
     823/     4D9 : CD 7D 12            		call	SendDacByte
     824/     4DC :                     
     825/     4DC : AF                  		xor	a
     826/     4DD : FD 77 00            		ld	(iy+0),	a
     827/     4E0 : CD 0A 0D            		call	PSG_ParseToneData
     828/     4E3 :                     
     829/     4E3 :                     		; DAC Byte intermediate transmission
     830/     4E3 : CD 7D 12            		call	SendDacByte
     831/     4E6 :                     
     832/     4E6 : FD 34 00            		inc	(iy+0)
     833/     4E9 : CD 0A 0D            		call	PSG_ParseToneData
     834/     4EC :                     
     835/     4EC :                     		; DAC Byte intermediate transmission
     836/     4EC : CD 7D 12            		call	SendDacByte
     837/     4EF :                     
     838/     4EF : FD 34 00            		inc	(iy+0)
     839/     4F2 : CD 0A 0D            		call	PSG_ParseToneData
     840/     4F5 :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 15 - 8/17/2019 18:52:23


     841/     4F5 :                     		; DAC Byte intermediate transmission
     842/     4F5 : CD 7D 12            		call	SendDacByte
     843/     4F8 :                     
     844/     4F8 : FD 34 00            		inc	(iy+0)
     845/     4FB : CD 75 0F            		call	PSG_ParseNoiseData
     846/     4FE :                     
     847/     4FE :                     		; DAC Byte intermediate transmission
     848/     4FE : CD 7D 12            		call	SendDacByte
     849/     501 :                     
     850/     501 :                     
     851/     501 :                     		; Start of SFX Update
     852/     501 :                     
     853/     501 : 3E 00               		ld	a, SFX_BANK
     854/     503 : CD 43 01            		call	LoadAnyBank
     855/     506 : 3E 01               		ld	a, 1
     856/     508 : 32 44 15            		ld	(CURRENTLY_MANAGING_SFX), a
     857/     50B : AF                  		xor	a
     858/     50C : 32 45 15            		ld	(CALL_YM2_INSTEAD_OF_YM1), a ; taking care of YM 1,2,3
     859/     50F : FD 77 00            		ld	(iy+0),	a
     860/     512 : CD E6 05            		call	YM1_ParseData
     861/     515 : FD 34 00            		inc	(iy+0)
     862/     518 : CD E6 05            		call	YM1_ParseData
     863/     51B : FD 34 00            		inc	(iy+0)
     864/     51E : CD E6 05            		call	YM1_ParseData
     865/     521 : 3E 01               		ld	a, 1
     866/     523 : 32 45 15            		ld	(CALL_YM2_INSTEAD_OF_YM1), a ; taking care of YM 4,5,6
     867/     526 : AF                  		xor	a
     868/     527 : FD 77 00            		ld	(iy+0),	a
     869/     52A : CD 40 08            		call	YM2_ParseData
     870/     52D : FD 34 00            		inc	(iy+0)
     871/     530 : CD 40 08            		call	YM2_ParseData
     872/     533 : FD 34 00            		inc	(iy+0)
     873/     536 : CD 30 0C            		call	YM2_ParseChannel6Data
     874/     539 : AF                  		xor	a
     875/     53A : FD 77 00            		ld	(iy+0),	a
     876/     53D : CD 0A 0D            		call	PSG_ParseToneData
     877/     540 : FD 34 00            		inc	(iy+0)
     878/     543 : CD 0A 0D            		call	PSG_ParseToneData
     879/     546 : FD 34 00            		inc	(iy+0)
     880/     549 : CD 0A 0D            		call	PSG_ParseToneData
     881/     54C : FD 34 00            		inc	(iy+0)
     882/     54F : CD 75 0F            		call	PSG_ParseNoiseData
     883/     552 :                     
     884/     552 : 3E 00               		ld	a, 0
     885/     554 : 32 44 15            		ld	(CURRENTLY_MANAGING_SFX), a
     886/     557 :                     
     887/     557 :                     loc_4DE:				; CODE XREF: UpdateSound+59j
     888/     557 : 3A 4C 15            		ld	a, (DAC_BANK)
     889/     55A : CD 43 01            		call	LoadAnyBank
     890/     55D : E1                  		pop	hl
     891/     55E : D1                  		pop	de
     892/     55F : C1                  		pop	bc
     893/     560 : C9                  		ret
     894/     561 :                     ; End of function UpdateSound
     895/     561 :                     
     896/     561 :                     
     897/     561 :                     ; =============== S U B R O U T I N E =======================================
     898/     561 :                     
     899/     561 :                     
     900/     561 :                     YM_LoadTimerB:				; CODE XREF: Main+F3p
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 16 - 8/17/2019 18:52:23


     901/     561 :                     					; UpdateSound:loc_475p
     902/     561 : 01 3A 27            		ld	bc, 273Ah	; reset	timers A and B,	enable and load	B
     903/     564 : 18 1D               		jr	YM1_Input
     904/     566 :                     ; End of function YM_LoadTimerB
     905/     566 :                     
     906/     566 :                     
     907/     566 :                     ; =============== S U B R O U T I N E =======================================
     908/     566 :                     
     909/     566 :                     
     910/     566 :                     YM1_ConditionnalInput:			; CODE XREF: YM2_ParseData+45p
     911/     566 :                     					; YM2_ParseData+154p
     912/     566 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
     913/     569 : B7                  		or	a
     914/     56A : 20 17               		jr	nz, YM1_Input	; if currently managing	SFX channel data, then just send data to YM1
     915/     56C : D9                  		exx
     916/     56D : DD E5               		push	ix		; otherwise, check if an SFX is	being played on	YM4,5,6
     917/     56F : E1                  		pop	hl
     918/     570 : 01 E3 01            		ld	bc, 01E3h ; 'г'
     919/     573 : 09                  		add	hl, bc
     920/     574 : 7E                  		ld	a, (hl)		; get "channel not in use" byte for SFX Channel 1
     921/     575 : D9                  		exx
     922/     576 : B7                  		or	a
     923/     577 : 20 0A               		jr	nz, YM1_Input	; don't send data to YM if an SFX is being played, as it has priority over music
     924/     579 : C9                  		ret
     925/     57A :                     ; End of function YM1_ConditionnalInput
     926/     57A :                     
     927/     57A :                     
     928/     57A :                     ; =============== S U B R O U T I N E =======================================
     929/     57A :                     
     930/     57A :                     
     931/     57A :                     YM_Input:				; CODE XREF: Pause_Sound:loc_6Bp
     932/     57A :                     					; Pause_Sound+12p Pause_Sound+16p
     933/     57A :                     					; Main+D5p Main+D9p Main+DDp
     934/     57A : 3A 45 15            		ld	a, (CALL_YM2_INSTEAD_OF_YM1) ; set to $01 when managing	YM4,5,6	channels, to call part 2 of YM
     935/     57D : B7                  		or	a
     936/     57E : 20 13               		jr	nz, YM2_ConditionalInput ; if CallYm2InsteadOfYm1 set
     937/     580 : C3 66 05            		jp	YM1_ConditionnalInput
     938/     583 :                     ; End of function YM_Input
     939/     583 :                     
     940/     583 :                     
     941/     583 :                     ; =============== S U B R O U T I N E =======================================
     942/     583 :                     
     943/     583 :                     
     944/     583 :                     YM1_Input:				; CODE XREF: Main+72p Main+151p
     945/     583 :                     					; StopMusic+16p StopMusic+27p
     946/     583 :                     					; StopMusic+38p StopMusic+55p
     947/     583 :                     					; StopMusic+6Cp StopMusic+83p
     948/     583 :                     					; UpdateSound:loc_42Bp
     949/     583 :                     					; YM_LoadTimerB+3j
     950/     583 :                     					; YM1_ConditionnalInput+4j
     951/     583 :                     					; YM1_ConditionnalInput+11j
     952/     583 :                     					; YM1_Input+5j	YM1_ParseData+38p
     953/     583 :                     					; YM1_ParseData:loc_668p
     954/     583 :                     					; YM1_ParseData:loc_680p
     955/     583 :                     					; YM1_ParseData+124p
     956/     583 :                     					; YM1_ParseData+213p
     957/     583 :                     					; YM1_ParseData+21Cp
     958/     583 :                     					; YM1_LoadInstrument+46p
     959/     583 :                     					; YM1_LoadInstrument:loc_A79p
     960/     583 :                     					; YM1_LoadInstrument+92p
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 17 - 8/17/2019 18:52:23


     961/     583 :                     					; YM1_LoadInstrument+A0p
     962/     583 :                     					; PSG_ParseToneData+7Dp
     963/     583 :                     					; YM1_SetStereo+11j YM_SetTimer+7p
     964/     583 : 3A 00 40            		ld	a, (YM1_REGISTER) ; the	subroutine sends value c in register b of YM1
     965/     586 : E6 80               		and	80h ; 'Ђ'
     966/     588 : 20 F9               		jr	nz, YM1_Input	; loop as long as YM2612 busy
     967/     58A : 78                  		ld	a, b
     968/     58B : 32 00 40            		ld	(YM1_REGISTER),	a ; write address to part I
     969/     58E : 79                  		ld	a, c
     970/     58F : 32 01 40            		ld	(YM1_DATA), a	; write	data to	part I
     971/     592 : C9                  		ret
     972/     593 :                     ; End of function YM1_Input
     973/     593 :                     
     974/     593 :                     
     975/     593 :                     ; =============== S U B R O U T I N E =======================================
     976/     593 :                     
     977/     593 :                     
     978/     593 :                     YM2_ConditionalInput:			; CODE XREF: YM_Input+4j
     979/     593 :                     					; YM2_ParseData:loc_8C0p
     980/     593 :                     					; YM2_ParseData:loc_8D8p
     981/     593 :                     					; YM2_ParseData+243p
     982/     593 :                     					; YM2_ParseData+24Cp
     983/     593 :                     					; YM2_LoadInstrument+51p
     984/     593 :                     					; YM2_LoadInstrument:loc_B32p
     985/     593 :                     					; YM2_LoadInstrument+9Dp
     986/     593 :                     					; YM2_LoadInstrument+ABp
     987/     593 :                     					; YM2_SetStereo+10j
     988/     593 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
     989/     596 : B7                  		or	a
     990/     597 : 20 0C               		jr	nz, YM2_Input	; if currently managing	SFX channel ram	data, just send	byte to	YM
     991/     599 : D9                  		exx
     992/     59A : DD E5               		push	ix		; otherwise, first check if an SFX is being played with	YM4,5,6	channels
     993/     59C : E1                  		pop	hl
     994/     59D : 01 E3 01            		ld	bc, 01E3h ; 'г'
     995/     5A0 : 09                  		add	hl, bc
     996/     5A1 : 7E                  		ld	a, (hl)		; get "channel not in use" byte of SFX channel 1
     997/     5A2 : D9                  		exx
     998/     5A3 : B7                  		or	a		; if SFX currently being played, then don't send data to YM2, as SFX has priority
     999/     5A4 : C8                  		ret	z
    1000/     5A5 :                     ; End of function YM2_ConditionalInput
    1001/     5A5 :                     
    1002/     5A5 :                     
    1003/     5A5 :                     ; =============== S U B R O U T I N E =======================================
    1004/     5A5 :                     
    1005/     5A5 :                     
    1006/     5A5 :                     YM2_Input:				; CODE XREF: Pause_Sound:loc_85p
    1007/     5A5 :                     					; Pause_Sound+2Cp Pause_Sound+30p
    1008/     5A5 :                     					; Main+15Ap YM2_ConditionalInput+4j
    1009/     5A5 :                     					; YM2_Input+5j	YM2_ParseData+94p
    1010/     5A5 :                     					; YM2_ParseChannel6Data+78p
    1011/     5A5 : 3A 02 40            		ld	a, (YM2_REGISTER)
    1012/     5A8 : E6 80               		and	80h ; 'Ђ'
    1013/     5AA : 20 F9               		jr	nz, YM2_Input	; loop as long as YM2612 busy
    1014/     5AC : 78                  		ld	a, b
    1015/     5AD : 32 02 40            		ld	(YM2_REGISTER),	a ; write address to YM2
    1016/     5B0 : 79                  		ld	a, c
    1017/     5B1 : 32 03 40            		ld	(YM2_DATA), a	; write	data to	YM2
    1018/     5B4 : C9                  		ret
    1019/     5B5 :                     ; End of function YM2_Input
    1020/     5B5 :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 18 - 8/17/2019 18:52:23


    1021/     5B5 :                     ; ---------------------------------------------------------------------------
    1022/     5B5 :                     ; START	OF FUNCTION CHUNK FOR PSG_ParseToneData
    1023/     5B5 :                     
    1024/     5B5 :                     PSG_SetChannelAttenuation:		; CODE XREF: PSG_ParseToneData+4Fj
    1025/     5B5 :                     					; PSG_ParseNoiseData+41j
    1026/     5B5 : E6 0F               		and	0Fh		; just keep attenuation	parameter
    1027/     5B7 : 67                  		ld	h, a		; save it
    1028/     5B8 : 3A 41 15            		ld	a, (CURRENT_PSG_CHANNEL) ; get concerned channel
    1029/     5BB : B4                  		or	h		; load attenuation value
    1030/     5BC : F6 90               		or	90h ; 'ђ'       ; load attenuation command bits
    1031/     5BE : 32 11 7F            		ld	(PSG_PORT), a	; send message
    1032/     5C1 : C9                  		ret
    1033/     5C2 :                     ; END OF FUNCTION CHUNK	FOR PSG_ParseToneData
    1034/     5C2 :                     
    1035/     5C2 :                     ; =============== S U B R O U T I N E =======================================
    1036/     5C2 :                     
    1037/     5C2 :                     
    1038/     5C2 :                     DAC_SetNewSample:			; CODE XREF: YM2_ParseChannel6Data+2Dp
    1039/     5C2 :                     					; YM2_ParseChannel6Data+B7p
    1040/     5C2 : 47                  		ld	b, a
    1041/     5C3 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX) ; indicates if an SFX type 2	is being processed, because these ones use extra channel ram areas, to keep current music data for when	SFX is finished
    1042/     5C6 : B7                  		or	a
    1043/     5C7 : 20 18               		jr	nz, loc_562	; if currently managing	SFX channel ram	data, just set new sample to load
    1044/     5C9 : D9                  		exx
    1045/     5CA : DD E5               		push	ix		; otherwise, check if an SFX is	being played, since it has priority
    1046/     5CC : E1                  		pop	hl
    1047/     5CD : 01 E3 01            		ld	bc, 01E3h ; 'г'
    1048/     5D0 : 09                  		add	hl, bc
    1049/     5D1 : 7E                  		ld	a, (hl)		; get "channel not in use" byte for SFX Channel 1
    1050/     5D2 : D9                  		exx
    1051/     5D3 : B7                  		or	a
    1052/     5D4 : C8                  		ret	z		; if SFX Channel 1 in use, return
    1053/     5D5 : 3A 49 15            		ld	a, (FADE_OUT_COUNTER) ;	Counts how many	times the fade out timer reached 0. Fade out stops at value $0C.
    1054/     5D8 : FE 03               		cp	3		; if fade out counter >	3, don't play sample, it would be too loud compared to the other channels
    1055/     5DA : D0                  		ret	nc
    1056/     5DB : 3A FD 1F            		ld	a, (MUSIC_LEVEL) ; general output level	for music and SFX type 1, sent from 68k
    1057/     5DE : FE 0F               		cp	0Fh		; if general sound level not at	its max, then don't play sample
    1058/     5E0 : C0                  		ret	nz
    1059/     5E1 :                     
    1060/     5E1 :                     loc_562:				; CODE XREF: DAC_SetNewSample+5j
    1061/     5E1 : 78                  		ld	a, b
    1062/     5E2 : 32 F8 1F            		ld	(NEW_SAMPLE_TO_LOAD), a	; stores the index of a	new DAC	sample to play
    1063/     5E5 : C9                  		ret
    1064/     5E6 :                     ; End of function DAC_SetNewSample
    1065/     5E6 :                     
    1066/     5E6 :                     
    1067/     5E6 :                     ; =============== S U B R O U T I N E =======================================
    1068/     5E6 :                     
    1069/     5E6 :                     
    1070/     5E6 :                     YM1_ParseData:				; CODE XREF: UpdateSound+70p
    1071/     5E6 :                     					; UpdateSound+76p UpdateSound+7Cp
    1072/     5E6 : FD 7E 00            		ld	a, (iy+0)	; iy : channel to process
    1073/     5E9 : DD 21 10 18         		ld	ix, MUSIC_CHANNEL_YM1
    1074/     5ED : F5                  		push	af
    1075/     5EE : 87                  		add	a, a		; THIS PART just inits iy, ix, and frequency registers
    1076/     5EF : 87                  		add	a, a
    1077/     5F0 : 87                  		add	a, a
    1078/     5F1 : 87                  		add	a, a		; a = 10h * a
    1079/     5F2 : 57                  		ld	d, a		; d = 10h * a
    1080/     5F3 : 87                  		add	a, a		; a = 20h * a
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 19 - 8/17/2019 18:52:23


    1081/     5F4 : 82                  		add	a, d		; a = 30h * a
    1082/     5F5 : 16 00               		ld	d, 0
    1083/     5F7 : 5F                  		ld	e, a
    1084/     5F8 : DD 19               		add	ix, de		; point	to appropriate channel ram data
    1085/     5FA : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    1086/     5FD : B7                  		or	a
    1087/     5FE : 28 05               		jr	z, loc_nimp
    1088/     600 : 11 E0 01            		ld	de, 01E0h ; 'а'  ; point to the right SFX channel data
    1089/     603 : DD 19               		add	ix, de
    1090/     605 :                     loc_nimp:
    1091/     605 : F1                  		pop	af
    1092/     606 : 0E A0               		ld	c, 0A0h	; ' '
    1093/     608 : 81                  		add	a, c		; A0 + channel number :	first input address of frequency  register
    1094/     609 : 32 2D 08            		ld	(loc_77D+1), a	; parameter directly moved to code in ram !
    1095/     60C : 0E 04               		ld	c, 4
    1096/     60E : 81                  		add	a, c		; (0x77E) + 4 :	second input address of	frequency register
    1097/     60F : 32 24 08            		ld	(loc_774+1), a	; parameter directly moved to code in ram !
    1098/     612 :                     
    1099/     612 :                     loc_586:				; CODE XREF: YM1_ParseData+140j
    1100/     612 : DD 7E 03            		ld	a, (ix+3)	; THIS PART checks if the channel actually has to be used or not
    1101/     615 : B7                  		or	a
    1102/     616 : C0                  		ret	nz		; if byte 3 = 1, do nothing with this channel
    1103/     617 : DD 7E 06            		ld	a, (ix+6)	; THIS PART seems to check if it's time to release key or not yet
    1104/     61A : DD BE 02            		cp	(ix+2)
    1105/     61D : 20 0F               		jr	nz, loc_5A2	; if bytes 2 !=	byte 6,	then it's not yet the end of note
    1106/     61F : DD 7E 08            		ld	a, (ix+8)	; if byte 2 = byte 6, end of note counter, check byte 8
    1107/     622 : B7                  		or	a
    1108/     623 : 20 09               		jr	nz, loc_5A2	; if byte 8 != 0
    1109/     625 : 06 28               		ld	b, 28h ; '('    ; so if (byte 2 = byte 6) and (byte 8 = 0), set key off
    1110/     627 : FD 7E 00            		ld	a, (iy+0)	; concerned channel
    1111/     62A : 4F                  		ld	c, a
    1112/     62B : CD 66 05            		call	YM1_ConditionnalInput	; set key OFF
    1113/     62E :                     
    1114/     62E :                     loc_5A2:				; CODE XREF: YM1_ParseData+2Aj
    1115/     62E :                     					; YM1_ParseData+30j
    1116/     62E : DD 7E 02            		ld	a, (ix+2)	; THIS PART checks if it's time to parse new music data or not yet (I think)
    1117/     631 : B7                  		or	a
    1118/     632 : C2 59 07            		jp	nz, loc_6AA	; if byte 2 != 0
    1119/     635 : DD 56 01            		ld	d, (ix+1)
    1120/     638 : DD 5E 00            		ld	e, (ix+0)	; get ROM offset of next byte to parse
    1121/     63B :                     
    1122/     63B :                     Parsing_Start:				; CODE XREF: YM1_ParseData+7Aj
    1123/     63B :                     					; YM1_ParseData+86j YM1_ParseData+95j
    1124/     63B :                     					; YM1_ParseData+9Fj YM1_ParseData+A9j
    1125/     63B :                     					; YM1_ParseData+B3j YM1_ParseData+BDj
    1126/     63B :                     					; YM1_ParseData+C7j YM1_ParseData+CCj
    1127/     63B : AF                  		xor	a		; THIS PART checks if parsed byte is a command or a parameter
    1128/     63C : DD 77 0D            		ld	(ix+0Dh), a	; clear	vibrato	relative pointer
    1129/     63F : DD 7E 09            		ld	a, (ix+9)
    1130/     642 : DD 77 0A            		ld	(ix+0Ah), a	; load time counter before vibrato
    1131/     645 : 1A                  		ld	a, (de)		; get pointed byte in rom
    1132/     646 : E6 F8               		and	0F8h ; 'ш'      ; keep only bits 7-3
    1133/     648 : FE F8               		cp	0F8h ; 'ш'
    1134/     64A : C2 E5 06            		jp	nz, loc_636	; if kept bits of pointed byte != F8, so if data byte is not a command
    1135/     64D : 1A                  		ld	a, (de)		; else,	value of pointed rom byte is a command
    1136/     64E : FE FF               		cp	0FFh
    1137/     650 : C2 92 06            		jp	nz, Set_Instrument ; if	pointed	byte !=	FF, go test other possible command values
    1138/     653 : 13                  		inc	de		; if pointed rom byte =	FF, then get next two bytes
    1139/     654 : 1A                  		ld	a, (de)		; THIS PART handles an FF command
    1140/     655 : 6F                  		ld	l, a
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 20 - 8/17/2019 18:52:23


    1141/     656 : 13                  		inc	de
    1142/     657 : 1A                  		ld	a, (de)
    1143/     658 : 67                  		ld	h, a
    1144/     659 : B7                  		or	a
    1145/     65A : 20 33               		jr	nz, YM1_Parse_At_New_Offset ; if second	byte !=	0, we have FF xx xx, so	go parse from new offset xxxx
    1146/     65C : 7D                  		ld	a, l
    1147/     65D : B7                  		or	a
    1148/     65E : 28 03               		jr	z, loc_5D7	; if we	have FF	00 00, then mute channel because there is nothing else to do
    1149/     660 : 32 FF 1F            		ld	(NEW_OPERATION), a ; else, we have FF xx 00, so	put first byte in 0x1FFF to process operation xx
    1150/     663 :                     
    1151/     663 :                     loc_5D7:				; CODE XREF: YM1_ParseData+6Bj
    1152/     663 : 3E 01               		ld	a, 1		; THIS PART mutes the channel because it has nothing to	play
    1153/     665 : DD 77 03            		ld	(ix+3),	a	; channel data byte 3 =	1
    1154/     668 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    1155/     66B : B7                  		or	a
    1156/     66C : 28 1D               		jr	z, loc_nimp2
    1157/     66E : 01 20 FE            		ld	bc, 0FE20h	; if an	SFX was	being managed, go back to corresponding	music channel
    1158/     671 : DD 09               		add	ix, bc
    1159/     673 : 3E B4               		ld	a, 0B4h	; 'ґ'   ; YM Register : Stereo / LFO Sensitivity
    1160/     675 : FD 86 00            		add	a, (iy+0)
    1161/     678 : 47                  		ld	b, a
    1162/     679 : DD 4E 1E            		ld	c, (ix+1Eh)	; load corresponding music channel stereo setting
    1163/     67C : CD 83 05            		call	YM1_Input
    1164/     67F : DD 7E 03            		ld	a, (ix+3)
    1165/     682 : B7                  		or	a
    1166/     683 : 20 06               		jr	nz, loc_nimp2
    1167/     685 : DD 7E 04            		ld	a, (ix+4)	; if corresponding music channel in use, load its instrument, and return
    1168/     688 : C3 A4 0A            		jp	YM1_LoadInstrument
    1169/     68B :                     
    1170/     68B :                     
    1171/     68B :                     
    1172/     68B :                     loc_nimp2:
    1173/     68B : AF                  		xor	a
    1174/     68C : C3 A4 0A            		jp	YM1_LoadInstrument ; set channel level to minimum and leave subroutine
    1175/     68F :                     ; ---------------------------------------------------------------------------
    1176/     68F :                     
    1177/     68F :                     YM1_Parse_At_New_Offset:		; CODE XREF: YM1_ParseData+67j
    1178/     68F : EB                  		ex	de, hl		; THIS PART puts in de the new offset from which to parse data
    1179/     690 : 18 A9               		jr	Parsing_Start
    1180/     692 :                     ; ---------------------------------------------------------------------------
    1181/     692 :                     
    1182/     692 :                     Set_Instrument:				; CODE XREF: YM1_ParseData+5Dj
    1183/     692 : FE FE               		cp	0FEh ; 'ю'      ; FE xx : set new instrument xx
    1184/     694 : 20 09               		jr	nz, Load_Note	; FD xx	: play note at level xx. It's followed by other parameters handled at next parsing loop
    1185/     696 : 13                  		inc	de
    1186/     697 : 1A                  		ld	a, (de)
    1187/     698 : CD A0 0A            		call	YM1_SetChannelInstrument
    1188/     69B : 13                  		inc	de
    1189/     69C : C3 3B 06            		jp	Parsing_Start
    1190/     69F :                     ; ---------------------------------------------------------------------------
    1191/     69F :                     
    1192/     69F :                     Load_Note:				; CODE XREF: YM1_ParseData+7Ej
    1193/     69F : FE FD               		cp	0FDh ; 'э'      ; FD xx : play note at level xx. It's followed by other parameters handled at next parsing loop
    1194/     6A1 : 20 0B               		jr	nz, Set_Slide_Or_Key_Release
    1195/     6A3 : 13                  		inc	de
    1196/     6A4 : 1A                  		ld	a, (de)		; get note level
    1197/     6A5 : E6 0F               		and	0Fh
    1198/     6A7 : CD A4 0A            		call	YM1_LoadInstrument
    1199/     6AA : 13                  		inc	de
    1200/     6AB : C3 3B 06            		jp	Parsing_Start
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 21 - 8/17/2019 18:52:23


    1201/     6AE :                     ; ---------------------------------------------------------------------------
    1202/     6AE :                     
    1203/     6AE :                     Set_Slide_Or_Key_Release:		; CODE XREF: YM1_ParseData+8Bj
    1204/     6AE : FE FC               		cp	0FCh ; 'ь'
    1205/     6B0 : 20 06               		jr	nz, Load_Vibrato
    1206/     6B2 : CD A3 10            		call	YM_SetSlideOrKeyRelease
    1207/     6B5 : C3 3B 06            		jp	Parsing_Start
    1208/     6B8 :                     ; ---------------------------------------------------------------------------
    1209/     6B8 :                     
    1210/     6B8 :                     Load_Vibrato:				; CODE XREF: YM1_ParseData+9Aj
    1211/     6B8 : FE FB               		cp	0FBh ; 'ы'
    1212/     6BA : 20 06               		jr	nz, Set_Stereo
    1213/     6BC : CD CA 10            		call	LoadVibrato
    1214/     6BF : C3 3B 06            		jp	Parsing_Start
    1215/     6C2 :                     ; ---------------------------------------------------------------------------
    1216/     6C2 :                     
    1217/     6C2 :                     Set_Stereo:				; CODE XREF: YM1_ParseData+A4j
    1218/     6C2 : FE FA               		cp	0FAh ; 'ъ'
    1219/     6C4 : 20 06               		jr	nz, Load_Note_Shift
    1220/     6C6 : CD EF 10            		call	YM1_SetStereo
    1221/     6C9 : C3 3B 06            		jp	Parsing_Start
    1222/     6CC :                     ; ---------------------------------------------------------------------------
    1223/     6CC :                     
    1224/     6CC :                     Load_Note_Shift:			; CODE XREF: YM1_ParseData+AEj
    1225/     6CC : FE F9               		cp	0F9h ; 'щ'
    1226/     6CE : 20 06               		jr	nz, Loop_Command
    1227/     6D0 : CD 18 11            		call	LoadNoteShift
    1228/     6D3 : C3 3B 06            		jp	Parsing_Start
    1229/     6D6 :                     ; ---------------------------------------------------------------------------
    1230/     6D6 :                     
    1231/     6D6 :                     Loop_Command:				; CODE XREF: YM1_ParseData+B8j
    1232/     6D6 : FE F8               		cp	0F8h ; 'ш'
    1233/     6D8 : 20 06               		jr	nz, Theoretically_Unreachable
    1234/     6DA : CD 30 11            		call	ParseLoopCommand
    1235/     6DD : C3 3B 06            		jp	Parsing_Start
    1236/     6E0 :                     ; ---------------------------------------------------------------------------
    1237/     6E0 :                     
    1238/     6E0 :                     Theoretically_Unreachable:		; CODE XREF: YM1_ParseData+C2j
    1239/     6E0 : 13                  		inc	de		; if none of the commands from above are found,
    1240/     6E1 : 13                  		inc	de		; then ignore and start	process	again two bytes	forward. Theoretically,	it can't happen ...
    1241/     6E2 : C3 3B 06            		jp	Parsing_Start
    1242/     6E5 :                     ; ---------------------------------------------------------------------------
    1243/     6E5 :                     
    1244/     6E5 :                     loc_636:				; CODE XREF: YM1_ParseData+57j
    1245/     6E5 : 1A                  		ld	a, (de)		; we are here because a	< F8, so a can still be	F0, 70,	or a new note frequency	to play
    1246/     6E6 : E6 7F               		and	7Fh ; ''
    1247/     6E8 : FE 70               		cp	70h ; 'p'
    1248/     6EA : CA 3D 07            		jp	z, loc_68E	; if a = F0 or 70. Else, a is a	note frequency byte
    1249/     6ED : DD 86 1C            		add	a, (ix+1Ch)	; 1C affects note index	up or down. It's set by command F9
    1250/     6F0 : 6F                  		ld	l, a
    1251/     6F1 : 26 00               		ld	h, 0
    1252/     6F3 : 01 DB 12            		ld	bc, t_YM_FREQUENCIES ; load table of YM	frequencies
    1253/     6F6 : 29                  		add	hl, hl
    1254/     6F7 : 09                  		add	hl, bc		; now hl points	to the YM frequency value corresponding	to the note's frequency
    1255/     6F8 : 7E                  		ld	a, (hl)
    1256/     6F9 : 2B                  		dec	hl
    1257/     6FA : 6E                  		ld	l, (hl)		; l = byte to put in YM	Register Frequency 2
    1258/     6FB : 67                  		ld	h, a		; h = byte to put in YM	Register Frequency 1
    1259/     6FC : 06 00               		ld	b, 0
    1260/     6FE : DD 4E 1D            		ld	c, (ix+1Dh)	; byte 1D affects frequency up.	It's set by command F9. Is it used ? I'll look in SF2 musics
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 22 - 8/17/2019 18:52:23


    1261/     701 : 09                  		add	hl, bc
    1262/     702 : 3A 24 08            		ld	a, (loc_774+1)
    1263/     705 : 47                  		ld	b, a		; YM Register :	Frequency 2
    1264/     706 : 4C                  		ld	c, h		; input	value
    1265/     707 : DD 71 12            		ld	(ix+12h), c
    1266/     70A : DD 7E 1F            		ld	a, (ix+1Fh)	; if channel byte 1F !=	0, then	pitch slide is activated
    1267/     70D : B7                  		or	a		; so keep final	value to reach in channel byte 12
    1268/     70E : 20 07               		jr	nz, loc_668	; then jump
    1269/     710 : DD 71 0F            		ld	(ix+0Fh), c	; else,	put it directly	in channel byte	0F
    1270/     713 : AF                  		xor	a
    1271/     714 : DD 77 12            		ld	(ix+12h), a
    1272/     717 :                     
    1273/     717 :                     loc_668:				; CODE XREF: YM1_ParseData+F8j
    1274/     717 : CD 66 05            		call	YM1_ConditionnalInput
    1275/     71A : 3A 2D 08            		ld	a, (loc_77D+1)	; dynamically changed :	1st frequency register to use corresponding to current channel
    1276/     71D : 47                  		ld	b, a		; YM register :	Frequency 1
    1277/     71E : 4D                  		ld	c, l		; input	value
    1278/     71F : DD 71 11            		ld	(ix+11h), c
    1279/     722 : DD 7E 1F            		ld	a, (ix+1Fh)	; if channel byte 1F !=	0, pitch slide is activated
    1280/     725 : B7                  		or	a		; so keep value	in channel byte	11
    1281/     726 : 20 07               		jr	nz, loc_680	; then jump
    1282/     728 : DD 71 0E            		ld	(ix+0Eh), c	; else,	put it directly	in channel byte	0E
    1283/     72B : AF                  		xor	a
    1284/     72C : DD 77 11            		ld	(ix+11h), a
    1285/     72F :                     
    1286/     72F :                     loc_680:				; CODE XREF: YM1_ParseData+110j
    1287/     72F : CD 66 05            		call	YM1_ConditionnalInput
    1288/     732 : 06 28               		ld	b, 28h ; '('    ; YM Register : Key on/off
    1289/     734 : FD 7E 00            		ld	a, (iy+0)
    1290/     737 : F6 F0               		or	0F0h ; 'р'      ; set key ON
    1291/     739 : 4F                  		ld	c, a
    1292/     73A : CD 66 05            		call	YM1_ConditionnalInput
    1293/     73D :                     
    1294/     73D :                     loc_68E:				; CODE XREF: YM1_ParseData+D4j
    1295/     73D : 1A                  		ld	a, (de)		; get full byte	again
    1296/     73E : CB 7F               		bit	7, a
    1297/     740 : 20 05               		jr	nz, Command_F0	; if bit 7 set,	then it's command F0 or it's new note to play needing new note length
    1298/     742 : DD 7E 07            		ld	a, (ix+7)	; else use existing time period
    1299/     745 : 18 05               		jr	loc_69D
    1300/     747 :                     ; ---------------------------------------------------------------------------
    1301/     747 :                     
    1302/     747 :                     Command_F0:				; CODE XREF: YM1_ParseData+12Aj
    1303/     747 : 13                  		inc	de		; if a's bit 7 is set, then it's F0
    1304/     748 : 1A                  		ld	a, (de)		; set a	new time period	with next byte
    1305/     749 : DD 77 07            		ld	(ix+7),	a
    1306/     74C :                     
    1307/     74C :                     loc_69D:				; CODE XREF: YM1_ParseData+12Fj
    1308/     74C : DD 77 02            		ld	(ix+2),	a	; also put time	period in channel byte 2, which	is the time counter
    1309/     74F : 13                  		inc	de
    1310/     750 : DD 72 01            		ld	(ix+1),	d	; point	to next	channel	rom byte
    1311/     753 : DD 73 00            		ld	(ix+0),	e
    1312/     756 : C3 12 06            		jp	loc_586
    1313/     759 :                     ; ---------------------------------------------------------------------------
    1314/     759 :                     
    1315/     759 :                     loc_6AA:				; CODE XREF: YM1_ParseData+3Fj
    1316/     759 : DD 35 02            		dec	(ix+2)		; decrement channel time counter
    1317/     75C : DD 46 12            		ld	b, (ix+12h)
    1318/     75F : DD 4E 11            		ld	c, (ix+11h)
    1319/     762 : 78                  		ld	a, b
    1320/     763 : B1                  		or	c
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 23 - 8/17/2019 18:52:23


    1321/     764 : 28 77               		jr	z, loc_72E	; if bc	= 0, then there	is no pitch slide
    1322/     766 : DD 7E 0F            		ld	a, (ix+0Fh)	; else,	pitch slide !
    1323/     769 : 67                  		ld	h, a
    1324/     76A : DD 7E 0E            		ld	a, (ix+0Eh)
    1325/     76D : 6F                  		ld	l, a		; hl = current frequency ; bc =	frequency to reach
    1326/     76E : C5                  		push	bc
    1327/     76F : E5                  		push	hl
    1328/     770 : B7                  		or	a
    1329/     771 : ED 42               		sbc	hl, bc		; get frequency	difference
    1330/     773 : 7C                  		ld	a, h
    1331/     774 : 32 4F 15            		ld	(TEMP_FREQUENCY), a ; save first frequency byte	... why	?
    1332/     777 : 30 08               		jr	nc, loc_6D2	; if bc	<= hl, so if frequency value to	reach is lower
    1333/     779 : 06 00               		ld	b, 0
    1334/     77B : DD 4E 1F            		ld	c, (ix+1Fh)	; frequency to reach is	higher,	so get slide up	value
    1335/     77E : C3 89 07            		jp	loc_6DA
    1336/     781 :                     ; ---------------------------------------------------------------------------
    1337/     781 :                     
    1338/     781 :                     loc_6D2:				; CODE XREF: YM1_ParseData+161j
    1339/     781 : 06 FF               		ld	b, 0FFh		; frequency to reach is	lower, so get slide down value
    1340/     783 : DD 7E 1F            		ld	a, (ix+1Fh)
    1341/     786 : ED 44               		neg			; get negative value of	pitch slide speed in order to slide down
    1342/     788 : 4F                  		ld	c, a
    1343/     789 :                     
    1344/     789 :                     loc_6DA:				; CODE XREF: YM1_ParseData+168j
    1345/     789 : E1                  		pop	hl
    1346/     78A : 09                  		add	hl, bc		; apply	slide on frequency
    1347/     78B : C1                  		pop	bc
    1348/     78C : E5                  		push	hl
    1349/     78D : B7                  		or	a
    1350/     78E : ED 42               		sbc	hl, bc		; get new frequency difference
    1351/     790 : 3A 4F 15            		ld	a, (TEMP_FREQUENCY) ; xor old h	and new	h
    1352/     793 : AC                  		xor	h
    1353/     794 : CB 7F               		bit	7, a
    1354/     796 : E1                  		pop	hl
    1355/     797 : 20 37               		jr	nz, loc_721	; jump if bit 7	of xor result =	1, go put final	pitch as current frequency, but	how can	it happen ?
    1356/     799 : E5                  		push	hl
    1357/     79A : 7C                  		ld	a, h
    1358/     79B : E6 07               		and	7		; leave	octave bits, just keep frequency bits
    1359/     79D : 67                  		ld	h, a
    1360/     79E : 22 4F 15            		ld	(TEMP_FREQUENCY), hl ; save new	frequency
    1361/     7A1 : 01 D4 04            		ld	bc, 4D4h
    1362/     7A4 : B7                  		or	a
    1363/     7A5 : ED 42               		sbc	hl, bc
    1364/     7A7 : 38 06               		jr	c, loc_700	; if hl	frequency (without octave) < $4D4
    1365/     7A9 : 01 96 05            		ld	bc, 596h	; hl > $4D4, so	add $596
    1366/     7AC : C3 C3 07            		jp	loc_714
    1367/     7AF :                     ; ---------------------------------------------------------------------------
    1368/     7AF :                     
    1369/     7AF :                     loc_700:				; CODE XREF: YM1_ParseData+191j
    1370/     7AF : 2A 4F 15            		ld	hl, (TEMP_FREQUENCY) ; temp space to store frequency values when YM data is parsed
    1371/     7B2 : 01 6A 02            		ld	bc, 26Ah	; 2 * $26A = $4D4
    1372/     7B5 : B7                  		or	a
    1373/     7B6 : ED 42               		sbc	hl, bc
    1374/     7B8 : 30 06               		jr	nc, loc_711	; if hl	frequency (without octave) >= 26A
    1375/     7BA : 01 6A FA            		ld	bc, 0FA6Ah	; hl < $26A, so	sub $596
    1376/     7BD : C3 C3 07            		jp	loc_714
    1377/     7C0 :                     ; ---------------------------------------------------------------------------
    1378/     7C0 :                     
    1379/     7C0 :                     loc_711:				; CODE XREF: YM1_ParseData+1A2j
    1380/     7C0 : 01 00 00            		ld	bc, 0		; hl between $26A and $4D4, so do nothing
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 24 - 8/17/2019 18:52:23


    1381/     7C3 :                     
    1382/     7C3 :                     loc_714:				; CODE XREF: YM1_ParseData+196j
    1383/     7C3 :                     					; YM1_ParseData+1A7j
    1384/     7C3 : E1                  		pop	hl
    1385/     7C4 : 09                  		add	hl, bc
    1386/     7C5 : 7C                  		ld	a, h
    1387/     7C6 : DD 77 0F            		ld	(ix+0Fh), a	; set new frequency... but why do they have to add/sub $596 O___o ?!
    1388/     7C9 : 7D                  		ld	a, l
    1389/     7CA : DD 77 0E            		ld	(ix+0Eh), a
    1390/     7CD : C3 DD 07            		jp	loc_72E
    1391/     7D0 :                     ; ---------------------------------------------------------------------------
    1392/     7D0 :                     
    1393/     7D0 :                     loc_721:				; CODE XREF: YM1_ParseData+181j
    1394/     7D0 : DD 70 0F            		ld	(ix+0Fh), b	; current frequency = final slide pitch
    1395/     7D3 : DD 71 0E            		ld	(ix+0Eh), c
    1396/     7D6 : AF                  		xor	a
    1397/     7D7 : DD 77 11            		ld	(ix+11h), a	; end of slide
    1398/     7DA : DD 77 12            		ld	(ix+12h), a
    1399/     7DD :                     
    1400/     7DD :                     loc_72E:				; CODE XREF: YM1_ParseData+14Ej
    1401/     7DD :                     					; YM1_ParseData+1B7j
    1402/     7DD : DD 7E 0A            		ld	a, (ix+0Ah)
    1403/     7E0 : B7                  		or	a
    1404/     7E1 : 28 06               		jr	z, loc_73A	; if channel byte 0A = 0 ... then start	vibrato	?
    1405/     7E3 : DD 35 0A            		dec	(ix+0Ah)	; decrement channel byte 0A : I	think this is a	time counter before note vibrato
    1406/     7E6 : AF                  		xor	a
    1407/     7E7 : 18 29               		jr	EndPart
    1408/     7E9 :                     ; ---------------------------------------------------------------------------
    1409/     7E9 :                     
    1410/     7E9 :                     loc_73A:				; CODE XREF: YM1_ParseData+1CBj
    1411/     7E9 :                     					; YM1_ParseData+1F9j
    1412/     7E9 : DD 7E 0C            		ld	a, (ix+0Ch)
    1413/     7EC : 67                  		ld	h, a
    1414/     7ED : DD 7E 0B            		ld	a, (ix+0Bh)
    1415/     7F0 : 6F                  		ld	l, a		; hl = vibrato pointer
    1416/     7F1 : DD 7E 0D            		ld	a, (ix+0Dh)	; get vibrato relative pointer
    1417/     7F4 : 06 00               		ld	b, 0
    1418/     7F6 : 4F                  		ld	c, a
    1419/     7F7 : DD 34 0D            		inc	(ix+0Dh)
    1420/     7FA : 09                  		add	hl, bc		; point	to next	vibrato	byte
    1421/     7FB : 7E                  		ld	a, (hl)
    1422/     7FC : FE 81               		cp	81h ; 'Ѓ'
    1423/     7FE : 20 06               		jr	nz, loc_757
    1424/     800 : DD 35 0D            		dec	(ix+0Dh)	; if byte = 81,	point previous byte and	do nothing ? O_o
    1425/     803 : AF                  		xor	a		; anyway, there's no $81 in the data -_- ...
    1426/     804 : 18 0C               		jr	EndPart
    1427/     806 :                     ; ---------------------------------------------------------------------------
    1428/     806 :                     
    1429/     806 :                     loc_757:				; CODE XREF: YM1_ParseData+1E8j
    1430/     806 : FE 80               		cp	80h ; 'Ђ'
    1431/     808 : C2 12 08            		jp	nz, EndPart
    1432/     80B : AF                  		xor	a		; if byte = 80,	it's the end of vibrato data, so go back to the beginning
    1433/     80C : DD 77 0D            		ld	(ix+0Dh), a
    1434/     80F : C3 E9 07            		jp	loc_73A
    1435/     812 :                     ; ---------------------------------------------------------------------------
    1436/     812 :                     
    1437/     812 :                     EndPart:				; CODE XREF: YM1_ParseData+1D1j
    1438/     812 :                     					; YM1_ParseData+1EEj
    1439/     812 :                     					; YM1_ParseData+1F2j
    1440/     812 : 4F                  		ld	c, a		; a = vibrato value to apply
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 25 - 8/17/2019 18:52:23


    1441/     813 : DD 7E 0E            		ld	a, (ix+0Eh)
    1442/     816 : 6F                  		ld	l, a
    1443/     817 : DD 7E 0F            		ld	a, (ix+0Fh)
    1444/     81A : 67                  		ld	h, a		; hl = current note's frequency value
    1445/     81B : 06 00               		ld	b, 0
    1446/     81D : CB 79               		bit	7, c
    1447/     81F : 28 01               		jr	z, loc_773
    1448/     821 : 05                  		dec	b		; if c is a negative value, b =	FF
    1449/     822 :                     
    1450/     822 :                     loc_773:				; CODE XREF: YM1_ParseData+209j
    1451/     822 : 09                  		add	hl, bc		; after	this, up to date frequency is sent to YM
    1452/     823 :                     
    1453/     823 :                     loc_774:				; DATA XREF: YM1_ParseData+1Cw
    1454/     823 :                     					; YM1_ParseData+ECr YM2_ParseData+11Ar
    1455/     823 : 06 00               		ld	b, 0		; dynamically changed :	2nd frequency register corresponding to	current	channel
    1456/     825 : 4C                  		ld	c, h
    1457/     826 : DD 71 0F            		ld	(ix+0Fh), c
    1458/     829 : CD 66 05            		call	YM1_ConditionnalInput
    1459/     82C :                     
    1460/     82C :                     loc_77D:				; DATA XREF: YM1_ParseData+16w
    1461/     82C :                     					; YM1_ParseData+104r
    1462/     82C :                     					; YM2_ParseData+132r
    1463/     82C : 06 00               		ld	b, 0		; dynamically changed :	1st frequency register to use corresponding to current channel
    1464/     82E : 4D                  		ld	c, l
    1465/     82F : DD 71 0E            		ld	(ix+0Eh), c
    1466/     832 : CD 66 05            		call	YM1_ConditionnalInput
    1467/     835 : 3A 48 15            		ld	a, (FADE_OUT_TIMER) ; Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while	loading	music
    1468/     838 : B7                  		or	a
    1469/     839 : C0                  		ret	nz
    1470/     83A : DD 7E 04            		ld	a, (ix+4)	; if currently fading out, make	sure the instrument level is updated
    1471/     83D : C3 A4 0A            		jp	YM1_LoadInstrument
    1472/     840 :                     ; End of function YM1_ParseData
    1473/     840 :                     
    1474/     840 :                     
    1475/     840 :                     ; =============== S U B R O U T I N E =======================================
    1476/     840 :                     
    1477/     840 :                     
    1478/     840 :                     YM2_ParseData:				; CODE XREF: UpdateSound+88p
    1479/     840 :                     					; UpdateSound+8Ep UpdateSound+B9p
    1480/     840 :                     					; UpdateSound+BFp
    1481/     840 :                     					; YM2_ParseChannel6Data+15j
    1482/     840 : FD 7E 00            		ld	a, (iy+0)	; exactly the same general behaviour as	YM1_ParseData, with access to YM2 instead
    1483/     843 : DD 21 A0 18         		ld	ix, MUSIC_CHANNEL_YM4
    1484/     847 : F5                  		push	af
    1485/     848 : 87                  		add	a, a
    1486/     849 : 87                  		add	a, a
    1487/     84A : 87                  		add	a, a
    1488/     84B : 87                  		add	a, a		; a = 10h * a
    1489/     84C : 57                  		ld	d, a		; d = 10h * a
    1490/     84D : 87                  		add	a, a		; a = 20h * a
    1491/     84E : 82                  		add	a, d		; a = 30h * a
    1492/     84F : 16 00               		ld	d, 0
    1493/     851 : 5F                  		ld	e, a
    1494/     852 : DD 19               		add	ix, de
    1495/     854 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    1496/     857 : B7                  		or	a
    1497/     858 : 28 05               		jr	z, loc_7AE
    1498/     85A : 11 E0 01            		ld	de, 01E0h ; 'а'  ; point to the right SFX channel data
    1499/     85D : DD 19               		add	ix, de
    1500/     85F :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 26 - 8/17/2019 18:52:23


    1501/     85F :                     loc_7AE:				; CODE XREF: YM2_ParseData+16j
    1502/     85F : F1                  		pop	af
    1503/     860 : 0E A0               		ld	c, 0A0h	; ' '
    1504/     862 : 81                  		add	a, c
    1505/     863 : 32 88 0A            		ld	(loc_9D7+1), a
    1506/     866 : 0E 04               		ld	c, 4
    1507/     868 : 81                  		add	a, c
    1508/     869 : 32 7F 0A            		ld	(loc_9CE+1), a
    1509/     86C :                     
    1510/     86C :                     loc_7BB:				; CODE XREF: YM2_ParseData+170j
    1511/     86C : DD 7E 03            		ld	a, (ix+3)
    1512/     86F : B7                  		or	a
    1513/     870 : C0                  		ret	nz
    1514/     871 : DD 7E 06            		ld	a, (ix+6)
    1515/     874 : DD BE 02            		cp	(ix+2)
    1516/     877 : 20 11               		jr	nz, loc_7D9
    1517/     879 : DD 7E 08            		ld	a, (ix+8)
    1518/     87C : B7                  		or	a
    1519/     87D : 20 0B               		jr	nz, loc_7D9
    1520/     87F : 06 28               		ld	b, 28h ; '('    ; YM register : Key on/off
    1521/     881 : FD 7E 00            		ld	a, (iy+0)
    1522/     884 : C6 04               		add	a, 4
    1523/     886 : 4F                  		ld	c, a
    1524/     887 : CD 66 05            		call	YM1_ConditionnalInput
    1525/     88A :                     
    1526/     88A :                     loc_7D9:				; CODE XREF: YM2_ParseData+35j
    1527/     88A :                     					; YM2_ParseData+3Bj
    1528/     88A : DD 7E 02            		ld	a, (ix+2)
    1529/     88D : B7                  		or	a
    1530/     88E : C2 B4 09            		jp	nz, loc_904
    1531/     891 : DD 56 01            		ld	d, (ix+1)
    1532/     894 : DD 5E 00            		ld	e, (ix+0)
    1533/     897 :                     
    1534/     897 :                     loc_7E6:				; CODE XREF: YM2_ParseData+A8j
    1535/     897 :                     					; YM2_ParseData+B4j YM2_ParseData+C3j
    1536/     897 :                     					; YM2_ParseData+CDj YM2_ParseData+D7j
    1537/     897 :                     					; YM2_ParseData+E1j YM2_ParseData+EBj
    1538/     897 :                     					; YM2_ParseData+F5j YM2_ParseData+FAj
    1539/     897 : AF                  		xor	a
    1540/     898 : DD 77 0D            		ld	(ix+0Dh), a
    1541/     89B : DD 7E 09            		ld	a, (ix+9)
    1542/     89E : DD 77 0A            		ld	(ix+0Ah), a
    1543/     8A1 : 1A                  		ld	a, (de)
    1544/     8A2 : E6 F8               		and	0F8h ; 'ш'
    1545/     8A4 : FE F8               		cp	0F8h ; 'ш'
    1546/     8A6 : C2 3E 09            		jp	nz, loc_88E
    1547/     8A9 : 1A                  		ld	a, (de)
    1548/     8AA : FE FF               		cp	0FFh
    1549/     8AC : C2 EB 08            		jp	nz, setInstrument
    1550/     8AF : 13                  		inc	de
    1551/     8B0 : 1A                  		ld	a, (de)
    1552/     8B1 : 6F                  		ld	l, a
    1553/     8B2 : 13                  		inc	de
    1554/     8B3 : 1A                  		ld	a, (de)
    1555/     8B4 : 67                  		ld	h, a
    1556/     8B5 : B5                  		or	l
    1557/     8B6 : 20 30               		jr	nz, loc_838	; jump if FF xx	xx
    1558/     8B8 : 3E 01               		ld	a, 1		; else,	end of data for	this channel
    1559/     8BA : DD 77 03            		ld	(ix+3),	a
    1560/     8BD : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 27 - 8/17/2019 18:52:23


    1561/     8C0 : B7                  		or	a
    1562/     8C1 : 28 21               		jr	z, loc_834
    1563/     8C3 : 01 20 FE            		ld	bc, 0FE20h	; if an	SFX was	being managed, go back to corresponding	music channel
    1564/     8C6 : DD 09               		add	ix, bc
    1565/     8C8 : 3E B4               		ld	a, 0B4h	; 'ґ'   ; YM Register : Stereo / LFO Sensitivity
    1566/     8CA : DD 22 F6 1F         		ld	(01FF6h), ix
    1567/     8CE : FD 86 00            		add	a, (iy+0)
    1568/     8D1 : 47                  		ld	b, a
    1569/     8D2 : DD 4E 1E            		ld	c, (ix+1Eh)	; load corresponding music channel stereo setting
    1570/     8D5 : CD A5 05            		call	YM2_Input
    1571/     8D8 : DD 7E 03            		ld	a, (ix+3)
    1572/     8DB : B7                  		or	a
    1573/     8DC : 20 06               		jr	nz, loc_834
    1574/     8DE : DD 7E 04            		ld	a, (ix+4)	; if corresponding music channel in use, load its instrument, and return
    1575/     8E1 : C3 6C 0B            		jp	YM2_LoadInstrument
    1576/     8E4 :                     ; ---------------------------------------------------------------------------
    1577/     8E4 :                     
    1578/     8E4 :                     loc_834:				; CODE XREF: YM2_ParseData+84j
    1579/     8E4 :                     					; YM2_ParseData+9Bj
    1580/     8E4 : AF                  		xor	a
    1581/     8E5 : C3 6C 0B            		jp	YM2_LoadInstrument
    1582/     8E8 :                     ; ---------------------------------------------------------------------------
    1583/     8E8 :                     
    1584/     8E8 :                     loc_838:				; CODE XREF: YM2_ParseData+74j
    1585/     8E8 : EB                  		ex	de, hl
    1586/     8E9 : 18 AC               		jr	loc_7E6
    1587/     8EB :                     ; ---------------------------------------------------------------------------
    1588/     8EB :                     
    1589/     8EB :                     setInstrument:				; CODE XREF: YM2_ParseData+6Aj
    1590/     8EB : FE FE               		cp	0FEh ; 'ю'
    1591/     8ED : 20 09               		jr	nz, loc_848
    1592/     8EF : 13                  		inc	de
    1593/     8F0 : 1A                  		ld	a, (de)
    1594/     8F1 : CD 68 0B            		call	YM2_setChannelInstrument
    1595/     8F4 : 13                  		inc	de
    1596/     8F5 : C3 97 08            		jp	loc_7E6
    1597/     8F8 :                     ; ---------------------------------------------------------------------------
    1598/     8F8 :                     
    1599/     8F8 :                     loc_848:				; CODE XREF: YM2_ParseData+ACj
    1600/     8F8 : FE FD               		cp	0FDh ; 'э'
    1601/     8FA : 20 0B               		jr	nz, loc_857
    1602/     8FC : 13                  		inc	de
    1603/     8FD : 1A                  		ld	a, (de)
    1604/     8FE : E6 0F               		and	0Fh
    1605/     900 : CD 6C 0B            		call	YM2_LoadInstrument
    1606/     903 : 13                  		inc	de
    1607/     904 : C3 97 08            		jp	loc_7E6
    1608/     907 :                     ; ---------------------------------------------------------------------------
    1609/     907 :                     
    1610/     907 :                     loc_857:				; CODE XREF: YM2_ParseData+B9j
    1611/     907 : FE FC               		cp	0FCh ; 'ь'
    1612/     909 : 20 06               		jr	nz, loc_861
    1613/     90B : CD A3 10            		call	YM_SetSlideOrKeyRelease
    1614/     90E : C3 97 08            		jp	loc_7E6
    1615/     911 :                     ; ---------------------------------------------------------------------------
    1616/     911 :                     
    1617/     911 :                     loc_861:				; CODE XREF: YM2_ParseData+C8j
    1618/     911 : FE FB               		cp	0FBh ; 'ы'
    1619/     913 : 20 06               		jr	nz, loc_86B
    1620/     915 : CD CA 10            		call	LoadVibrato
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 28 - 8/17/2019 18:52:23


    1621/     918 : C3 97 08            		jp	loc_7E6
    1622/     91B :                     ; ---------------------------------------------------------------------------
    1623/     91B :                     
    1624/     91B :                     loc_86B:				; CODE XREF: YM2_ParseData+D2j
    1625/     91B : FE FA               		cp	0FAh ; 'ъ'
    1626/     91D : 20 06               		jr	nz, loc_875
    1627/     91F : CD 05 11            		call	YM2_SetStereo
    1628/     922 : C3 97 08            		jp	loc_7E6
    1629/     925 :                     ; ---------------------------------------------------------------------------
    1630/     925 :                     
    1631/     925 :                     loc_875:				; CODE XREF: YM2_ParseData+DCj
    1632/     925 : FE F9               		cp	0F9h ; 'щ'
    1633/     927 : 20 06               		jr	nz, loc_87F
    1634/     929 : CD 18 11            		call	LoadNoteShift
    1635/     92C : C3 97 08            		jp	loc_7E6
    1636/     92F :                     ; ---------------------------------------------------------------------------
    1637/     92F :                     
    1638/     92F :                     loc_87F:				; CODE XREF: YM2_ParseData+E6j
    1639/     92F : FE F8               		cp	0F8h ; 'ш'
    1640/     931 : 20 06               		jr	nz, loc_889
    1641/     933 : CD 30 11            		call	ParseLoopCommand
    1642/     936 : C3 97 08            		jp	loc_7E6
    1643/     939 :                     ; ---------------------------------------------------------------------------
    1644/     939 :                     
    1645/     939 :                     loc_889:				; CODE XREF: YM2_ParseData+F0j
    1646/     939 : 13                  		inc	de
    1647/     93A : 13                  		inc	de
    1648/     93B : C3 97 08            		jp	loc_7E6
    1649/     93E :                     ; ---------------------------------------------------------------------------
    1650/     93E :                     
    1651/     93E :                     loc_88E:				; CODE XREF: YM2_ParseData+64j
    1652/     93E : 1A                  		ld	a, (de)
    1653/     93F : E6 7F               		and	7Fh ; ''
    1654/     941 : FE 70               		cp	70h ; 'p'
    1655/     943 : CA 98 09            		jp	z, loc_8E8
    1656/     946 : DD 86 1C            		add	a, (ix+1Ch)	; index
    1657/     949 : 6F                  		ld	l, a
    1658/     94A : 26 00               		ld	h, 0
    1659/     94C : 01 DB 12            		ld	bc, t_YM_FREQUENCIES ; these words are not pointers, they are the two frequency	bytes to send to YM for	a given	note
    1660/     94F : 29                  		add	hl, hl
    1661/     950 : 09                  		add	hl, bc
    1662/     951 : 7E                  		ld	a, (hl)
    1663/     952 : 2B                  		dec	hl
    1664/     953 : 6E                  		ld	l, (hl)
    1665/     954 : 67                  		ld	h, a		; hl = corresponding word
    1666/     955 : 06 00               		ld	b, 0
    1667/     957 : DD 4E 1D            		ld	c, (ix+1Dh)
    1668/     95A : 09                  		add	hl, bc
    1669/     95B : 3A 24 08            		ld	a, (loc_774+1)
    1670/     95E : 47                  		ld	b, a
    1671/     95F : 4C                  		ld	c, h
    1672/     960 : DD 71 12            		ld	(ix+12h), c
    1673/     963 : DD 7E 1F            		ld	a, (ix+1Fh)
    1674/     966 : B7                  		or	a
    1675/     967 : 20 07               		jr	nz, loc_8C0
    1676/     969 : DD 71 0F            		ld	(ix+0Fh), c
    1677/     96C : AF                  		xor	a
    1678/     96D : DD 77 12            		ld	(ix+12h), a
    1679/     970 :                     
    1680/     970 :                     loc_8C0:				; CODE XREF: YM2_ParseData+126j
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 29 - 8/17/2019 18:52:23


    1681/     970 : CD 93 05            		call	YM2_ConditionalInput
    1682/     973 : 3A 2D 08            		ld	a, (loc_77D+1)	; dynamically changed :	1st frequency register to use corresponding to current channel
    1683/     976 : 47                  		ld	b, a
    1684/     977 : 4D                  		ld	c, l
    1685/     978 : DD 71 11            		ld	(ix+11h), c
    1686/     97B : DD 7E 1F            		ld	a, (ix+1Fh)
    1687/     97E : B7                  		or	a
    1688/     97F : 20 07               		jr	nz, loc_8D8
    1689/     981 : DD 71 0E            		ld	(ix+0Eh), c
    1690/     984 : AF                  		xor	a
    1691/     985 : DD 77 11            		ld	(ix+11h), a
    1692/     988 :                     
    1693/     988 :                     loc_8D8:				; CODE XREF: YM2_ParseData+13Ej
    1694/     988 : CD 93 05            		call	YM2_ConditionalInput
    1695/     98B : 06 28               		ld	b, 28h ; '('    ; YM register : Key on/off
    1696/     98D : FD 7E 00            		ld	a, (iy+0)
    1697/     990 : C6 04               		add	a, 4
    1698/     992 : F6 F0               		or	0F0h ; 'р'
    1699/     994 : 4F                  		ld	c, a
    1700/     995 : CD 66 05            		call	YM1_ConditionnalInput
    1701/     998 :                     
    1702/     998 :                     loc_8E8:				; CODE XREF: YM2_ParseData+102j
    1703/     998 : 1A                  		ld	a, (de)
    1704/     999 : CB 7F               		bit	7, a
    1705/     99B : 20 05               		jr	nz, loc_8F2
    1706/     99D : DD 7E 07            		ld	a, (ix+7)
    1707/     9A0 : 18 05               		jr	loc_8F7
    1708/     9A2 :                     ; ---------------------------------------------------------------------------
    1709/     9A2 :                     
    1710/     9A2 :                     loc_8F2:				; CODE XREF: YM2_ParseData+15Aj
    1711/     9A2 : 13                  		inc	de
    1712/     9A3 : 1A                  		ld	a, (de)
    1713/     9A4 : DD 77 07            		ld	(ix+7),	a
    1714/     9A7 :                     
    1715/     9A7 :                     loc_8F7:				; CODE XREF: YM2_ParseData+15Fj
    1716/     9A7 : DD 77 02            		ld	(ix+2),	a
    1717/     9AA : 13                  		inc	de
    1718/     9AB : DD 72 01            		ld	(ix+1),	d
    1719/     9AE : DD 73 00            		ld	(ix+0),	e
    1720/     9B1 : C3 6C 08            		jp	loc_7BB
    1721/     9B4 :                     ; ---------------------------------------------------------------------------
    1722/     9B4 :                     
    1723/     9B4 :                     loc_904:				; CODE XREF: YM2_ParseData+4Cj
    1724/     9B4 : DD 35 02            		dec	(ix+2)
    1725/     9B7 : DD 46 12            		ld	b, (ix+12h)
    1726/     9BA : DD 4E 11            		ld	c, (ix+11h)
    1727/     9BD : 78                  		ld	a, b
    1728/     9BE : B1                  		or	c
    1729/     9BF : 28 77               		jr	z, loc_988
    1730/     9C1 : DD 7E 0F            		ld	a, (ix+0Fh)
    1731/     9C4 : 67                  		ld	h, a
    1732/     9C5 : DD 7E 0E            		ld	a, (ix+0Eh)
    1733/     9C8 : 6F                  		ld	l, a
    1734/     9C9 : C5                  		push	bc
    1735/     9CA : E5                  		push	hl
    1736/     9CB : B7                  		or	a
    1737/     9CC : ED 42               		sbc	hl, bc
    1738/     9CE : 7C                  		ld	a, h
    1739/     9CF : 32 4F 15            		ld	(TEMP_FREQUENCY), a ; temp space to store frequency values when	YM data	is parsed
    1740/     9D2 : 30 08               		jr	nc, loc_92C
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 30 - 8/17/2019 18:52:23


    1741/     9D4 : 06 00               		ld	b, 0
    1742/     9D6 : DD 4E 1F            		ld	c, (ix+1Fh)
    1743/     9D9 : C3 E4 09            		jp	loc_934
    1744/     9DC :                     ; ---------------------------------------------------------------------------
    1745/     9DC :                     
    1746/     9DC :                     loc_92C:				; CODE XREF: YM2_ParseData+191j
    1747/     9DC : 06 FF               		ld	b, 0FFh
    1748/     9DE : DD 7E 1F            		ld	a, (ix+1Fh)
    1749/     9E1 : ED 44               		neg
    1750/     9E3 : 4F                  		ld	c, a
    1751/     9E4 :                     
    1752/     9E4 :                     loc_934:				; CODE XREF: YM2_ParseData+198j
    1753/     9E4 : E1                  		pop	hl
    1754/     9E5 : 09                  		add	hl, bc
    1755/     9E6 : C1                  		pop	bc
    1756/     9E7 : E5                  		push	hl
    1757/     9E8 : B7                  		or	a
    1758/     9E9 : ED 42               		sbc	hl, bc
    1759/     9EB : 3A 4F 15            		ld	a, (TEMP_FREQUENCY) ; temp space to store frequency values when	YM data	is parsed
    1760/     9EE : AC                  		xor	h
    1761/     9EF : CB 7F               		bit	7, a
    1762/     9F1 : E1                  		pop	hl
    1763/     9F2 : 20 37               		jr	nz, loc_97B
    1764/     9F4 : E5                  		push	hl
    1765/     9F5 : 7C                  		ld	a, h
    1766/     9F6 : E6 07               		and	7
    1767/     9F8 : 67                  		ld	h, a
    1768/     9F9 : 22 4F 15            		ld	(TEMP_FREQUENCY), hl ; temp space to store frequency values when YM data is parsed
    1769/     9FC : 01 D4 04            		ld	bc, 4D4h
    1770/     9FF : B7                  		or	a
    1771/     A00 : ED 42               		sbc	hl, bc
    1772/     A02 : 38 06               		jr	c, loc_95A
    1773/     A04 : 01 96 05            		ld	bc, 596h
    1774/     A07 : C3 1E 0A            		jp	loc_96E
    1775/     A0A :                     ; ---------------------------------------------------------------------------
    1776/     A0A :                     
    1777/     A0A :                     loc_95A:				; CODE XREF: YM2_ParseData+1C1j
    1778/     A0A : 2A 4F 15            		ld	hl, (TEMP_FREQUENCY) ; temp space to store frequency values when YM data is parsed
    1779/     A0D : 01 6A 02            		ld	bc, 26Ah
    1780/     A10 : B7                  		or	a
    1781/     A11 : ED 42               		sbc	hl, bc
    1782/     A13 : 30 06               		jr	nc, loc_96B
    1783/     A15 : 01 6A FA            		ld	bc, 0FA6Ah
    1784/     A18 : C3 1E 0A            		jp	loc_96E
    1785/     A1B :                     ; ---------------------------------------------------------------------------
    1786/     A1B :                     
    1787/     A1B :                     loc_96B:				; CODE XREF: YM2_ParseData+1D2j
    1788/     A1B : 01 00 00            		ld	bc, 0
    1789/     A1E :                     
    1790/     A1E :                     loc_96E:				; CODE XREF: YM2_ParseData+1C6j
    1791/     A1E :                     					; YM2_ParseData+1D7j
    1792/     A1E : E1                  		pop	hl
    1793/     A1F : 09                  		add	hl, bc
    1794/     A20 : 7C                  		ld	a, h
    1795/     A21 : DD 77 0F            		ld	(ix+0Fh), a
    1796/     A24 : 7D                  		ld	a, l
    1797/     A25 : DD 77 0E            		ld	(ix+0Eh), a
    1798/     A28 : C3 38 0A            		jp	loc_988
    1799/     A2B :                     ; ---------------------------------------------------------------------------
    1800/     A2B :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 31 - 8/17/2019 18:52:23


    1801/     A2B :                     loc_97B:				; CODE XREF: YM2_ParseData+1B1j
    1802/     A2B : DD 70 0F            		ld	(ix+0Fh), b
    1803/     A2E : DD 71 0E            		ld	(ix+0Eh), c
    1804/     A31 : AF                  		xor	a
    1805/     A32 : DD 77 11            		ld	(ix+11h), a
    1806/     A35 : DD 77 12            		ld	(ix+12h), a
    1807/     A38 :                     
    1808/     A38 :                     loc_988:				; CODE XREF: YM2_ParseData+17Ej
    1809/     A38 :                     					; YM2_ParseData+1E7j
    1810/     A38 : DD 7E 0A            		ld	a, (ix+0Ah)
    1811/     A3B : B7                  		or	a
    1812/     A3C : 28 06               		jr	z, loc_994
    1813/     A3E : DD 35 0A            		dec	(ix+0Ah)
    1814/     A41 : AF                  		xor	a
    1815/     A42 : 18 29               		jr	loc_9BD
    1816/     A44 :                     ; ---------------------------------------------------------------------------
    1817/     A44 :                     
    1818/     A44 :                     loc_994:				; CODE XREF: YM2_ParseData+1FBj
    1819/     A44 :                     					; YM2_ParseData+229j
    1820/     A44 : DD 7E 0C            		ld	a, (ix+0Ch)
    1821/     A47 : 67                  		ld	h, a
    1822/     A48 : DD 7E 0B            		ld	a, (ix+0Bh)
    1823/     A4B : 6F                  		ld	l, a
    1824/     A4C : DD 7E 0D            		ld	a, (ix+0Dh)
    1825/     A4F : 06 00               		ld	b, 0
    1826/     A51 : 4F                  		ld	c, a
    1827/     A52 : DD 34 0D            		inc	(ix+0Dh)
    1828/     A55 : 09                  		add	hl, bc
    1829/     A56 : 7E                  		ld	a, (hl)
    1830/     A57 : FE 81               		cp	81h ; 'Ѓ'
    1831/     A59 : 20 06               		jr	nz, loc_9B1
    1832/     A5B : DD 35 0D            		dec	(ix+0Dh)
    1833/     A5E : AF                  		xor	a
    1834/     A5F : 18 0C               		jr	loc_9BD
    1835/     A61 :                     ; ---------------------------------------------------------------------------
    1836/     A61 :                     
    1837/     A61 :                     loc_9B1:				; CODE XREF: YM2_ParseData+218j
    1838/     A61 : FE 80               		cp	80h ; 'Ђ'
    1839/     A63 : C2 6D 0A            		jp	nz, loc_9BD
    1840/     A66 : AF                  		xor	a
    1841/     A67 : DD 77 0D            		ld	(ix+0Dh), a
    1842/     A6A : C3 44 0A            		jp	loc_994
    1843/     A6D :                     ; ---------------------------------------------------------------------------
    1844/     A6D :                     
    1845/     A6D :                     loc_9BD:				; CODE XREF: YM2_ParseData+201j
    1846/     A6D :                     					; YM2_ParseData+21Ej
    1847/     A6D :                     					; YM2_ParseData+222j
    1848/     A6D : 4F                  		ld	c, a
    1849/     A6E : DD 7E 0E            		ld	a, (ix+0Eh)
    1850/     A71 : 6F                  		ld	l, a
    1851/     A72 : DD 7E 0F            		ld	a, (ix+0Fh)
    1852/     A75 : 67                  		ld	h, a
    1853/     A76 : 06 00               		ld	b, 0
    1854/     A78 : CB 79               		bit	7, c
    1855/     A7A : 28 01               		jr	z, loc_9CD
    1856/     A7C : 05                  		dec	b
    1857/     A7D :                     
    1858/     A7D :                     loc_9CD:				; CODE XREF: YM2_ParseData+239j
    1859/     A7D : 09                  		add	hl, bc
    1860/     A7E :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 32 - 8/17/2019 18:52:23


    1861/     A7E :                     loc_9CE:				; DATA XREF: YM2_ParseData+27w
    1862/     A7E : 06 00               		ld	b, 0
    1863/     A80 : 4C                  		ld	c, h
    1864/     A81 : DD 71 0F            		ld	(ix+0Fh), c
    1865/     A84 : CD 93 05            		call	YM2_ConditionalInput
    1866/     A87 :                     
    1867/     A87 :                     loc_9D7:				; DATA XREF: YM2_ParseData+21w
    1868/     A87 : 06 00               		ld	b, 0
    1869/     A89 : 4D                  		ld	c, l
    1870/     A8A : DD 71 0E            		ld	(ix+0Eh), c
    1871/     A8D : CD 93 05            		call	YM2_ConditionalInput
    1872/     A90 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    1873/     A93 : B7                  		or	a
    1874/     A94 : C0                  		ret	nz
    1875/     A95 : 3A 48 15            		ld	a, (FADE_OUT_TIMER) ; Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while	loading	music
    1876/     A98 : B7                  		or	a
    1877/     A99 : C0                  		ret	nz
    1878/     A9A : DD 7E 04            		ld	a, (ix+4)
    1879/     A9D : C3 6C 0B            		jp	YM2_LoadInstrument
    1880/     AA0 :                     ; End of function YM2_ParseData
    1881/     AA0 :                     
    1882/     AA0 :                     
    1883/     AA0 :                     ; =============== S U B R O U T I N E =======================================
    1884/     AA0 :                     
    1885/     AA0 :                     
    1886/     AA0 :                     YM1_SetChannelInstrument:		; CODE XREF: YM1_ParseData+82p
    1887/     AA0 : DD 77 10            		ld	(ix+10h), a	; just set instrument value in channel byte 10 without loading it into YM
    1888/     AA3 : C9                  		ret
    1889/     AA4 :                     ; End of function YM1_SetChannelInstrument
    1890/     AA4 :                     
    1891/     AA4 :                     
    1892/     AA4 :                     ; =============== S U B R O U T I N E =======================================
    1893/     AA4 :                     
    1894/     AA4 :                     
    1895/     AA4 :                     YM1_LoadInstrument:			; CODE XREF: YM_UpdateInstrumentsLevels+12p
    1896/     AA4 :                     					; YM_UpdateInstrumentsLevels+1Fp
    1897/     AA4 :                     					; YM_UpdateInstrumentsLevels+2Cp
    1898/     AA4 :                     					; StopMusic+10p StopMusic+21p
    1899/     AA4 :                     					; StopMusic+32p YM1_ParseData+76j
    1900/     AA4 :                     					; YM1_ParseData+91p YM1_ParseData+227j
    1901/     AA4 : F5                  		push	af
    1902/     AA5 : 3E 39               		ld	a, YM_INSTRUMENTS_BANK
    1903/     AA7 : CD 43 01            		call	LoadAnyBank
    1904/     AAA : F1                  		pop	af
    1905/     AAB : DD 77 04            		ld	(ix+4),	a	; a is the total level of the instrument
    1906/     AAE : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    1907/     AB1 : B7                  		or	a
    1908/     AB2 : 28 05               		jr	z, loc_nimp3
    1909/     AB4 : DD 7E 04            		ld	a, (ix+4)
    1910/     AB7 : 18 10               		jr	loc_A0D
    1911/     AB9 :                     ; ---------------------------------------------------------------------------
    1912/     AB9 :                     
    1913/     AB9 :                     loc_nimp3:
    1914/     AB9 : 3A 49 15            		ld	a, (FADE_OUT_COUNTER) ;	Counts how many	times the fade out timer reached 0. Fade out stops at value $0C.
    1915/     ABC : C6 0F               		add	a, 0Fh
    1916/     ABE : 67                  		ld	h, a
    1917/     ABF : 3A FD 1F            		ld	a, (MUSIC_LEVEL) ; general output level	for music and SFX type 1, sent from 68k
    1918/     AC2 : DD 86 04            		add	a, (ix+4)
    1919/     AC5 : 94                  		sub	h
    1920/     AC6 : 30 01               		jr	nc, loc_A0D
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 33 - 8/17/2019 18:52:23


    1921/     AC8 : AF                  		xor	a		; put level to 0
    1922/     AC9 :                     
    1923/     AC9 :                     loc_A0D:				; CODE XREF: YM1_LoadInstrument+13j
    1924/     AC9 : D5                  		push	de
    1925/     ACA : F5                  		push	af
    1926/     ACB : DD 7E 10            		ld	a, (ix+10h)	; load instrument index
    1927/     ACE : 6F                  		ld	l, a
    1928/     ACF : 26 00               		ld	h, 0
    1929/     AD1 : 54                  		ld	d, h
    1930/     AD2 : 5D                  		ld	e, l
    1931/     AD3 : 29                  		add	hl, hl
    1932/     AD4 : 29                  		add	hl, hl
    1933/     AD5 : E5                  		push	hl
    1934/     AD6 : 19                  		add	hl, de
    1935/     AD7 : 54                  		ld	d, h
    1936/     AD8 : 5D                  		ld	e, l
    1937/     AD9 : 29                  		add	hl, hl
    1938/     ADA : 29                  		add	hl, hl
    1939/     ADB : 19                  		add	hl, de
    1940/     ADC : D1                  		pop	de
    1941/     ADD : 19                  		add	hl, de
    1942/     ADE : 11 00 CA            		ld	de, YM_INSTRUMENTS_BANK_OFFSET
    1943/     AE1 : 19                  		add	hl, de		; hl now points	to the first byte of the instrument to load
    1944/     AE2 : E5                  		push	hl
    1945/     AE3 : 11 1C 00            		ld	de, 1Ch		; get algorithm	byte
    1946/     AE6 : 19                  		add	hl, de
    1947/     AE7 : 7E                  		ld	a, (hl)
    1948/     AE8 : E6 07               		and	7		; only keep algo bits
    1949/     AEA : DD 77 05            		ld	(ix+5),	a	; store	algo value
    1950/     AED : E1                  		pop	hl		; get back instrument start offset
    1951/     AEE : FD 7E 00            		ld	a, (iy+0)	; get currently	managed	channel	value
    1952/     AF1 : C6 30               		add	a, 30h ; '0'    ; register value for detune/multiple
    1953/     AF3 : 06 04               		ld	b, 4		; loop 4 times
    1954/     AF5 :                     
    1955/     AF5 :                     loc_A39:				; CODE XREF: YM1_LoadInstrument+4Ej
    1956/     AF5 : C5                  		push	bc
    1957/     AF6 : 47                  		ld	b, a		; YM Register :	detune/multiple
    1958/     AF7 : 4E                  		ld	c, (hl)
    1959/     AF8 : F5                  		push	af
    1960/     AF9 : CD 66 05            		call	YM1_ConditionnalInput
    1961/     AFC : F1                  		pop	af
    1962/     AFD : 23                  		inc	hl
    1963/     AFE : C6 04               		add	a, 4
    1964/     B00 : C1                  		pop	bc
    1965/     B01 : 10 F2               		djnz	loc_A39
    1966/     B03 : 32 51 15            		ld	(TEMP_REGISTER), a ; store register value : 40h
    1967/     B06 : F1                  		pop	af
    1968/     B07 : E5                  		push	hl
    1969/     B08 : 16 00               		ld	d, 0
    1970/     B0A : 5F                  		ld	e, a
    1971/     B0B : 21 02 14            		ld	hl, t_YM_LEVELS
    1972/     B0E : 43                  		ld	b, e
    1973/     B0F : 19                  		add	hl, de
    1974/     B10 : 4E                  		ld	c, (hl)		; put corresponding value in c
    1975/     B11 : DD 5E 05            		ld	e, (ix+5)	; get Algo
    1976/     B14 : 21 12 14            		ld	hl, t_SLOTS_PER_ALGO
    1977/     B17 : 19                  		add	hl, de
    1978/     B18 : 56                  		ld	d, (hl)		; put corresponding value in d
    1979/     B19 : 3A 51 15            		ld	a, (TEMP_REGISTER) ; temp place	to keep	a register value when an YM instrument is loaded
    1980/     B1C : E1                  		pop	hl
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 34 - 8/17/2019 18:52:23


    1981/     B1D : 06 04               		ld	b, 4		; loop 4 times
    1982/     B1F :                     
    1983/     B1F :                     loc_A63:				; CODE XREF: YM1_LoadInstrument+8Aj
    1984/     B1F : C5                  		push	bc
    1985/     B20 : 47                  		ld	b, a		; YM Register :	Total level
    1986/     B21 : F5                  		push	af
    1987/     B22 : CB 1A               		rr	d
    1988/     B24 : 30 0E               		jr	nc, loc_A78	; if rotated bit = 0, then use original	instrument level
    1989/     B26 : 3E 7F               		ld	a, 7Fh ; ''    ; else, the operator is a slot, so use channel level
    1990/     B28 : 96                  		sub	(hl)		; instrument's operator total level value
    1991/     B29 : 81                  		add	a, c
    1992/     B2A : 4F                  		ld	c, a
    1993/     B2B : FE 7F               		cp	7Fh ; ''
    1994/     B2D : 38 02               		jr	c, loc_A75	; if result > 7F, then put 7F, since it's the max value
    1995/     B2F : 0E 7F               		ld	c, 7Fh ; ''
    1996/     B31 :                     
    1997/     B31 :                     loc_A75:				; CODE XREF: YM1_LoadInstrument+7Aj
    1998/     B31 : C3 35 0B            		jp	loc_A79
    1999/     B34 :                     ; ---------------------------------------------------------------------------
    2000/     B34 :                     
    2001/     B34 :                     loc_A78:				; CODE XREF: YM1_LoadInstrument+71j
    2002/     B34 : 4E                  		ld	c, (hl)		; get instrument's operator level
    2003/     B35 :                     
    2004/     B35 :                     loc_A79:				; CODE XREF: YM1_LoadInstrument:loc_A75j
    2005/     B35 : CD 66 05            		call	YM1_ConditionnalInput
    2006/     B38 : F1                  		pop	af
    2007/     B39 : 23                  		inc	hl
    2008/     B3A : C6 04               		add	a, 4
    2009/     B3C : C1                  		pop	bc
    2010/     B3D : 10 E0               		djnz	loc_A63
    2011/     B3F : 06 14               		ld	b, 14h		; loop 20d times, so 5 * 4 operators, so from 50h to A0h
    2012/     B41 :                     
    2013/     B41 :                     loc_A85:				; CODE XREF: YM1_LoadInstrument+9Aj
    2014/     B41 : C5                  		push	bc
    2015/     B42 : 47                  		ld	b, a		; YM Register :	Rate scalling /	Attack rate, First decay rate /	Amplitude modulation ...
    2016/     B43 : 4E                  		ld	c, (hl)		; ... Secondary	decay rate, Secondary amplitude	/ Release rate,	SSG-EG
    2017/     B44 : F5                  		push	af
    2018/     B45 : CD 66 05            		call	YM1_ConditionnalInput
    2019/     B48 : F1                  		pop	af
    2020/     B49 : 23                  		inc	hl
    2021/     B4A : C6 04               		add	a, 4
    2022/     B4C : C1                  		pop	bc
    2023/     B4D : 10 F2               		djnz	loc_A85
    2024/     B4F : C6 10               		add	a, 10h
    2025/     B51 : 47                  		ld	b, a		; YM Register :	Feedback / Algorithm
    2026/     B52 : 4E                  		ld	c, (hl)
    2027/     B53 : CD 66 05            		call	YM1_ConditionnalInput
    2028/     B56 : D1                  		pop	de
    2029/     B57 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    2030/     B5A : B7                  		or	a
    2031/     B5B : 20 05               		jr	nz, smeuuh3
    2032/     B5D : 3A 4D 15            		ld	a, (MUSIC_BANK)
    2033/     B60 : 18 02               		jr	smeuuh4
    2034/     B62 :                     smeuuh3:
    2035/     B62 : 3E 00               		ld	a, SFX_BANK
    2036/     B64 :                     smeuuh4:
    2037/     B64 : CD 43 01            		call	LoadAnyBank
    2038/     B67 : C9                  		ret
    2039/     B68 :                     ; End of function YM1_LoadInstrument
    2040/     B68 :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 35 - 8/17/2019 18:52:23


    2041/     B68 :                     
    2042/     B68 :                     ; =============== S U B R O U T I N E =======================================
    2043/     B68 :                     
    2044/     B68 :                     
    2045/     B68 :                     YM2_setChannelInstrument:		; CODE XREF: YM2_ParseData+B0p
    2046/     B68 : DD 77 10            		ld	(ix+10h), a
    2047/     B6B : C9                  		ret
    2048/     B6C :                     ; End of function YM2_setChannelInstrument
    2049/     B6C :                     
    2050/     B6C :                     
    2051/     B6C :                     ; =============== S U B R O U T I N E =======================================
    2052/     B6C :                     
    2053/     B6C :                     
    2054/     B6C :                     YM2_LoadInstrument:			; CODE XREF: YM_UpdateInstrumentsLevels:loc_FAp
    2055/     B6C :                     					; YM_UpdateInstrumentsLevels+4Cp
    2056/     B6C :                     					; YM_UpdateInstrumentsLevels+56p
    2057/     B6C :                     					; YM_UpdateInstrumentsLevels+6Fp
    2058/     B6C :                     					; YM_UpdateInstrumentsLevels+82p
    2059/     B6C :                     					; StopMusic+4Fp StopMusic+66p
    2060/     B6C :                     					; StopMusic+7Dp YM2_ParseData+A0j
    2061/     B6C :                     					; YM2_ParseData+A4j YM2_ParseData+BFp
    2062/     B6C :                     					; YM2_ParseData+25Cj
    2063/     B6C :                     					; YM2_ParseChannel6Data+84j
    2064/     B6C : F5                  		push	af
    2065/     B6D : 3E 39               		ld	a, YM_INSTRUMENTS_BANK
    2066/     B6F : CD 43 01            		call	LoadAnyBank
    2067/     B72 : F1                  		pop	af
    2068/     B73 : DD 77 04            		ld	(ix+4),	a
    2069/     B76 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    2070/     B79 : B7                  		or	a
    2071/     B7A : 28 05               		jr	z, loc_AB6
    2072/     B7C : DD 7E 04            		ld	a, (ix+4)
    2073/     B7F : 18 10               		jr	loc_AC6
    2074/     B81 :                     ; ---------------------------------------------------------------------------
    2075/     B81 :                     
    2076/     B81 :                     loc_AB6:				; CODE XREF: YM2_LoadInstrument+Aj
    2077/     B81 : 3A 49 15            		ld	a, (FADE_OUT_COUNTER) ;	Counts how many	times the fade out timer reached 0. Fade out stops at value $0C.
    2078/     B84 : C6 0F               		add	a, 0Fh
    2079/     B86 : 67                  		ld	h, a
    2080/     B87 : 3A FD 1F            		ld	a, (MUSIC_LEVEL) ; general output level	for music and SFX type 1, sent from 68k
    2081/     B8A : DD 86 04            		add	a, (ix+4)
    2082/     B8D : 94                  		sub	h
    2083/     B8E : 30 01               		jr	nc, loc_AC6
    2084/     B90 : AF                  		xor	a
    2085/     B91 :                     
    2086/     B91 :                     loc_AC6:				; CODE XREF: YM2_LoadInstrument+Fj
    2087/     B91 :                     					; YM2_LoadInstrument+1Ej
    2088/     B91 : D5                  		push	de
    2089/     B92 : F5                  		push	af
    2090/     B93 : DD 7E 10            		ld	a, (ix+10h)	; same as in YM1 version of subroutine,	load instrument	index etc...
    2091/     B96 : 6F                  		ld	l, a
    2092/     B97 : 26 00               		ld	h, 0
    2093/     B99 : 54                  		ld	d, h
    2094/     B9A : 5D                  		ld	e, l
    2095/     B9B : 29                  		add	hl, hl
    2096/     B9C : 29                  		add	hl, hl
    2097/     B9D : E5                  		push	hl
    2098/     B9E : 19                  		add	hl, de
    2099/     B9F : 54                  		ld	d, h
    2100/     BA0 : 5D                  		ld	e, l
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 36 - 8/17/2019 18:52:23


    2101/     BA1 : 29                  		add	hl, hl
    2102/     BA2 : 29                  		add	hl, hl
    2103/     BA3 : 19                  		add	hl, de
    2104/     BA4 : D1                  		pop	de
    2105/     BA5 : 19                  		add	hl, de
    2106/     BA6 : 11 00 CA            		ld	de, YM_INSTRUMENTS_BANK_OFFSET
    2107/     BA9 : 19                  		add	hl, de
    2108/     BAA : E5                  		push	hl
    2109/     BAB : 11 1C 00            		ld	de, 1Ch
    2110/     BAE : 19                  		add	hl, de
    2111/     BAF : 7E                  		ld	a, (hl)
    2112/     BB0 : E6 07               		and	7
    2113/     BB2 : DD 77 05            		ld	(ix+5),	a
    2114/     BB5 : E1                  		pop	hl
    2115/     BB6 : FD 7E 00            		ld	a, (iy+0)
    2116/     BB9 : C6 30               		add	a, 30h ; '0'
    2117/     BBB : 06 04               		ld	b, 4
    2118/     BBD :                     
    2119/     BBD :                     loc_AF2:				; CODE XREF: YM2_LoadInstrument+59j
    2120/     BBD : C5                  		push	bc
    2121/     BBE : 47                  		ld	b, a
    2122/     BBF : 4E                  		ld	c, (hl)
    2123/     BC0 : F5                  		push	af
    2124/     BC1 : CD 93 05            		call	YM2_ConditionalInput
    2125/     BC4 : F1                  		pop	af
    2126/     BC5 : 23                  		inc	hl
    2127/     BC6 : C6 04               		add	a, 4
    2128/     BC8 : C1                  		pop	bc
    2129/     BC9 : 10 F2               		djnz	loc_AF2
    2130/     BCB : 32 51 15            		ld	(TEMP_REGISTER), a ; temp place	to keep	a register value when an YM instrument is loaded
    2131/     BCE : F1                  		pop	af
    2132/     BCF : E5                  		push	hl
    2133/     BD0 : 16 00               		ld	d, 0
    2134/     BD2 : 5F                  		ld	e, a
    2135/     BD3 : 21 02 14            		ld	hl, t_YM_LEVELS
    2136/     BD6 : 43                  		ld	b, e
    2137/     BD7 : 19                  		add	hl, de
    2138/     BD8 : 4E                  		ld	c, (hl)
    2139/     BD9 : DD 5E 05            		ld	e, (ix+5)
    2140/     BDC : 21 12 14            		ld	hl, t_SLOTS_PER_ALGO
    2141/     BDF : 19                  		add	hl, de
    2142/     BE0 : 56                  		ld	d, (hl)
    2143/     BE1 : 3A 51 15            		ld	a, (TEMP_REGISTER) ; temp place	to keep	a register value when an YM instrument is loaded
    2144/     BE4 : E1                  		pop	hl
    2145/     BE5 : 06 04               		ld	b, 4
    2146/     BE7 :                     
    2147/     BE7 :                     loc_B1C:				; CODE XREF: YM2_LoadInstrument+95j
    2148/     BE7 : C5                  		push	bc
    2149/     BE8 : 47                  		ld	b, a
    2150/     BE9 : F5                  		push	af
    2151/     BEA : CB 1A               		rr	d
    2152/     BEC : 30 0E               		jr	nc, loc_B31
    2153/     BEE : 3E 7F               		ld	a, 7Fh ; ''
    2154/     BF0 : 96                  		sub	(hl)
    2155/     BF1 : 81                  		add	a, c
    2156/     BF2 : 4F                  		ld	c, a
    2157/     BF3 : FE 7F               		cp	7Fh ; ''
    2158/     BF5 : 38 02               		jr	c, loc_B2E
    2159/     BF7 : 0E 7F               		ld	c, 7Fh ; ''
    2160/     BF9 :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 37 - 8/17/2019 18:52:23


    2161/     BF9 :                     loc_B2E:				; CODE XREF: YM2_LoadInstrument+85j
    2162/     BF9 : C3 FD 0B            		jp	loc_B32
    2163/     BFC :                     ; ---------------------------------------------------------------------------
    2164/     BFC :                     
    2165/     BFC :                     loc_B31:				; CODE XREF: YM2_LoadInstrument+7Cj
    2166/     BFC : 4E                  		ld	c, (hl)
    2167/     BFD :                     
    2168/     BFD :                     loc_B32:				; CODE XREF: YM2_LoadInstrument:loc_B2Ej
    2169/     BFD : CD 93 05            		call	YM2_ConditionalInput
    2170/     C00 : F1                  		pop	af
    2171/     C01 : 23                  		inc	hl
    2172/     C02 : C6 04               		add	a, 4
    2173/     C04 : C1                  		pop	bc
    2174/     C05 : 10 E0               		djnz	loc_B1C
    2175/     C07 : 06 14               		ld	b, 14h
    2176/     C09 :                     
    2177/     C09 :                     loc_B3E:				; CODE XREF: YM2_LoadInstrument+A5j
    2178/     C09 : C5                  		push	bc
    2179/     C0A : 47                  		ld	b, a
    2180/     C0B : 4E                  		ld	c, (hl)
    2181/     C0C : F5                  		push	af
    2182/     C0D : CD 93 05            		call	YM2_ConditionalInput
    2183/     C10 : F1                  		pop	af
    2184/     C11 : 23                  		inc	hl
    2185/     C12 : C6 04               		add	a, 4
    2186/     C14 : C1                  		pop	bc
    2187/     C15 : 10 F2               		djnz	loc_B3E
    2188/     C17 : C6 10               		add	a, 10h
    2189/     C19 : 47                  		ld	b, a
    2190/     C1A : 4E                  		ld	c, (hl)
    2191/     C1B : CD 93 05            		call	YM2_ConditionalInput
    2192/     C1E : D1                  		pop	de
    2193/     C1F : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    2194/     C22 : B7                  		or	a
    2195/     C23 : 20 05               		jr	nz, smeuuh1
    2196/     C25 : 3A 4D 15            		ld	a, (MUSIC_BANK)
    2197/     C28 : 18 02               		jr	smeuuh2
    2198/     C2A :                     smeuuh1:
    2199/     C2A : 3E 00               		ld	a, SFX_BANK
    2200/     C2C :                     smeuuh2:
    2201/     C2C : CD 43 01            		call	LoadAnyBank
    2202/     C2F : C9                  		ret
    2203/     C30 :                     ; End of function YM2_LoadInstrument
    2204/     C30 :                     
    2205/     C30 :                     
    2206/     C30 :                     ; =============== S U B R O U T I N E =======================================
    2207/     C30 :                     
    2208/     C30 :                     
    2209/     C30 :                     YM2_ParseChannel6Data:			; CODE XREF: UpdateSound+94p
    2210/     C30 :                     					; UpdateSound+C5p
    2211/     C30 : DD 21 00 19         		ld	ix, MUSIC_CHANNEL_YM6
    2212/     C34 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    2213/     C37 : B7                  		or	a
    2214/     C38 : 28 07               		jr	z, loc_B68
    2215/     C3A : 11 E0 01            		ld	de, 01E0h ; 'а'  ; if we are currently managing an SFX using the 3 extra RAM areas, point to the right area
    2216/     C3D : DD 19               		add	ix, de
    2217/     C3F : 18 07               		jr	loc_B6F		; then don't even check if it uses DAC samples ... so for that kind of SFX, always use DAC ?
    2218/     C41 :                     ; ---------------------------------------------------------------------------
    2219/     C41 :                     
    2220/     C41 :                     loc_B68:				; CODE XREF: YM2_ParseChannel6Data+8j
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 38 - 8/17/2019 18:52:23


    2221/     C41 : 3A 53 15            		ld	a, (MUSIC_DOESNT_USE_SAMPLES)
    2222/     C44 : B7                  		or	a
    2223/     C45 : C2 40 08            		jp	nz, YM2_ParseData ; jump to classic parsing subroutine if channel 6 is not in DAC mode
    2224/     C48 :                     
    2225/     C48 :                     loc_B6F:				; CODE XREF: YM2_ParseChannel6Data+Fj
    2226/     C48 :                     					; YM2_ParseChannel6Data+D3j
    2227/     C48 : DD 7E 03            		ld	a, (ix+3)	; check	with byte 3 if channel 3 has something to do or	not
    2228/     C4B : B7                  		or	a
    2229/     C4C : C0                  		ret	nz
    2230/     C4D : DD 7E 06            		ld	a, (ix+6)	; check	if time	counter	02 has reached key release value 06
    2231/     C50 : DD BE 02            		cp	(ix+2)
    2232/     C53 : 20 0B               		jr	nz, loc_B87	; check	if it's time to parse new data or not yet
    2233/     C55 : DD 7E 08            		ld	a, (ix+8)	; check	if "don't release key" byte 08 is set
    2234/     C58 : B7                  		or	a
    2235/     C59 : 20 05               		jr	nz, loc_B87	; don't jump if byte 02 = byte 06 and byte 08 = 0
    2236/     C5B : 3E FE               		ld	a, 0FEh	; 'ю'
    2237/     C5D : CD C2 05            		call	DAC_SetNewSample ; play	nothing	!
    2238/     C60 :                     
    2239/     C60 :                     loc_B87:				; CODE XREF: YM2_ParseChannel6Data+23j
    2240/     C60 :                     					; YM2_ParseChannel6Data+29j
    2241/     C60 : DD 7E 02            		ld	a, (ix+2)	; check	if it's time to parse new data or not yet
    2242/     C63 : B7                  		or	a
    2243/     C64 : C2 01 0D            		jp	nz, loc_C2D	; if it's not end of sample play, decrement counter and return
    2244/     C67 : DD 56 01            		ld	d, (ix+1)	; get data pointer
    2245/     C6A : DD 5E 00            		ld	e, (ix+0)
    2246/     C6D :                     
    2247/     C6D :                     parseByte:				; CODE XREF: YM2_ParseChannel6Data+89j
    2248/     C6D :                     					; YM2_ParseChannel6Data+92j
    2249/     C6D :                     					; YM2_ParseChannel6Data+9Cj
    2250/     C6D :                     					; YM2_ParseChannel6Data+A6j
    2251/     C6D :                     					; YM2_ParseChannel6Data+ABj
    2252/     C6D : 1A                  		ld	a, (de)		; get data to parse
    2253/     C6E : E6 F8               		and	0F8h ; 'ш'
    2254/     C70 :                     
    2255/     C70 :                     loc_B97:
    2256/     C70 : FE F8               		cp	0F8h ; 'ш'
    2257/     C72 : C2 D9 0C            		jp	nz, loc_C05	; jump if it's not a command
    2258/     C75 : 1A                  		ld	a, (de)		; else,	parse command
    2259/     C76 : FE FF               		cp	0FFh
    2260/     C78 : C2 B6 0C            		jp	nz, setKeyRelease ; jump if command is not FF
    2261/     C7B : 13                  		inc	de		; if command is	FF, parse next bytes
    2262/     C7C : 1A                  		ld	a, (de)
    2263/     C7D : 6F                  		ld	l, a
    2264/     C7E : 13                  		inc	de
    2265/     C7F : 1A                  		ld	a, (de)
    2266/     C80 : 67                  		ld	h, a
    2267/     C81 : B5                  		or	l
    2268/     C82 : 20 2F               		jr	nz, parseAtNewOffset ; jump when it's FF xx xx, meaning "parse from new offset xxxx"
    2269/     C84 : 3E 01               		ld	a, 1		; else,	you have FF 00 00, so end parsing and mute channel
    2270/     C86 : DD 77 03            		ld	(ix+3),	a
    2271/     C89 : 3A 53 15            		ld	a, (MUSIC_DOESNT_USE_SAMPLES)
    2272/     C8C : B7                  		or	a
    2273/     C8D : 28 23               		jr	z, return_BDE	; if music uses	DAC samples, return
    2274/     C8F : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    2275/     C92 : B7                  		or	a
    2276/     C93 : 28 1D               		jr	z, return_BDE	; if it's not managing an SFX, return
    2277/     C95 : 01 20 FE            		ld	bc, 0FE20h	; go back to YM	Channel	6 area
    2278/     C98 : DD 09               		add	ix, bc
    2279/     C9A : 3E B4               		ld	a, 0B4h	; 'ґ'   ; YM Register : Stereo / LFO Sensitivity
    2280/     C9C : FD 86 00            		add	a, (iy+0)
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 39 - 8/17/2019 18:52:23


    2281/     C9F : 47                  		ld	b, a
    2282/     CA0 :                     
    2283/     CA0 :                     loc_BCC:
    2284/     CA0 : DD 4E 1E            		ld	c, (ix+1Eh)
    2285/     CA3 : CD A5 05            		call	YM2_Input	; set stereo
    2286/     CA6 : DD 7E 03            		ld	a, (ix+3)
    2287/     CA9 : B7                  		or	a
    2288/     CAA : 20 06               		jr	nz, return_BDE	; return if channel has	nothing	to do
    2289/     CAC : DD 7E 04            		ld	a, (ix+4)
    2290/     CAF : C3 6C 0B            		jp	YM2_LoadInstrument ; else, load	note and return
    2291/     CB2 :                     ; ---------------------------------------------------------------------------
    2292/     CB2 :                     
    2293/     CB2 :                     return_BDE:				; CODE XREF: YM2_ParseChannel6Data+62j
    2294/     CB2 :                     					; YM2_ParseChannel6Data+68j
    2295/     CB2 :                     					; YM2_ParseChannel6Data+7Fj
    2296/     CB2 : C9                  		ret
    2297/     CB3 :                     ; ---------------------------------------------------------------------------
    2298/     CB3 :                     
    2299/     CB3 :                     parseAtNewOffset:			; CODE XREF: YM2_ParseChannel6Data+52j
    2300/     CB3 : EB                  		ex	de, hl
    2301/     CB4 : 18 B7               		jr	parseByte	; get data to parse
    2302/     CB6 :                     ; ---------------------------------------------------------------------------
    2303/     CB6 :                     
    2304/     CB6 :                     setKeyRelease:				; CODE XREF: YM2_ParseChannel6Data+48j
    2305/     CB6 : FE FC               		cp	0FCh ; 'ь'
    2306/     CB8 : 20 06               		jr	nz, setStereo
    2307/     CBA : CD BA 10            		call	SetRelease
    2308/     CBD : C3 6D 0C            		jp	parseByte	; get data to parse
    2309/     CC0 :                     ; ---------------------------------------------------------------------------
    2310/     CC0 :                     
    2311/     CC0 :                     setStereo:				; CODE XREF: YM2_ParseChannel6Data+8Dj
    2312/     CC0 : FE FA               		cp	0FAh ; 'ъ'
    2313/     CC2 : 20 06               		jr	nz, loopCommand
    2314/     CC4 : CD 05 11            		call	YM2_SetStereo
    2315/     CC7 : C3 6D 0C            		jp	parseByte	; get data to parse
    2316/     CCA :                     ; ---------------------------------------------------------------------------
    2317/     CCA :                     
    2318/     CCA :                     loopCommand:				; CODE XREF: YM2_ParseChannel6Data+97j
    2319/     CCA : FE F8               		cp	0F8h ; 'ш'
    2320/     CCC : 20 06               		jr	nz, ifCommandUnidentified
    2321/     CCE : CD 30 11            		call	ParseLoopCommand
    2322/     CD1 : C3 6D 0C            		jp	parseByte	; get data to parse
    2323/     CD4 :                     ; ---------------------------------------------------------------------------
    2324/     CD4 :                     
    2325/     CD4 :                     ifCommandUnidentified:			; CODE XREF: YM2_ParseChannel6Data+A1j
    2326/     CD4 : 13                  		inc	de
    2327/     CD5 : 13                  		inc	de
    2328/     CD6 : C3 6D 0C            		jp	parseByte	; get data to parse
    2329/     CD9 :                     ; ---------------------------------------------------------------------------
    2330/     CD9 :                     
    2331/     CD9 :                     loc_C05:				; CODE XREF: YM2_ParseChannel6Data+42j
    2332/     CD9 : 1A                  		ld	a, (de)		; parsed byte is not a command
    2333/     CDA : E6 7F               		and	7Fh ; ''
    2334/     CDC :                     
    2335/     CDC :                     loc_C08:
    2336/     CDC : FE 70               		cp	70h ; 'p'
    2337/     CDE : CA E5 0C            		jp	z, loc_C11	; if byte is F0	or 70
    2338/     CE1 : 3C                  		inc	a		; else,	it's a new sample index : bits 6-0 + 1
    2339/     CE2 : CD C2 05            		call	DAC_SetNewSample
    2340/     CE5 :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 40 - 8/17/2019 18:52:23


    2341/     CE5 :                     loc_C11:				; CODE XREF: YM2_ParseChannel6Data+B3j
    2342/     CE5 : 1A                  		ld	a, (de)
    2343/     CE6 : CB 7F               		bit	7, a		; if bit 7 = 1,	then next byte is sample play length
    2344/     CE8 : 20 05               		jr	nz, loc_C1B	; get sample play length byte
    2345/     CEA : DD 7E 07            		ld	a, (ix+7)	; else,	load current sample play length
    2346/     CED : 18 05               		jr	loc_C20		; restart counter with sample play length value
    2347/     CEF :                     ; ---------------------------------------------------------------------------
    2348/     CEF :                     
    2349/     CEF :                     loc_C1B:				; CODE XREF: YM2_ParseChannel6Data+BDj
    2350/     CEF : 13                  		inc	de		; get sample play length byte
    2351/     CF0 : 1A                  		ld	a, (de)
    2352/     CF1 : DD 77 07            		ld	(ix+7),	a	; set new sample play length
    2353/     CF4 :                     
    2354/     CF4 :                     loc_C20:				; CODE XREF: YM2_ParseChannel6Data+C2j
    2355/     CF4 : DD 77 02            		ld	(ix+2),	a	; restart counter with sample play length value
    2356/     CF7 : 13                  		inc	de
    2357/     CF8 : DD 72 01            		ld	(ix+1),	d	; point	to next	byte to	parse
    2358/     CFB : DD 73 00            		ld	(ix+0),	e
    2359/     CFE : C3 48 0C            		jp	loc_B6F		; go back to the beginning of subroutine
    2360/     D01 :                     ; ---------------------------------------------------------------------------
    2361/     D01 :                     
    2362/     D01 :                     loc_C2D:				; CODE XREF: YM2_ParseChannel6Data+34j
    2363/     D01 : DD 35 02            		dec	(ix+2)		; if it's not end of sample play, decrement counter and return
    2364/     D04 : 3A 48 15            		ld	a, (FADE_OUT_TIMER) ; Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while	loading	music
    2365/     D07 : B7                  		or	a
    2366/     D08 : C0                  		ret	nz		; return in any	way !
    2367/     D09 : C9                  		ret
    2368/     D0A :                     ; End of function YM2_ParseChannel6Data
    2369/     D0A :                     
    2370/     D0A :                     
    2371/     D0A :                     ; =============== S U B R O U T I N E =======================================
    2372/     D0A :                     
    2373/     D0A :                     
    2374/     D0A :                     PSG_ParseToneData:			; CODE XREF: UpdateSound+9Bp
    2375/     D0A :                     					; UpdateSound+A1p UpdateSound+A7p
    2376/     D0A :                     
    2377/     D0A :                     ; FUNCTION CHUNK AT 0536 SIZE 0000000D BYTES
    2378/     D0A :                     
    2379/     D0A : FD 7E 00            		ld	a, (iy+0)	; a = index of currently managed channel
    2380/     D0D : DD 21 30 19         		ld	ix, MUSIC_CHANNEL_PSG1 ; start of PSG channel data
    2381/     D11 : 26 00               		ld	h, 0
    2382/     D13 : 6F                  		ld	l, a
    2383/     D14 : 29                  		add	hl, hl
    2384/     D15 : 29                  		add	hl, hl
    2385/     D16 : 29                  		add	hl, hl
    2386/     D17 : 29                  		add	hl, hl		; hl = 10h * a
    2387/     D18 : C5                  		push	bc
    2388/     D19 : 44                  		ld	b, h
    2389/     D1A : 4D                  		ld	c, l
    2390/     D1B : 29                  		add	hl, hl		; hl = 20h * a
    2391/     D1C : 09                  		add	hl, bc		; hl = 30h * a
    2392/     D1D : C1                  		pop	bc
    2393/     D1E : EB                  		ex	de, hl
    2394/     D1F : DD 19               		add	ix, de		; ix now points	to concerned channel
    2395/     D21 : 0F                  		rrca
    2396/     D22 : 0F                  		rrca
    2397/     D23 : 0F                  		rrca			; channel value	now in right place to make a PSG command
    2398/     D24 : E6 60               		and	60h ; '`'       ; make sure only the two interesting bits are used
    2399/     D26 : 32 41 15            		ld	(CURRENT_PSG_CHANNEL), a ; save	channel	number stored in that way
    2400/     D29 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 41 - 8/17/2019 18:52:23


    2401/     D2C : B7                  		or	a
    2402/     D2D : 28 05               		jr	z, loc_C50
    2403/     D2F : 11 E0 01            		ld	de, 01E0h ; 'а'  ; point to the right SFX channel data
    2404/     D32 : DD 19               		add	ix, de
    2405/     D34 :                     
    2406/     D34 :                     loc_C50:				; CODE XREF: PSG_ParseToneData+106j
    2407/     D34 : DD 7E 03            		ld	a, (ix+3)	; get byte 3 of	channel	data
    2408/     D37 : B7                  		or	a
    2409/     D38 : C0                  		ret	nz		; return if channel has	nothing	to do
    2410/     D39 : DD 7E 02            		ld	a, (ix+2)	; get time counter
    2411/     D3C : B7                  		or	a
    2412/     D3D : C2 1E 0E            		jp	nz, loc_D3F	; don't jump if it's time to parse next byte
    2413/     D40 : DD 56 01            		ld	d, (ix+1)	; if counter = 0, parse	next byte
    2414/     D43 : DD 5E 00            		ld	e, (ix+0)	; load channel data pointer
    2415/     D46 :                     
    2416/     D46 :                     loc_C62:				; CODE XREF: PSG_ParseToneData+53j
    2417/     D46 :                     					; PSG_ParseToneData+5Cj
    2418/     D46 :                     					; PSG_ParseToneData+66j
    2419/     D46 :                     					; PSG_ParseToneData+70j
    2420/     D46 :                     					; PSG_ParseToneData+80j
    2421/     D46 :                     					; PSG_ParseToneData+8Aj
    2422/     D46 :                     					; PSG_ParseToneData+94j
    2423/     D46 :                     					; PSG_ParseToneData+99j
    2424/     D46 : 1A                  		ld	a, (de)		; get pointed data
    2425/     D47 : E6 F8               		and	0F8h ; 'ш'
    2426/     D49 : FE F8               		cp	0F8h ; 'ш'
    2427/     D4B : C2 B1 0D            		jp	nz, loc_CD2	; if byte is not a command
    2428/     D4E : 1A                  		ld	a, (de)		; get byte again
    2429/     D4F : FE FF               		cp	0FFh
    2430/     D51 : C2 6A 0D            		jp	nz, loc_C8B	; if a != FF check other possible command values
    2431/     D54 : 13                  		inc	de		; a = FF
    2432/     D55 : 1A                  		ld	a, (de)
    2433/     D56 : 6F                  		ld	l, a
    2434/     D57 : 13                  		inc	de
    2435/     D58 : 1A                  		ld	a, (de)
    2436/     D59 : 67                  		ld	h, a
    2437/     D5A : B5                  		or	l
    2438/     D5B : 20 0A               		jr	nz, PSG_Parse_At_New_Offset ; FF xx xx,	go parse at new	offset xxxx
    2439/     D5D : 3E 01               		ld	a, 1		; FF 00	00, end	of data, mute channel and return
    2440/     D5F : DD 77 03            		ld	(ix+3),	a	; byte 3 of channel data = 1
    2441/     D62 :                     
    2442/     D62 :                     					; doubt : if finishing SFX, do I need to update with music data ? like for YM ? We'll see
    2443/     D62 :                     
    2444/     D62 : 3E 0F               		ld	a, 0Fh
    2445/     D64 : C3 B5 05            		jp	PSG_SetChannelAttenuation ; concerned channel volume : OFF
    2446/     D67 :                     ; ---------------------------------------------------------------------------
    2447/     D67 :                     
    2448/     D67 :                     PSG_Parse_At_New_Offset:		; CODE XREF: PSG_ParseToneData+41j
    2449/     D67 : EB                  		ex	de, hl
    2450/     D68 : 18 DC               		jr	loc_C62		; get pointed data
    2451/     D6A :                     ; ---------------------------------------------------------------------------
    2452/     D6A :                     
    2453/     D6A :                     loc_C8B:				; CODE XREF: PSG_ParseToneData+37j
    2454/     D6A : FE FD               		cp	0FDh ; 'э'
    2455/     D6C : 20 06               		jr	nz, loc_C95
    2456/     D6E : CD 45 0F            		call	PSG_LoadInstrument
    2457/     D71 : C3 46 0D            		jp	loc_C62		; get pointed data
    2458/     D74 :                     ; ---------------------------------------------------------------------------
    2459/     D74 :                     
    2460/     D74 :                     loc_C95:				; CODE XREF: PSG_ParseToneData+57j
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 42 - 8/17/2019 18:52:23


    2461/     D74 : FE FC               		cp	0FCh ; 'ь'
    2462/     D76 : 20 06               		jr	nz, loc_C9F
    2463/     D78 : CD BA 10            		call	SetRelease
    2464/     D7B : C3 46 0D            		jp	loc_C62		; get pointed data
    2465/     D7E :                     ; ---------------------------------------------------------------------------
    2466/     D7E :                     
    2467/     D7E :                     loc_C9F:				; CODE XREF: PSG_ParseToneData+61j
    2468/     D7E : FE FB               		cp	0FBh ; 'ы'
    2469/     D80 : 20 06               		jr	nz, Set_Timer
    2470/     D82 : CD CA 10            		call	LoadVibrato
    2471/     D85 : C3 46 0D            		jp	loc_C62		; get pointed data
    2472/     D88 :                     ; ---------------------------------------------------------------------------
    2473/     D88 :                     
    2474/     D88 :                     Set_Timer:				; CODE XREF: PSG_ParseToneData+6Bj
    2475/     D88 : FE FA               		cp	0FAh ; 'ъ'
    2476/     D8A : 20 0C               		jr	nz, loc_CB9
    2477/     D8C : 13                  		inc	de
    2478/     D8D : 06 26               		ld	b, 26h ; '&'    ; YM Register : Timer B value
    2479/     D8F : 1A                  		ld	a, (de)
    2480/     D90 : 4F                  		ld	c, a
    2481/     D91 : 13                  		inc	de
    2482/     D92 : CD 83 05            		call	YM1_Input
    2483/     D95 : C3 46 0D            		jp	loc_C62		; get pointed data
    2484/     D98 :                     ; ---------------------------------------------------------------------------
    2485/     D98 :                     
    2486/     D98 :                     loc_CB9:				; CODE XREF: PSG_ParseToneData+75j
    2487/     D98 : FE F9               		cp	0F9h ; 'щ'
    2488/     D9A : 20 06               		jr	nz, loc_CC3
    2489/     D9C : CD 18 11            		call	LoadNoteShift
    2490/     D9F : C3 46 0D            		jp	loc_C62		; get pointed data
    2491/     DA2 :                     ; ---------------------------------------------------------------------------
    2492/     DA2 :                     
    2493/     DA2 :                     loc_CC3:				; CODE XREF: PSG_ParseToneData+85j
    2494/     DA2 : FE F8               		cp	0F8h ; 'ш'
    2495/     DA4 : 20 06               		jr	nz, unidentifiedCommand	; Unidentified_Command
    2496/     DA6 : CD 30 11            		call	ParseLoopCommand
    2497/     DA9 : C3 46 0D            		jp	loc_C62		; get pointed data
    2498/     DAC :                     ; ---------------------------------------------------------------------------
    2499/     DAC :                     
    2500/     DAC :                     unidentifiedCommand:			; CODE XREF: PSG_ParseToneData+8Fj
    2501/     DAC : 13                  		inc	de		; Unidentified_Command
    2502/     DAD : 13                  		inc	de
    2503/     DAE : C3 46 0D            		jp	loc_C62		; get pointed data
    2504/     DB1 :                     ; ---------------------------------------------------------------------------
    2505/     DB1 :                     
    2506/     DB1 :                     loc_CD2:				; CODE XREF: PSG_ParseToneData+31j
    2507/     DB1 : 1A                  		ld	a, (de)		; byte is not a	command
    2508/     DB2 : E6 7F               		and	7Fh ; ''
    2509/     DB4 : FE 70               		cp	70h ; 'p'
    2510/     DB6 : CA FA 0D            		jp	z, loc_D1B	; jump if byte = F0 or 70
    2511/     DB9 : F5                  		push	af		; keep byte without bit	7 : new	note
    2512/     DBA : DD 7E 1E            		ld	a, (ix+1Eh)
    2513/     DBD : B7                  		or	a
    2514/     DBE : 28 0D               		jr	z, Set_New_Note	; jump if byte 1E = 0. Byte 1E is set when key has just	been released
    2515/     DC0 : AF                  		xor	a		; key has just been released
    2516/     DC1 : DD 77 12            		ld	(ix+12h), a	; reset	instrument relative pointer
    2517/     DC4 : DD 77 1E            		ld	(ix+1Eh), a	; clear	byte 1E
    2518/     DC7 : DD 7E 09            		ld	a, (ix+9)	; reset	vibrato	counter
    2519/     DCA : DD 77 0A            		ld	(ix+0Ah), a
    2520/     DCD :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 43 - 8/17/2019 18:52:23


    2521/     DCD :                     Set_New_Note:				; CODE XREF: PSG_ParseToneData+A9j
    2522/     DCD : AF                  		xor	a
    2523/     DCE : DD 77 0D            		ld	(ix+0Dh), a	; reset	vibrato	relative pointer
    2524/     DD1 : F1                  		pop	af		; get back byte	without	bit 7
    2525/     DD2 : DD 86 1C            		add	a, (ix+1Ch)	; add note shift value
    2526/     DD5 : D6 15               		sub	15h
    2527/     DD7 : 6F                  		ld	l, a
    2528/     DD8 : 26 00               		ld	h, 0
    2529/     DDA : 01 82 13            		ld	bc, t_PSG_FREQUENCIES ;	PSG Frequency table, same idea as YM Frequency table but for PSG Tone Channels
    2530/     DDD : 29                  		add	hl, hl
    2531/     DDE : 09                  		add	hl, bc
    2532/     DDF : 7E                  		ld	a, (hl)
    2533/     DE0 : 23                  		inc	hl
    2534/     DE1 : 66                  		ld	h, (hl)
    2535/     DE2 : 6F                  		ld	l, a		; hl = corresponding frequency
    2536/     DE3 : 06 00               		ld	b, 0
    2537/     DE5 : DD 4E 1D            		ld	c, (ix+1Dh)
    2538/     DE8 : CB 39               		srl	c
    2539/     DEA : 09                  		add	hl, bc		; add frequency	shift value
    2540/     DEB : 4D                  		ld	c, l
    2541/     DEC : DD 71 0E            		ld	(ix+0Eh), c	; keep frequency value to play
    2542/     DEF : 4C                  		ld	c, h
    2543/     DF0 : DD 71 0F            		ld	(ix+0Fh), c
    2544/     DF3 : DD 7E 08            		ld	a, (ix+8)
    2545/     DF6 : E6 80               		and	80h ; 'Ђ'       ; keep only bit 7
    2546/     DF8 : 18 05               		jr	loc_D20
    2547/     DFA :                     ; ---------------------------------------------------------------------------
    2548/     DFA :                     
    2549/     DFA :                     loc_D1B:				; CODE XREF: PSG_ParseToneData+A1j
    2550/     DFA : DD 7E 08            		ld	a, (ix+8)	; if byte = F0 or 70
    2551/     DFD : F6 01               		or	1		; set bit 0
    2552/     DFF :                     
    2553/     DFF :                     loc_D20:				; CODE XREF: PSG_ParseToneData+E3j
    2554/     DFF : DD 77 08            		ld	(ix+8),	a
    2555/     E02 : 1A                  		ld	a, (de)		; get full byte	again
    2556/     E03 : CB 7F               		bit	7, a
    2557/     E05 : 20 05               		jr	nz, loc_D2D	; if bit 7 = 1,	set note length
    2558/     E07 : DD 7E 07            		ld	a, (ix+7)
    2559/     E0A : 18 05               		jr	loc_D32		; reset	time counter
    2560/     E0C :                     ; ---------------------------------------------------------------------------
    2561/     E0C :                     
    2562/     E0C :                     loc_D2D:				; CODE XREF: PSG_ParseToneData+F0j
    2563/     E0C : 13                  		inc	de
    2564/     E0D : 1A                  		ld	a, (de)
    2565/     E0E : DD 77 07            		ld	(ix+7),	a	; set new note length
    2566/     E11 :                     
    2567/     E11 :                     loc_D32:				; CODE XREF: PSG_ParseToneData+F5j
    2568/     E11 : DD 77 02            		ld	(ix+2),	a	; reset	time counter
    2569/     E14 : 13                  		inc	de
    2570/     E15 : DD 72 01            		ld	(ix+1),	d	; save offset of next byte to parse
    2571/     E18 : DD 73 00            		ld	(ix+0),	e
    2572/     E1B : C3 34 0D            		jp	loc_C50		; get byte 3 of	channel	data
    2573/     E1E :                     ; ---------------------------------------------------------------------------
    2574/     E1E :                     
    2575/     E1E :                     loc_D3F:				; CODE XREF: PSG_ParseToneData+23j
    2576/     E1E : DD 35 02            		dec	(ix+2)		; decrement counter
    2577/     E21 : DD 7E 0A            		ld	a, (ix+0Ah)
    2578/     E24 : B7                  		or	a
    2579/     E25 : 28 06               		jr	z, Apply_Vibrato ; jump	if vibrato must	be applied
    2580/     E27 : DD 35 0A            		dec	(ix+0Ah)	; decrement vibrato counter
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 44 - 8/17/2019 18:52:23


    2581/     E2A : AF                  		xor	a
    2582/     E2B : 18 28               		jr	loc_D76
    2583/     E2D :                     ; ---------------------------------------------------------------------------
    2584/     E2D :                     
    2585/     E2D :                     Apply_Vibrato:				; CODE XREF: PSG_ParseToneData+110j
    2586/     E2D :                     					; PSG_ParseToneData+13Dj
    2587/     E2D : DD 7E 0C            		ld	a, (ix+0Ch)
    2588/     E30 : 67                  		ld	h, a
    2589/     E31 : DD 7E 0B            		ld	a, (ix+0Bh)
    2590/     E34 : 6F                  		ld	l, a
    2591/     E35 : DD 7E 0D            		ld	a, (ix+0Dh)
    2592/     E38 : 06 00               		ld	b, 0
    2593/     E3A : 4F                  		ld	c, a
    2594/     E3B : DD 34 0D            		inc	(ix+0Dh)
    2595/     E3E : 09                  		add	hl, bc
    2596/     E3F : 7E                  		ld	a, (hl)
    2597/     E40 : FE 81               		cp	81h ; 'Ѓ'
    2598/     E42 : 20 05               		jr	nz, loc_D6A
    2599/     E44 : DD 35 0D            		dec	(ix+0Dh)
    2600/     E47 : 18 27               		jr	loc_D91		; THIS PART will change	the level depending on the PSG Instrument
    2601/     E49 :                     ; ---------------------------------------------------------------------------
    2602/     E49 :                     
    2603/     E49 :                     loc_D6A:				; CODE XREF: PSG_ParseToneData+12Dj
    2604/     E49 : FE 80               		cp	80h ; 'Ђ'
    2605/     E4B : C2 55 0E            		jp	nz, loc_D76
    2606/     E4E : AF                  		xor	a
    2607/     E4F : DD 77 0D            		ld	(ix+0Dh), a
    2608/     E52 : C3 2D 0E            		jp	Apply_Vibrato
    2609/     E55 :                     ; ---------------------------------------------------------------------------
    2610/     E55 :                     
    2611/     E55 :                     loc_D76:				; CODE XREF: PSG_ParseToneData+116j
    2612/     E55 :                     					; PSG_ParseToneData+136j
    2613/     E55 : ED 44               		neg
    2614/     E57 : 4F                  		ld	c, a
    2615/     E58 : DD 7E 0E            		ld	a, (ix+0Eh)
    2616/     E5B : 6F                  		ld	l, a
    2617/     E5C : DD 7E 0F            		ld	a, (ix+0Fh)
    2618/     E5F : 67                  		ld	h, a
    2619/     E60 : 06 00               		ld	b, 0
    2620/     E62 : CB 79               		bit	7, c
    2621/     E64 : 28 01               		jr	z, loc_D88
    2622/     E66 : 05                  		dec	b
    2623/     E67 :                     
    2624/     E67 :                     loc_D88:				; CODE XREF: PSG_ParseToneData+14Fj
    2625/     E67 : 09                  		add	hl, bc
    2626/     E68 : 7C                  		ld	a, h
    2627/     E69 : DD 77 0F            		ld	(ix+0Fh), a
    2628/     E6C : 7D                  		ld	a, l
    2629/     E6D : DD 77 0E            		ld	(ix+0Eh), a	; now vibrato is applied
    2630/     E70 :                     
    2631/     E70 :                     loc_D91:				; CODE XREF: PSG_ParseToneData+132j
    2632/     E70 : CD 35 0F            		call	PSG_GetInstrumentPointer ; THIS	PART will change the level depending on	the PSG	Instrument
    2633/     E73 : 46                  		ld	b, (hl)		; byte b = 8x or 0x
    2634/     E74 : CB 78               		bit	7, b
    2635/     E76 : 20 04               		jr	nz, loc_D9D	; if byte $8x, then it's data end, so just keep applying the same level alteration
    2636/     E78 : 3C                  		inc	a		; if byte 0x, point to next byte
    2637/     E79 : DD 77 12            		ld	(ix+12h), a
    2638/     E7C :                     
    2639/     E7C :                     loc_D9D:				; CODE XREF: PSG_ParseToneData+161j
    2640/     E7C : CB B8               		res	7, b		; keep x only
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 45 - 8/17/2019 18:52:23


    2641/     E7E : 3E 0F               		ld	a, 0Fh
    2642/     E80 : 90                  		sub	b
    2643/     E81 : 47                  		ld	b, a
    2644/     E82 : DD 7E 04            		ld	a, (ix+4)
    2645/     E85 : 90                  		sub	b		; a = level affected by	instrument
    2646/     E86 : 30 01               		jr	nc, loc_DAA	; make sure value is at	least 0
    2647/     E88 : AF                  		xor	a
    2648/     E89 :                     
    2649/     E89 :                     loc_DAA:				; CODE XREF: PSG_ParseToneData+171j
    2650/     E89 : 47                  		ld	b, a		; put level to apply in	b
    2651/     E8A : FD 7E 00            		ld	a, (iy+0)
    2652/     E8D : FE 02               		cp	2
    2653/     E8F : 20 04               		jr	nz, loc_DB6	; jump if it's PSG Tone 1 or 2 Channels
    2654/     E91 : 3E 0F               		ld	a, 0Fh		; if PSG Tone 3	Channel, apply max level
    2655/     E93 : 18 03               		jr	loc_DB9
    2656/     E95 :                     ; ---------------------------------------------------------------------------
    2657/     E95 :                     
    2658/     E95 :                     loc_DB6:				; CODE XREF: PSG_ParseToneData+17Aj
    2659/     E95 : 3A FD 1F            		ld	a, (MUSIC_LEVEL) ; general output level	for music and SFX type 1, sent from 68k
    2660/     E98 :                     
    2661/     E98 :                     loc_DB9:				; CODE XREF: PSG_ParseToneData+17Ej
    2662/     E98 : 80                  		add	a, b
    2663/     E99 : D6 0F               		sub	0Fh
    2664/     E9B : 30 01               		jr	nc, loc_DBF	; make sure level is at	least 0
    2665/     E9D : AF                  		xor	a
    2666/     E9E :                     
    2667/     E9E :                     loc_DBF:				; CODE XREF: PSG_ParseToneData+186j
    2668/     E9E : DD 77 05            		ld	(ix+5),	a	; store	level to apply in byte 05
    2669/     EA1 : DD 46 08            		ld	b, (ix+8)
    2670/     EA4 : DD 7E 02            		ld	a, (ix+2)
    2671/     EA7 : B7                  		or	a
    2672/     EA8 : 28 09               		jr	z, PSG_Release_Key ; if	counter	= 0, jump to release key part
    2673/     EAA : CB 78               		bit	7, b
    2674/     EAC : 20 23               		jr	nz, loc_DF2	; jump if byte 08 bit 7	= 1
    2675/     EAE : DD BE 06            		cp	(ix+6)
    2676/     EB1 : 20 1E               		jr	nz, loc_DF2	; or if	byte 02	!= byte	06
    2677/     EB3 :                     
    2678/     EB3 :                     PSG_Release_Key:			; CODE XREF: PSG_ParseToneData+193j
    2679/     EB3 : 78                  		ld	a, b
    2680/     EB4 : B7                  		or	a
    2681/     EB5 : 20 1A               		jr	nz, loc_DF2	; leave	if byte	08 != 0
    2682/     EB7 : 0E 01               		ld	c, 1
    2683/     EB9 : DD 71 1E            		ld	(ix+1Eh), c	; set byte 1E to "release key" before next note
    2684/     EBC : F6 02               		or	2
    2685/     EBE : DD 77 08            		ld	(ix+8),	a	; byte 08 = $03
    2686/     EC1 :                     
    2687/     EC1 :                     loc_DE2:				; CODE XREF: PSG_ParseToneData+1B7j
    2688/     EC1 : CD 35 0F            		call	PSG_GetInstrumentPointer
    2689/     EC4 : 7E                  		ld	a, (hl)
    2690/     EC5 : E6 80               		and	80h ; 'Ђ'
    2691/     EC7 : 20 05               		jr	nz, loc_DEF	; increment relative pointer until pointed byte's bit 7 = 1
    2692/     EC9 : DD 34 12            		inc	(ix+12h)
    2693/     ECC : 18 F3               		jr	loc_DE2
    2694/     ECE :                     ; ---------------------------------------------------------------------------
    2695/     ECE :                     
    2696/     ECE :                     loc_DEF:				; CODE XREF: PSG_ParseToneData+1B2j
    2697/     ECE : DD 34 12            		inc	(ix+12h)	; now byte 12 points to	instrument release data
    2698/     ED1 :                     
    2699/     ED1 :                     loc_DF2:				; CODE XREF: PSG_ParseToneData+197j
    2700/     ED1 :                     					; PSG_ParseToneData+19Cj
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 46 - 8/17/2019 18:52:23


    2701/     ED1 :                     					; PSG_ParseToneData+1A0j
    2702/     ED1 : 3A 48 15            		ld	a, (FADE_OUT_TIMER) ; Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while	loading	music
    2703/     ED4 : B7                  		or	a
    2704/     ED5 : 20 11               		jr	nz, Transmit_Data ; transmit Frequency data to PSG
    2705/     ED7 : FD 7E 00            		ld	a, (iy+0)
    2706/     EDA : FE 02               		cp	2
    2707/     EDC : 28 0A               		jr	z, Transmit_Data ; jump	if currently managing PSG Tone 3 Channel
    2708/     EDE : DD 7E 04            		ld	a, (ix+4)
    2709/     EE1 : B7                  		or	a
    2710/     EE2 : 28 04               		jr	z, Transmit_Data ; transmit Frequency data to PSG
    2711/     EE4 : 3D                  		dec	a		; decrement level if currently fading out and fade out timer = 0
    2712/     EE5 : DD 77 04            		ld	(ix+4),	a
    2713/     EE8 :                     
    2714/     EE8 :                     Transmit_Data:				; CODE XREF: PSG_ParseToneData+1C0j
    2715/     EE8 :                     					; PSG_ParseToneData+1C7j
    2716/     EE8 :                     					; PSG_ParseToneData+1CDj
    2717/     EE8 :                     
    2718/     EE8 :                     					; Conditionnal input to implement here !
    2719/     EE8 :                     
    2720/     EE8 :                     
    2721/     EE8 : DD 7E 0F            		ld	a, (ix+0Fh)	; transmit Frequency data to PSG
    2722/     EEB : 47                  		ld	b, a
    2723/     EEC : DD 7E 0E            		ld	a, (ix+0Eh)
    2724/     EEF : 4F                  		ld	c, a
    2725/     EF0 : E6 0F               		and	0Fh
    2726/     EF2 : 67                  		ld	h, a
    2727/     EF3 : 3A 41 15            		ld	a, (CURRENT_PSG_CHANNEL) ; current PSG channel to process, stored in the right bits ready to be	sent to	PSG
    2728/     EF6 : B4                  		or	h
    2729/     EF7 : F6 80               		or	80h ; 'Ђ'
    2730/     EF9 : CD 1A 0F            		call	PSG_ConditionnalInput	; first	byte of	tone channel frequency command
    2731/     EFC : 79                  		ld	a, c
    2732/     EFD : CB 38               		srl	b
    2733/     EFF : 1F                  		rra
    2734/     F00 : CB 38               		srl	b
    2735/     F02 : 1F                  		rra
    2736/     F03 : 1F                  		rra
    2737/     F04 : 1F                  		rra
    2738/     F05 : E6 3F               		and	3Fh ; '?'
    2739/     F07 : CD 1A 0F            		call	PSG_ConditionnalInput	; second byte of tone channel frequency	command
    2740/     F0A : 3E 0F               		ld	a, 0Fh		; starting attenuation value
    2741/     F0C : DD 96 05            		sub	(ix+5)		; get level to apply
    2742/     F0F : 67                  		ld	h, a		; save it
    2743/     F10 : 3A 41 15            		ld	a, (CURRENT_PSG_CHANNEL) ; get channel number
    2744/     F13 : B4                  		or	h		; load saved value
    2745/     F14 : F6 90               		or	90h ; 'ђ'       ; load attenuation command bits
    2746/     F16 : CD 1A 0F            		call	PSG_ConditionnalInput
    2747/     F19 : C9                  		ret
    2748/     F1A :                     ; End of function PSG_ParseToneData
    2749/     F1A :                     
    2750/     F1A :                     ; =============== S U B R O U T I N E =======================================
    2751/     F1A :                     
    2752/     F1A :                     
    2753/     F1A :                     PSG_ConditionnalInput:
    2754/     F1A : F5                  		push	af
    2755/     F1B : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    2756/     F1E : B7                  		or	a
    2757/     F1F : 20 0F               		jr	nz, send_psg_data
    2758/     F21 : D9                  		exx
    2759/     F22 : DD E5               		push	ix
    2760/     F24 : E1                  		pop	hl
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 47 - 8/17/2019 18:52:23


    2761/     F25 : 01 E3 01            		ld	bc, 01E3h ; 'г'
    2762/     F28 : 09                  		add	hl, bc
    2763/     F29 : 7E                  		ld	a, (hl)
    2764/     F2A : D9                  		exx
    2765/     F2B : B7                  		or	a
    2766/     F2C : 20 02               		jr	nz, send_psg_data
    2767/     F2E : F1                  		pop	af
    2768/     F2F : C9                  		ret
    2769/     F30 :                     send_psg_data:
    2770/     F30 : F1                  		pop	af
    2771/     F31 : 32 11 7F            		ld	(PSG_PORT), a
    2772/     F34 : C9                  		ret
    2773/     F35 :                     
    2774/     F35 :                     ; End of function YM1_ConditionnalInput
    2775/     F35 :                     
    2776/     F35 :                     
    2777/     F35 :                     ; =============== S U B R O U T I N E =======================================
    2778/     F35 :                     
    2779/     F35 :                     
    2780/     F35 :                     PSG_GetInstrumentPointer:		; CODE XREF: PSG_ParseToneData:loc_D91p
    2781/     F35 :                     					; PSG_ParseToneData:loc_DE2p
    2782/     F35 :                     					; PSG_ParseNoiseData+B7p
    2783/     F35 :                     					; PSG_ParseNoiseData:loc_F78p
    2784/     F35 : DD 7E 11            		ld	a, (ix+11h)
    2785/     F38 : 67                  		ld	h, a
    2786/     F39 : DD 7E 10            		ld	a, (ix+10h)	; bytes	10-11 :	pointer
    2787/     F3C : 6F                  		ld	l, a
    2788/     F3D : 06 00               		ld	b, 0
    2789/     F3F : DD 7E 12            		ld	a, (ix+12h)	; byte 12 : relative pointer to	add to 10-11 pointer
    2790/     F42 : 4F                  		ld	c, a
    2791/     F43 : 09                  		add	hl, bc
    2792/     F44 : C9                  		ret
    2793/     F45 :                     ; End of function PSG_GetInstrumentPointer
    2794/     F45 :                     
    2795/     F45 :                     
    2796/     F45 :                     ; =============== S U B R O U T I N E =======================================
    2797/     F45 :                     
    2798/     F45 :                     
    2799/     F45 :                     PSG_LoadInstrument:			; CODE XREF: PSG_ParseToneData+59p
    2800/     F45 :                     					; PSG_ParseNoiseData+4Cp
    2801/     F45 : 13                  		inc	de		; load psg instrument x	at level y
    2802/     F46 : 1A                  		ld	a, (de)
    2803/     F47 : 4F                  		ld	c, a
    2804/     F48 : E6 0F               		and	0Fh		; keep only nibble 2 : instrument level
    2805/     F4A : 47                  		ld	b, a
    2806/     F4B : FD 7E 00            		ld	a, (iy+0)
    2807/     F4E : FE 02               		cp	2		; if it's PSG Tone 3 Channel
    2808/     F50 : 28 06               		jr	z, loc_E5E	; load instrument level
    2809/     F52 : 3A 43 15            		ld	a, (CURRENTLY_FADING_OUT) ; set	to 01 when a fade out operation	is being executed
    2810/     F55 : B7                  		or	a
    2811/     F56 : 20 03               		jr	nz, loc_E61	; don't jump if 0, so load new level
    2812/     F58 :                     
    2813/     F58 :                     loc_E5E:				; CODE XREF: PSG_LoadInstrument+Bj
    2814/     F58 : DD 70 04            		ld	(ix+4),	b	; if it's PSG Tone 3 channel, keep nibble 2 in byte 04
    2815/     F5B :                     
    2816/     F5B :                     loc_E61:				; CODE XREF: PSG_LoadInstrument+11j
    2817/     F5B : 79                  		ld	a, c		; get back full	byte
    2818/     F5C : 1F                  		rra
    2819/     F5D : 1F                  		rra
    2820/     F5E : 1F                  		rra
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 48 - 8/17/2019 18:52:23


    2821/     F5F : 1F                  		rra
    2822/     F60 : E6 0F               		and	0Fh		; get psg instrument index
    2823/     F62 : 13                  		inc	de
    2824/     F63 : 26 00               		ld	h, 0
    2825/     F65 : 6F                  		ld	l, a
    2826/     F66 : 29                  		add	hl, hl
    2827/     F67 : 01 81 14            		ld	bc, pt_PSG_INSTRUMENTS ; The PSG instruments only affect the channel level
    2828/     F6A : 09                  		add	hl, bc
    2829/     F6B : 4E                  		ld	c, (hl)
    2830/     F6C : 23                  		inc	hl
    2831/     F6D : 46                  		ld	b, (hl)
    2832/     F6E : DD 71 10            		ld	(ix+10h), c	; get instrument pointer
    2833/     F71 : DD 70 11            		ld	(ix+11h), b
    2834/     F74 : C9                  		ret
    2835/     F75 :                     ; End of function PSG_LoadInstrument
    2836/     F75 :                     
    2837/     F75 :                     
    2838/     F75 :                     ; =============== S U B R O U T I N E =======================================
    2839/     F75 :                     
    2840/     F75 :                     
    2841/     F75 :                     PSG_ParseNoiseData:			; CODE XREF: UpdateSound+ADp
    2842/     F75 : FD 7E 00            		ld	a, (iy+0)
    2843/     F78 : DD 21 C0 19         		ld	ix, MUSIC_CHANNEL_NOISE
    2844/     F7C : 3E 60               		ld	a, 60h ; '`'
    2845/     F7E : 32 41 15            		ld	(CURRENT_PSG_CHANNEL), a ; current PSG channel to process, stored in the right bits ready to be	sent to	PSG
    2846/     F81 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    2847/     F84 : B7                  		or	a
    2848/     F85 : 28 05               		jr	z, loc_E87
    2849/     F87 : 11 E0 01            		ld	de, 01E0h ; 'а'  ; point to the right SFX channel data
    2850/     F8A : DD 19               		add	ix, de
    2851/     F8C :                     
    2852/     F8C :                     loc_E87:				; CODE XREF: PSG_ParseNoiseData+B1j
    2853/     F8C : DD 7E 03            		ld	a, (ix+3)
    2854/     F8F : B7                  		or	a
    2855/     F90 : C0                  		ret	nz		; don't parse if channel not in use
    2856/     F91 : DD 7E 02            		ld	a, (ix+2)
    2857/     F94 : B7                  		or	a		; check	note time counter
    2858/     F95 : C2 2F 10            		jp	nz, loc_F2F	; jump if it's not the end of the note
    2859/     F98 : DD 56 01            		ld	d, (ix+1)
    2860/     F9B : DD 5E 00            		ld	e, (ix+0)	; if it's the end of the note, get data pointer to parse next byte
    2861/     F9E :                     
    2862/     F9E :                     loc_E99:				; CODE XREF: PSG_ParseNoiseData+45j
    2863/     F9E :                     					; PSG_ParseNoiseData+4Fj
    2864/     F9E :                     					; PSG_ParseNoiseData+59j
    2865/     F9E :                     					; PSG_ParseNoiseData+63j
    2866/     F9E :                     					; PSG_ParseNoiseData+68j
    2867/     F9E : 1A                  		ld	a, (de)
    2868/     F9F : E6 F8               		and	0F8h ; 'ш'
    2869/     FA1 : FE F8               		cp	0F8h ; 'ш'
    2870/     FA3 : C2 E6 0F            		jp	nz, loc_EE6	; jump if parsed byte is not a command
    2871/     FA6 : 1A                  		ld	a, (de)
    2872/     FA7 : FE FF               		cp	0FFh
    2873/     FA9 : C2 C3 0F            		jp	nz, loc_EC3	; jump if command is not $FF
    2874/     FAC : 13                  		inc	de
    2875/     FAD : 1A                  		ld	a, (de)
    2876/     FAE : 6F                  		ld	l, a
    2877/     FAF : 13                  		inc	de
    2878/     FB0 : 1A                  		ld	a, (de)
    2879/     FB1 : 67                  		ld	h, a
    2880/     FB2 : B5                  		or	l
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 49 - 8/17/2019 18:52:23


    2881/     FB3 : 20 0A               		jr	nz, loc_EBF	; jump if command is FF	xx xx
    2882/     FB5 : 3E 01               		ld	a, 1
    2883/     FB7 : DD 77 03            		ld	(ix+3),	a	; else,	FF 00 00 : stop	using this channel
    2884/     FBA :                     
    2885/     FBA :                     					; doubt : if finishing SFX, do I need to update with music data ? like for YM ? We'll see
    2886/     FBA :                     
    2887/     FBA : 3E 0F               		ld	a, 0Fh
    2888/     FBC : C3 B5 05            		jp	PSG_SetChannelAttenuation
    2889/     FBF :                     ; ---------------------------------------------------------------------------
    2890/     FBF :                     
    2891/     FBF :                     loc_EBF:				; CODE XREF: PSG_ParseNoiseData+33j
    2892/     FBF : EB                  		ex	de, hl
    2893/     FC0 : C3 9E 0F            		jp	loc_E99
    2894/     FC3 :                     ; ---------------------------------------------------------------------------
    2895/     FC3 :                     
    2896/     FC3 :                     loc_EC3:				; CODE XREF: PSG_ParseNoiseData+29j
    2897/     FC3 : FE FD               		cp	0FDh ; 'э'
    2898/     FC5 : 20 06               		jr	nz, loc_ECD
    2899/     FC7 : CD 45 0F            		call	PSG_LoadInstrument
    2900/     FCA : C3 9E 0F            		jp	loc_E99
    2901/     FCD :                     ; ---------------------------------------------------------------------------
    2902/     FCD :                     
    2903/     FCD :                     loc_ECD:				; CODE XREF: PSG_ParseNoiseData+4Aj
    2904/     FCD : FE FC               		cp	0FCh ; 'ь'
    2905/     FCF : 20 06               		jr	nz, loc_ED7
    2906/     FD1 : CD BA 10            		call	SetRelease
    2907/     FD4 : C3 9E 0F            		jp	loc_E99
    2908/     FD7 :                     ; ---------------------------------------------------------------------------
    2909/     FD7 :                     
    2910/     FD7 :                     loc_ED7:				; CODE XREF: PSG_ParseNoiseData+54j
    2911/     FD7 : FE F8               		cp	0F8h ; 'ш'
    2912/     FD9 : 20 06               		jr	nz, Unidentified_Command
    2913/     FDB : CD 30 11            		call	ParseLoopCommand
    2914/     FDE : C3 9E 0F            		jp	loc_E99
    2915/     FE1 :                     ; ---------------------------------------------------------------------------
    2916/     FE1 :                     
    2917/     FE1 :                     Unidentified_Command:			; CODE XREF: PSG_ParseNoiseData+5Ej
    2918/     FE1 : 13                  		inc	de
    2919/     FE2 : 13                  		inc	de
    2920/     FE3 : C3 9E 0F            		jp	loc_E99
    2921/     FE6 :                     ; ---------------------------------------------------------------------------
    2922/     FE6 :                     
    2923/     FE6 :                     loc_EE6:				; CODE XREF: PSG_ParseNoiseData+23j
    2924/     FE6 : 1A                  		ld	a, (de)
    2925/     FE7 : E6 7F               		and	7Fh ; ''
    2926/     FE9 : FE 70               		cp	70h ; 'p'
    2927/     FEB : CA 0B 10            		jp	z, loc_F0B	; jump if byte = F0 or 70
    2928/     FEE : F5                  		push	af		; keep byte without bit	7 : new	note
    2929/     FEF : DD 7E 1E            		ld	a, (ix+1Eh)
    2930/     FF2 : B7                  		or	a
    2931/     FF3 : 28 07               		jr	z, loc_EFC	; jump if key has not just been	released
    2932/     FF5 : AF                  		xor	a		; key has just been released
    2933/     FF6 : DD 77 12            		ld	(ix+12h), a	; reset	instrument relative pointer
    2934/     FF9 : DD 77 1E            		ld	(ix+1Eh), a	; clear	key release indicator
    2935/     FFC :                     
    2936/     FFC :                     loc_EFC:				; CODE XREF: PSG_ParseNoiseData+78j
    2937/     FFC : F1                  		pop	af
    2938/     FFD : E6 07               		and	7		; just keep bits 2-0
    2939/     FFF : F6 E0               		or	0E0h ; 'а'
    2940/    1001 : 32 11 7F            		ld	(PSG_PORT), a	; transmit feedback and	freqency
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 50 - 8/17/2019 18:52:23


    2941/    1004 : DD 7E 08            		ld	a, (ix+8)
    2942/    1007 : E6 80               		and	80h ; 'Ђ'
    2943/    1009 : 18 05               		jr	loc_F10
    2944/    100B :                     ; ---------------------------------------------------------------------------
    2945/    100B :                     
    2946/    100B :                     loc_F0B:				; CODE XREF: PSG_ParseNoiseData+70j
    2947/    100B : DD 7E 08            		ld	a, (ix+8)
    2948/    100E : F6 01               		or	1
    2949/    1010 :                     
    2950/    1010 :                     loc_F10:				; CODE XREF: PSG_ParseNoiseData+8Ej
    2951/    1010 : DD 77 08            		ld	(ix+8),	a
    2952/    1013 : 1A                  		ld	a, (de)		; get full byte	again
    2953/    1014 : CB 7F               		bit	7, a
    2954/    1016 : 20 05               		jr	nz, loc_F1D	; if bit 7 is set, next	byte is	note length to apply
    2955/    1018 : DD 7E 07            		ld	a, (ix+7)
    2956/    101B : 18 05               		jr	loc_F22		; reset	time counter
    2957/    101D :                     ; ---------------------------------------------------------------------------
    2958/    101D :                     
    2959/    101D :                     loc_F1D:				; CODE XREF: PSG_ParseNoiseData+9Bj
    2960/    101D : 13                  		inc	de
    2961/    101E : 1A                  		ld	a, (de)
    2962/    101F : DD 77 07            		ld	(ix+7),	a	; set new note length
    2963/    1022 :                     
    2964/    1022 :                     loc_F22:				; CODE XREF: PSG_ParseNoiseData+A0j
    2965/    1022 : DD 77 02            		ld	(ix+2),	a	; reset	time counter
    2966/    1025 : 13                  		inc	de
    2967/    1026 : DD 72 01            		ld	(ix+1),	d	; point	to next	byte to	parse
    2968/    1029 : DD 73 00            		ld	(ix+0),	e
    2969/    102C : C3 8C 0F            		jp	loc_E87
    2970/    102F :                     ; ---------------------------------------------------------------------------
    2971/    102F :                     
    2972/    102F :                     loc_F2F:				; CODE XREF: PSG_ParseNoiseData+15j
    2973/    102F : DD 35 02            		dec	(ix+2)		; decrement time counter
    2974/    1032 : CD 35 0F            		call	PSG_GetInstrumentPointer ; affect level	depending on PSG Instrument used
    2975/    1035 : 46                  		ld	b, (hl)		; byte b = 8x or 0x
    2976/    1036 : CB 78               		bit	7, b
    2977/    1038 : 20 04               		jr	nz, loc_F3E	; if byte $8x, then it's data end, so just keep applying the same level alteration
    2978/    103A : 3C                  		inc	a		; if byte 0x, point to next byte
    2979/    103B : DD 77 12            		ld	(ix+12h), a
    2980/    103E :                     
    2981/    103E :                     loc_F3E:				; CODE XREF: PSG_ParseNoiseData+BDj
    2982/    103E : CB B8               		res	7, b		; keep x only
    2983/    1040 : 3E 0F               		ld	a, 0Fh
    2984/    1042 : 90                  		sub	b
    2985/    1043 : 47                  		ld	b, a
    2986/    1044 : DD 7E 04            		ld	a, (ix+4)
    2987/    1047 : 90                  		sub	b		; a = level affected by	instrument
    2988/    1048 : 30 01               		jr	nc, loc_F4B	; make sure value is at	least 0
    2989/    104A : AF                  		xor	a
    2990/    104B :                     
    2991/    104B :                     loc_F4B:				; CODE XREF: PSG_ParseNoiseData+CDj
    2992/    104B : 47                  		ld	b, a
    2993/    104C : 3A FD 1F            		ld	a, (MUSIC_LEVEL) ; apply music level
    2994/    104F : 80                  		add	a, b
    2995/    1050 : D6 0F               		sub	0Fh
    2996/    1052 : 30 01               		jr	nc, loc_F55	; make sure level is at	least 0
    2997/    1054 : AF                  		xor	a
    2998/    1055 :                     
    2999/    1055 :                     loc_F55:				; CODE XREF: PSG_ParseNoiseData+D7j
    3000/    1055 : DD 77 05            		ld	(ix+5),	a	; keep level value
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 51 - 8/17/2019 18:52:23


    3001/    1058 : DD 46 08            		ld	b, (ix+8)
    3002/    105B : DD 7E 02            		ld	a, (ix+2)
    3003/    105E : B7                  		or	a
    3004/    105F : 28 09               		jr	z, Release_Key	; if counter = 0, jump to release key part
    3005/    1061 : CB 78               		bit	7, b
    3006/    1063 : 20 23               		jr	nz, loc_F88	; jump if byte 08 bit 7	= 1
    3007/    1065 : DD BE 06            		cp	(ix+6)
    3008/    1068 : 20 1E               		jr	nz, loc_F88	; or if	byte 02	!= byte	06
    3009/    106A :                     
    3010/    106A :                     Release_Key:				; CODE XREF: PSG_ParseNoiseData+E4j
    3011/    106A : 78                  		ld	a, b
    3012/    106B : B7                  		or	a
    3013/    106C : 20 1A               		jr	nz, loc_F88	; leave	if byte	08 != 0
    3014/    106E : 0E 01               		ld	c, 1
    3015/    1070 : DD 71 1E            		ld	(ix+1Eh), c	; set byte 1E to "release key" before next note
    3016/    1073 : F6 02               		or	2
    3017/    1075 : DD 77 08            		ld	(ix+8),	a	; byte 08 = $03
    3018/    1078 :                     
    3019/    1078 :                     loc_F78:				; CODE XREF: PSG_ParseNoiseData+108j
    3020/    1078 : CD 35 0F            		call	PSG_GetInstrumentPointer
    3021/    107B : 7E                  		ld	a, (hl)
    3022/    107C : E6 80               		and	80h ; 'Ђ'
    3023/    107E : 20 05               		jr	nz, loc_F85	; increment relative pointer until pointed byte's bit 7 = 1
    3024/    1080 : DD 34 12            		inc	(ix+12h)
    3025/    1083 : 18 F3               		jr	loc_F78
    3026/    1085 :                     ; ---------------------------------------------------------------------------
    3027/    1085 :                     
    3028/    1085 :                     loc_F85:				; CODE XREF: PSG_ParseNoiseData+103j
    3029/    1085 : DD 34 12            		inc	(ix+12h)	; now byte 12 points to	instrument release data
    3030/    1088 :                     
    3031/    1088 :                     loc_F88:				; CODE XREF: PSG_ParseNoiseData+E8j
    3032/    1088 :                     					; PSG_ParseNoiseData+EDj
    3033/    1088 :                     					; PSG_ParseNoiseData+F1j
    3034/    1088 : 3A 48 15            		ld	a, (FADE_OUT_TIMER) ; Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while	loading	music
    3035/    108B : B7                  		or	a
    3036/    108C : 20 0A               		jr	nz, Transmit_Attenuation
    3037/    108E : DD 7E 04            		ld	a, (ix+4)
    3038/    1091 : B7                  		or	a
    3039/    1092 : 28 04               		jr	z, Transmit_Attenuation
    3040/    1094 : 3D                  		dec	a		; decrement level if currently fading out and fade out timer = 0
    3041/    1095 : DD 77 04            		ld	(ix+4),	a
    3042/    1098 :                     
    3043/    1098 :                     Transmit_Attenuation:			; CODE XREF: PSG_ParseNoiseData+111j
    3044/    1098 :                     					; PSG_ParseNoiseData+117j
    3045/    1098 :                     
    3046/    1098 :                     					; Conditional input to implement here !
    3047/    1098 :                     
    3048/    1098 : 3E 0F               		ld	a, 0Fh
    3049/    109A : DD 96 05            		sub	(ix+5)		; get sound level and invert it	to get sound attenuation
    3050/    109D : F6 F0               		or	0F0h ; 'р'      ; add attenuation command bits
    3051/    109F : CD 1A 0F            		call	PSG_ConditionnalInput	; transmit attenuation
    3052/    10A2 : C9                  		ret
    3053/    10A3 :                     ; End of function PSG_ParseNoiseData
    3054/    10A3 :                     
    3055/    10A3 :                     
    3056/    10A3 :                     ; =============== S U B R O U T I N E =======================================
    3057/    10A3 :                     
    3058/    10A3 :                     
    3059/    10A3 :                     YM_SetSlideOrKeyRelease:		; CODE XREF: YM1_ParseData+9Cp
    3060/    10A3 :                     					; YM2_ParseData+CAp
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 52 - 8/17/2019 18:52:23


    3061/    10A3 : 13                  		inc	de
    3062/    10A4 : 1A                  		ld	a, (de)		; get parameter
    3063/    10A5 : FE FF               		cp	0FFh
    3064/    10A7 : 20 06               		jr	nz, loc_FAF	; if parameter != $FF
    3065/    10A9 : AF                  		xor	a		; if parameter = $FF, clear channel byte 1F
    3066/    10AA : DD 77 1F            		ld	(ix+1Fh), a
    3067/    10AD : 13                  		inc	de
    3068/    10AE : C9                  		ret
    3069/    10AF :                     ; ---------------------------------------------------------------------------
    3070/    10AF :                     
    3071/    10AF :                     loc_FAF:				; CODE XREF: YM_SetSlideOrKeyRelease+4j
    3072/    10AF : FE 81               		cp	81h ; 'Ѓ'
    3073/    10B1 : 38 09               		jr	c, loc_FBC	; jump if a < 81
    3074/    10B3 : E6 7F               		and	7Fh ; ''
    3075/    10B5 : DD 77 1F            		ld	(ix+1Fh), a	; else,	put bits 6-0 in	channel	ram byte 1F
    3076/    10B8 : 13                  		inc	de
    3077/    10B9 : C9                  		ret
    3078/    10BA :                     ; End of function YM_SetSlideOrKeyRelease
    3079/    10BA :                     
    3080/    10BA :                     
    3081/    10BA :                     ; =============== S U B R O U T I N E =======================================
    3082/    10BA :                     
    3083/    10BA :                     
    3084/    10BA :                     SetRelease:				; CODE XREF: YM2_ParseChannel6Data+8Fp
    3085/    10BA :                     					; PSG_ParseToneData+63p
    3086/    10BA :                     					; PSG_ParseNoiseData+56p
    3087/    10BA : 13                  		inc	de		; point	to next	byte
    3088/    10BB : 1A                  		ld	a, (de)		; get next byte
    3089/    10BC :                     
    3090/    10BC :                     loc_FBC:				; CODE XREF: YM_SetSlideOrKeyRelease+Ej
    3091/    10BC : 4F                  		ld	c, a
    3092/    10BD : E6 80               		and	80h ; 'Ђ'
    3093/    10BF : DD 77 08            		ld	(ix+8),	a	; bit 7	goes to	channel	data byte 8
    3094/    10C2 : 79                  		ld	a, c
    3095/    10C3 : E6 7F               		and	7Fh ; ''
    3096/    10C5 : DD 77 06            		ld	(ix+6),	a	; bits 6-0 go to channel data byte 6
    3097/    10C8 : 13                  		inc	de		; point	to next	byte
    3098/    10C9 : C9                  		ret
    3099/    10CA :                     ; End of function SetRelease
    3100/    10CA :                     
    3101/    10CA :                     
    3102/    10CA :                     ; =============== S U B R O U T I N E =======================================
    3103/    10CA :                     
    3104/    10CA :                     
    3105/    10CA :                     LoadVibrato:				; CODE XREF: YM1_ParseData+A6p
    3106/    10CA :                     					; YM2_ParseData+D4p
    3107/    10CA :                     					; PSG_ParseToneData+6Dp
    3108/    10CA : 13                  		inc	de		; affects channel ram bytes 09,	0B and 0C
    3109/    10CB : 1A                  		ld	a, (de)		; get next parameter : $2C
    3110/    10CC : F5                  		push	af
    3111/    10CD : 1F                  		rra
    3112/    10CE : 1F                  		rra
    3113/    10CF : 1F                  		rra
    3114/    10D0 : E6 1E               		and	1Eh		; keep nibble 1	only, multiplied by 2 -> $04
    3115/    10D2 : 21 1A 14            		ld	hl, pt_PITCH_EFFECTS ; The pitch effects mostly	are vibratos, but also effects that make pitch go up or	down indefinitely
    3116/    10D5 : 06 00               		ld	b, 0
    3117/    10D7 : 4F                  		ld	c, a
    3118/    10D8 : 09                  		add	hl, bc		; point	to the corresponding pointer
    3119/    10D9 : 7E                  		ld	a, (hl)
    3120/    10DA : 23                  		inc	hl
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 53 - 8/17/2019 18:52:23


    3121/    10DB : 66                  		ld	h, (hl)
    3122/    10DC : DD 77 0B            		ld	(ix+0Bh), a
    3123/    10DF : 7C                  		ld	a, h
    3124/    10E0 : DD 77 0C            		ld	(ix+0Ch), a	; channel ram bytes B-C	= 4th pointer
    3125/    10E3 : F1                  		pop	af
    3126/    10E4 : 17                  		rla
    3127/    10E5 : E6 1E               		and	1Eh		; get nibble 2 only, multiplied	by 2 ->	$18
    3128/    10E7 : 28 01               		jr	z, loc_FEA
    3129/    10E9 : 3D                  		dec	a		; $17
    3130/    10EA :                     
    3131/    10EA :                     loc_FEA:				; CODE XREF: LoadVibrato+1Dj
    3132/    10EA : DD 77 09            		ld	(ix+9),	a
    3133/    10ED : 13                  		inc	de
    3134/    10EE : C9                  		ret
    3135/    10EF :                     ; End of function LoadVibrato
    3136/    10EF :                     
    3137/    10EF :                     
    3138/    10EF :                     ; =============== S U B R O U T I N E =======================================
    3139/    10EF :                     
    3140/    10EF :                     
    3141/    10EF :                     YM1_SetStereo:				; CODE XREF: YM1_ParseData+B0p
    3142/    10EF :                     
    3143/    10EF :                     ; FUNCTION CHUNK AT 1016 SIZE 00000009 BYTES
    3144/    10EF :                     
    3145/    10EF : 13                  		inc	de
    3146/    10F0 : 1A                  		ld	a, (de)
    3147/    10F1 : CB 47               		bit	0, a
    3148/    10F3 : C0                  		ret	nz	; if bit 0 of pointed value is set to 1	: if FMS value = 1 or 3	?
    3149/    10F4 : E6 C0               		and	0C0h ; 'А'      ; else
    3150/    10F6 : DD 77 1E            		ld	(ix+1Eh), a
    3151/    10F9 : 4F                  		ld	c, a
    3152/    10FA : 06 B4               		ld	b, 0B4h	; 'ґ'
    3153/    10FC : FD 7E 00            		ld	a, (iy+0)
    3154/    10FF : 80                  		add	a, b
    3155/    1100 : 47                  		ld	b, a		; set proper register according	to currently processed channel
    3156/    1101 : 13                  		inc	de		; point	to next	pointed	rom byte
    3157/    1102 :                     
    3158/    1102 :                     					; conditionnal input to implement here !
    3159/    1102 :                     
    3160/    1102 : C3 66 05            		jp	YM1_ConditionnalInput
    3161/    1105 :                     ; End of function YM1_SetStereo
    3162/    1105 :                     
    3163/    1105 :                     
    3164/    1105 :                     ; =============== S U B R O U T I N E =======================================
    3165/    1105 :                     
    3166/    1105 :                     
    3167/    1105 :                     YM2_SetStereo:				; CODE XREF: YM2_ParseData+DEp
    3168/    1105 :                     					; YM2_ParseChannel6Data+99p
    3169/    1105 : 13                  		inc	de
    3170/    1106 : 1A                  		ld	a, (de)
    3171/    1107 : E6 C0               		and	0C0h ; 'А'
    3172/    1109 : DD 77 1E            		ld	(ix+1Eh), a
    3173/    110C : 4F                  		ld	c, a
    3174/    110D : 06 B4               		ld	b, 0B4h	; 'ґ'
    3175/    110F : FD 7E 00            		ld	a, (iy+0)
    3176/    1112 : 80                  		add	a, b
    3177/    1113 : 47                  		ld	b, a
    3178/    1114 : 13                  		inc	de
    3179/    1115 : C3 93 05            		jp	YM2_ConditionalInput
    3180/    1118 :                     ; End of function YM2_SetStereo
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 54 - 8/17/2019 18:52:23


    3181/    1118 :                     
    3182/    1118 :                     ; =============== S U B R O U T I N E =======================================
    3183/    1118 :                     
    3184/    1118 :                     
    3185/    1118 :                     LoadNoteShift:				; CODE XREF: YM1_ParseData+BAp
    3186/    1118 :                     					; YM2_ParseData+E8p
    3187/    1118 :                     					; PSG_ParseToneData+87p
    3188/    1118 : 13                  		inc	de
    3189/    1119 : 1A                  		ld	a, (de)
    3190/    111A : E6 8F               		and	8Fh ; 'Џ'
    3191/    111C : CB 7F               		bit	7, a
    3192/    111E : 28 02               		jr	z, loc_1029
    3193/    1120 : F6 F0               		or	0F0h ; 'р'
    3194/    1122 :                     
    3195/    1122 :                     loc_1029:				; CODE XREF: LoadNoteShift+6j
    3196/    1122 : DD 77 1C            		ld	(ix+1Ch), a	; byte 1C = 0x or Fx depending on byte 7 : value of note shift
    3197/    1125 : 1A                  		ld	a, (de)
    3198/    1126 : 0F                  		rrca
    3199/    1127 : 0F                  		rrca
    3200/    1128 : 0F                  		rrca
    3201/    1129 : E6 0E               		and	0Eh		; just keep bytes 6-5-4	multiplied by 2
    3202/    112B : DD 77 1D            		ld	(ix+1Dh), a	; value	of frequeny shift
    3203/    112E : 13                  		inc	de
    3204/    112F : C9                  		ret
    3205/    1130 :                     ; End of function LoadNoteShift
    3206/    1130 :                     
    3207/    1130 :                     
    3208/    1130 :                     ; =============== S U B R O U T I N E =======================================
    3209/    1130 :                     
    3210/    1130 :                     
    3211/    1130 :                     ParseLoopCommand:			; CODE XREF: YM1_ParseData+C4p
    3212/    1130 :                     					; YM2_ParseData+F2p
    3213/    1130 :                     					; YM2_ParseChannel6Data+A3p
    3214/    1130 :                     					; PSG_ParseToneData+91p
    3215/    1130 :                     					; PSG_ParseNoiseData+60p
    3216/    1130 : 13                  		inc	de
    3217/    1131 : 1A                  		ld	a, (de)		; get first byte parameter
    3218/    1132 : 47                  		ld	b, a
    3219/    1133 : 13                  		inc	de		; point	to next	data byte
    3220/    1134 : 07                  		rlca
    3221/    1135 : 07                  		rlca
    3222/    1136 : 07                  		rlca
    3223/    1137 : E6 07               		and	7		; keep bits 7-6-5. It must be a	subcommand
    3224/    1139 : 20 07               		jr	nz, loc_1049
    3225/    113B : DD 73 13            		ld	(ix+13h), e	; if bits 7-6-5	= 0, put next data byte	offset into channel bytes 13-14
    3226/    113E : DD 72 14            		ld	(ix+14h), d	; this must be a loop start !
    3227/    1141 : C9                  		ret
    3228/    1142 :                     ; ---------------------------------------------------------------------------
    3229/    1142 :                     
    3230/    1142 :                     loc_1049:				; CODE XREF: ParseLoopCommand+9j
    3231/    1142 : FE 01               		cp	1		; if bits 7-6-5	= 1 ...	beginning of a loop ?
    3232/    1144 : 20 0E               		jr	nz, loc_105B
    3233/    1146 : DD 73 15            		ld	(ix+15h), e	; put next data	byte offset in 15-16
    3234/    1149 : DD 72 16            		ld	(ix+16h), d	; is it	also a loop start ? like there could be	a loop in another loop ? Two loops managed independently ?
    3235/    114C : AF                  		xor	a
    3236/    114D : DD 77 1A            		ld	(ix+1Ah), a	; clear	1A-1B
    3237/    1150 : DD 77 1B            		ld	(ix+1Bh), a
    3238/    1153 : C9                  		ret
    3239/    1154 :                     ; ---------------------------------------------------------------------------
    3240/    1154 :                     
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 55 - 8/17/2019 18:52:23


    3241/    1154 :                     loc_105B:				; CODE XREF: ParseLoopCommand+14j
    3242/    1154 : FE 02               		cp	2		; if bits 7-6-5	= 2
    3243/    1156 : 20 2A               		jr	nz, loc_1089
    3244/    1158 : DD 7E 1A            		ld	a, (ix+1Ah)
    3245/    115B : B7                  		or	a
    3246/    115C : 20 06               		jr	nz, loc_106B	; if (1A) != 0,	then it's not the first loop
    3247/    115E : 3E 01               		ld	a, 1		; if (1A) = 0, then put	1 instead. It means it's the first loop.
    3248/    1160 : DD 77 1A            		ld	(ix+1Ah), a
    3249/    1163 : C9                  		ret
    3250/    1164 :                     ; ---------------------------------------------------------------------------
    3251/    1164 :                     
    3252/    1164 :                     loc_106B:				; CODE XREF: ParseLoopCommand+2Cj
    3253/    1164 :                     					; ParseLoopCommand+45j
    3254/    1164 :                     					; ParseLoopCommand+48j
    3255/    1164 :                     					; ParseLoopCommand+4Dj
    3256/    1164 : 1A                  		ld	a, (de)		; a = $F0
    3257/    1165 : 47                  		ld	b, a		; b = $F0
    3258/    1166 : 13                  		inc	de
    3259/    1167 : 1A                  		ld	a, (de)		; a = $D8
    3260/    1168 : 4F                  		ld	c, a		; c = $D8
    3261/    1169 : 13                  		inc	de		; de points to a next F8 command
    3262/    116A : 78                  		ld	a, b		; a = $F0
    3263/    116B : FE FF               		cp	0FFh
    3264/    116D : 28 10               		jr	z, loc_1086	; if first data	byte = FF, finish
    3265/    116F : FE F8               		cp	0F8h ; 'ш'
    3266/    1171 : 28 07               		jr	z, loc_1081	; if first data	byte = F8 (then	you have something like	F8, byte with bits 7-6-5 = 2, and F8 again ?)
    3267/    1173 : E6 80               		and	80h ; 'Ђ'
    3268/    1175 : 20 ED               		jr	nz, loc_106B	; if bit 7 of first data byte =	1, start process again
    3269/    1177 : 1B                  		dec	de		; else,	start process again but	point one byte backward	first ... wow ... o_O
    3270/    1178 : 18 EA               		jr	loc_106B	; a = $F0
    3271/    117A :                     ; ---------------------------------------------------------------------------
    3272/    117A :                     
    3273/    117A :                     loc_1081:				; CODE XREF: ParseLoopCommand+41j
    3274/    117A : 79                  		ld	a, c
    3275/    117B : FE 60               		cp	60h ; '`'
    3276/    117D : 20 E5               		jr	nz, loc_106B	; if a = 60, finish, else start	process	again ... so it	expects	loop command 3 to get out of here !
    3277/    117F :                     
    3278/    117F :                     loc_1086:				; CODE XREF: ParseLoopCommand+3Dj
    3279/    117F :                     					; ParseLoopCommand+6Bj
    3280/    117F :                     					; ParseLoopCommand+7Dj
    3281/    117F : 1B                  		dec	de
    3282/    1180 : 1B                  		dec	de
    3283/    1181 : C9                  		ret
    3284/    1182 :                     ; ---------------------------------------------------------------------------
    3285/    1182 :                     
    3286/    1182 :                     loc_1089:				; CODE XREF: ParseLoopCommand+26j
    3287/    1182 : FE 03               		cp	3		; if bits 7-6-5	= 3
    3288/    1184 : 20 29               		jr	nz, loc_10B6
    3289/    1186 : DD 7E 1B            		ld	a, (ix+1Bh)
    3290/    1189 : B7                  		or	a
    3291/    118A : 20 06               		jr	nz, loc_1099	; same idea as command 2
    3292/    118C : 3E 01               		ld	a, 1		; if (1B) = 0, then put	1 instead
    3293/    118E : DD 77 1B            		ld	(ix+1Bh), a
    3294/    1191 : C9                  		ret
    3295/    1192 :                     ; ---------------------------------------------------------------------------
    3296/    1192 :                     
    3297/    1192 :                     loc_1099:				; CODE XREF: ParseLoopCommand+5Aj
    3298/    1192 :                     					; ParseLoopCommand+73j
    3299/    1192 :                     					; ParseLoopCommand+76j
    3300/    1192 :                     					; ParseLoopCommand+7Bj
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 56 - 8/17/2019 18:52:23


    3301/    1192 : 1A                  		ld	a, (de)		; same idea as command 2
    3302/    1193 : 47                  		ld	b, a
    3303/    1194 : 13                  		inc	de
    3304/    1195 : 1A                  		ld	a, (de)
    3305/    1196 : 4F                  		ld	c, a
    3306/    1197 : 13                  		inc	de
    3307/    1198 : 78                  		ld	a, b
    3308/    1199 : FE FF               		cp	0FFh
    3309/    119B : 28 E2               		jr	z, loc_1086
    3310/    119D : FE F8               		cp	0F8h ; 'ш'
    3311/    119F : 28 07               		jr	z, loc_10AF
    3312/    11A1 : E6 80               		and	80h ; 'Ђ'
    3313/    11A3 : 20 ED               		jr	nz, loc_1099	; same idea as command 2
    3314/    11A5 : 1B                  		dec	de
    3315/    11A6 : 18 EA               		jr	loc_1099	; same idea as command 2
    3316/    11A8 :                     ; ---------------------------------------------------------------------------
    3317/    11A8 :                     
    3318/    11A8 :                     loc_10AF:				; CODE XREF: ParseLoopCommand+6Fj
    3319/    11A8 : 79                  		ld	a, c
    3320/    11A9 : FE 80               		cp	80h ; 'Ђ'
    3321/    11AB : 20 E5               		jr	nz, loc_1099	; expects command 4 to get out of here
    3322/    11AD : 18 D0               		jr	loc_1086
    3323/    11AF :                     ; ---------------------------------------------------------------------------
    3324/    11AF :                     
    3325/    11AF :                     loc_10B6:				; CODE XREF: ParseLoopCommand+54j
    3326/    11AF : FE 04               		cp	4		; if bits 7-6-5	= 4 end	of command 3
    3327/    11B1 : 20 01               		jr	nz, loc_10BB
    3328/    11B3 : C9                  		ret			; if command 4,	just return ! it's just here to stop command 3
    3329/    11B4 :                     ; ---------------------------------------------------------------------------
    3330/    11B4 :                     
    3331/    11B4 :                     loc_10BB:				; CODE XREF: ParseLoopCommand+81j
    3332/    11B4 : FE 05               		cp	5		; if bits 7-6-5	= 5 ...	go back	to the beginning of a loop ?
    3333/    11B6 : 20 12               		jr	nz, loc_10D1
    3334/    11B8 : CB 40               		bit	0, b
    3335/    11BA : 20 07               		jr	nz, loc_10CA	; if bit 0 = 1 (value A1)
    3336/    11BC : DD 5E 15            		ld	e, (ix+15h)	; else (value A0), point back to offset	saved in 15-16
    3337/    11BF : DD 56 16            		ld	d, (ix+16h)
    3338/    11C2 : C9                  		ret
    3339/    11C3 :                     ; ---------------------------------------------------------------------------
    3340/    11C3 :                     
    3341/    11C3 :                     loc_10CA:				; CODE XREF: ParseLoopCommand+8Aj
    3342/    11C3 : DD 5E 13            		ld	e, (ix+13h)	; point	back to	offset saved in	13-14
    3343/    11C6 : DD 56 14            		ld	d, (ix+14h)
    3344/    11C9 : C9                  		ret
    3345/    11CA :                     ; ---------------------------------------------------------------------------
    3346/    11CA :                     
    3347/    11CA :                     loc_10D1:				; CODE XREF: ParseLoopCommand+86j
    3348/    11CA : FE 06               		cp	6		; if bits 7-6-5	= 6 : initiate a loop repeated x times,	x being	bits 4-0
    3349/    11CC : 20 0E               		jr	nz, loc_10E3	; else,	bits 7-6-5 = 7
    3350/    11CE : DD 73 17            		ld	(ix+17h), e	; put next data	byte offset in 17-18
    3351/    11D1 : DD 72 18            		ld	(ix+18h), d
    3352/    11D4 : 78                  		ld	a, b
    3353/    11D5 : E6 1F               		and	1Fh		; just keep parameter
    3354/    11D7 : 3C                  		inc	a		; increment it
    3355/    11D8 : DD 77 19            		ld	(ix+19h), a	; and store it in 19
    3356/    11DB : C9                  		ret
    3357/    11DC :                     ; ---------------------------------------------------------------------------
    3358/    11DC :                     
    3359/    11DC :                     loc_10E3:				; CODE XREF: ParseLoopCommand+9Cj
    3360/    11DC : DD 35 19            		dec	(ix+19h)	; decrement loop counter
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 57 - 8/17/2019 18:52:23


    3361/    11DF : C8                  		ret	z		; return if counter reached 0
    3362/    11E0 : DD 5E 17            		ld	e, (ix+17h)	; go back to the beginning of the loop
    3363/    11E3 : DD 56 18            		ld	d, (ix+18h)
    3364/    11E6 : C9                  		ret
    3365/    11E7 :                     ; End of function ParseLoopCommand
    3366/    11E7 :                     
    3367/    11E7 :                     ; =============== S U B R O U T I N E =======================================
    3368/    11E7 :                     
    3369/    11E7 :                     Fade_Out:
    3370/    11E7 : 3E 12               		ld	a, 12h		; set a	fade out period	length of $12 YM timer overflows
    3371/    11E9 : 32 47 15            		ld	(FADE_OUT_LENGTH), a ; number of YM Timer overflows to handle before incrementing the fade out counter
    3372/    11EC : 3E 01               		ld	a, 1
    3373/    11EE : 32 43 15            		ld	(CURRENTLY_FADING_OUT),	a ; set	to 01 when a fade out operation	is being executed
    3374/    11F1 : 3A 47 15            		ld	a, (FADE_OUT_LENGTH) ; number of YM Timer overflows to handle before incrementing the fade out counter
    3375/    11F4 : 32 48 15            		ld	(FADE_OUT_TIMER), a ; Starts with fade out length value, decrements at each YM Timer overflow. set to $63 while	loading	music
    3376/    11F7 : C9                  		ret
    3377/    11F8 :                     ; End of function Fade_Out
    3378/    11F8 :                     
    3379/    11F8 :                     ; =============== S U B R O U T I N E =======================================
    3380/    11F8 :                     
    3381/    11F8 :                     YM_SetTimer:
    3382/    11F8 : C5                  		push	bc
    3383/    11F9 : 06 26               		ld	b, 26h ; '&'    ; YM Register : Timer B
    3384/    11FB : 3A F9 1F            		ld	a, (YM_TIMER_VALUE) ; stores the timer value to	send to	YM
    3385/    11FE : 4F                  		ld	c, a
    3386/    11FF :                     
    3387/    11FF :                     					; Conditional input to implement here (maybe!) !
    3388/    11FF :                     
    3389/    11FF : CD 83 05            		call	YM1_Input
    3390/    1202 : C1                  		pop	bc
    3391/    1203 : C9                  		ret
    3392/    1204 :                     ; End of function YM_SetTimer
    3393/    1204 :                     
    3394/    1204 :                     ; =============== S U B R O U T I N E =======================================
    3395/    1204 :                     
    3396/    1204 :                     ;TODO save music YM timer too
    3397/    1204 :                     
    3398/    1204 :                     Save_Music:
    3399/    1204 : DD E5               		push	ix
    3400/    1206 : FD E5               		push	iy
    3401/    1208 : C5                  		push	bc
    3402/    1209 : D5                  		push	de
    3403/    120A : 3A F9 1F            		ld	a, (YM_TIMER_VALUE)
    3404/    120D : 32 FA 1F            		ld	(SAVED_YM_TIMER_VALUE), a
    3405/    1210 : DD 21 10 18         		ld	ix, MUSIC_CHANNEL_YM1
    3406/    1214 : FD 21 D0 1B         		ld	iy, SAVED_MUSIC_CHANNEL_YM1
    3407/    1218 : 06 00               		ld	b, 0h
    3408/    121A : 0E 10               		ld	c, 010h
    3409/    121C : 16 0A               		ld	d, 0Ah
    3410/    121E :                     
    3411/    121E :                     Save_Music_Loop:
    3412/    121E : CD 64 12            		call	Copy_Channel_Data
    3413/    1221 : DD 09               		add	ix, bc
    3414/    1223 : FD 09               		add	iy, bc
    3415/    1225 : 15                  		dec	d
    3416/    1226 : 20 F6               		jr	nz, Save_Music_Loop
    3417/    1228 : D1                  		pop	de
    3418/    1229 : C1                  		pop	bc
    3419/    122A : FD E1               		pop	iy
    3420/    122C : DD E1               		pop	ix
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 58 - 8/17/2019 18:52:23


    3421/    122E : C9                  		ret
    3422/    122F :                     ; End of function Save_Music
    3423/    122F :                     
    3424/    122F :                     ; =============== S U B R O U T I N E =======================================
    3425/    122F :                     
    3426/    122F :                     ;TODO restore YM timer too
    3427/    122F :                     
    3428/    122F :                     Resume_Music:
    3429/    122F : DD E5               		push	ix
    3430/    1231 : FD E5               		push	iy
    3431/    1233 : C5                  		push	bc
    3432/    1234 : D5                  		push	de
    3433/    1235 : CD 7B 03            		call	StopMusic
    3434/    1238 : AF                  		xor	a
    3435/    1239 : 3A FA 1F            		ld	a, (SAVED_YM_TIMER_VALUE)
    3436/    123C : 32 F9 1F            		ld	(YM_TIMER_VALUE), a
    3437/    123F : CD F8 11            		call	YM_SetTimer
    3438/    1242 : 32 52 15            		ld	(FADE_IN_TIMER), a ; reset fade	in timer
    3439/    1245 : DD 21 D0 1B         		ld	ix, SAVED_MUSIC_CHANNEL_YM1
    3440/    1249 : FD 21 10 18         		ld	iy, MUSIC_CHANNEL_YM1
    3441/    124D : 06 00               		ld	b, 0h
    3442/    124F : 0E 10               		ld	c, 010h
    3443/    1251 : 16 0A               		ld	d, 0Ah
    3444/    1253 :                     
    3445/    1253 :                     Resume_Music_Loop:
    3446/    1253 : CD 64 12            		call	Copy_Channel_Data
    3447/    1256 : DD 09               		add	ix, bc
    3448/    1258 : FD 09               		add	iy, bc
    3449/    125A : 15                  		dec	d
    3450/    125B : 20 F6               		jr	nz, Resume_Music_Loop
    3451/    125D : D1                  		pop	de
    3452/    125E : C1                  		pop	bc
    3453/    125F : FD E1               		pop	iy
    3454/    1261 : DD E1               		pop	ix
    3455/    1263 : C9                  		ret
    3456/    1264 :                     ; End of function Resume_Music
    3457/    1264 :                     
    3458/    1264 :                     ; =============== S U B R O U T I N E =======================================
    3459/    1264 :                     
    3460/    1264 :                     Copy_Channel_Data:
    3461/    1264 : D5                  		push	de
    3462/    1265 : 16 10               		ld	d, 010h
    3463/    1267 :                     
    3464/    1267 :                     Copy_Channel_Data_Loop:
    3465/    1267 : CD 72 12            		call	Copy_Byte
    3466/    126A : CD 72 12            		call	Copy_Byte
    3467/    126D : 15                  		dec	d
    3468/    126E : 20 F7               		jr	nz, Copy_Channel_Data_Loop
    3469/    1270 : D1                  		pop	de
    3470/    1271 : C9                  		ret
    3471/    1272 :                     ; End of function Copy_Byte
    3472/    1272 :                     
    3473/    1272 :                     ; =============== S U B R O U T I N E =======================================
    3474/    1272 :                     
    3475/    1272 :                     Copy_Byte:
    3476/    1272 : DD 7E 00            		ld	a, (ix)
    3477/    1275 : FD 77 00            		ld	(iy), a
    3478/    1278 : DD 23               		inc	ix
    3479/    127A : FD 23               		inc	iy
    3480/    127C : C9                  		ret
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 59 - 8/17/2019 18:52:23


    3481/    127D :                     ; End of function Copy_Byte
    3482/    127D :                     
    3483/    127D :                     ; =============== S U B R O U T I N E =======================================
    3484/    127D :                     
    3485/    127D :                     SendDacByte:
    3486/    127D : F5                  		push	af
    3487/    127E : C5                  		push	bc
    3488/    127F : D5                  		push	de
    3489/    1280 : E5                  		push	hl
    3490/    1281 : 06 2A               		ld	b, 2Ah ; '*'    ; YM Register : DAC data
    3491/    1283 : 3A F6 1F            		ld	a, (DAC_REMAINING_LENGTH)
    3492/    1286 : 57                  		ld	d, a
    3493/    1287 : 3A F7 1F            		ld	a, (DAC_REMAINING_LENGTH+1)
    3494/    128A : 5F                  		ld	e, a
    3495/    128B : 7A                  		ld	a, d		; check	remaining sound	length
    3496/    128C : B3                  		or	e
    3497/    128D : CA D5 12            		jp	z, SendDacByte_ret
    3498/    1290 : 3A 4C 15            		ld	a, (DAC_BANK)
    3499/    1293 : CD 43 01            		call	LoadAnyBank
    3500/    1296 : 3A F4 1F            		ld	a, (DAC_LAST_OFFSET)
    3501/    1299 : 67                  		ld	h, a
    3502/    129A : 3A F5 1F            		ld	a, (DAC_LAST_OFFSET+1)
    3503/    129D : 6F                  		ld	l, a
    3504/    129E : 4E                  		ld	c, (hl)		; get next DAC sample byte. It's 8-bit PCM
    3505/    129F : 23                  		inc	hl
    3506/    12A0 :                     
    3507/    12A0 :                     SendDacByte_YmRequest:
    3508/    12A0 : 3A 00 40            		ld	a, (YM1_REGISTER)
    3509/    12A3 : E6 80               		and	80h ; 'Ђ'
    3510/    12A5 : 20 F9               		jr	nz, SendDacByte_YmRequest	; loop as long as YM busy
    3511/    12A7 : 78                  		ld	a, b
    3512/    12A8 : 32 00 40            		ld	(YM1_REGISTER),	a
    3513/    12AB : 79                  		ld	a, c
    3514/    12AC : 32 01 40            		ld	(YM1_DATA), a	; transmit DAC Data
    3515/    12AF : 1B                  		dec	de		; decrement remaining sound length to play
    3516/    12B0 : 7C                  		ld	a, h
    3517/    12B1 : 32 F4 1F            		ld	(DAC_LAST_OFFSET), a
    3518/    12B4 : 7D                  		ld	a, l
    3519/    12B5 : 32 F5 1F            		ld	(DAC_LAST_OFFSET+1), a
    3520/    12B8 : 7A                  		ld	a, d
    3521/    12B9 : 32 F6 1F            		ld	(DAC_REMAINING_LENGTH), a
    3522/    12BC : 7B                  		ld	a, e
    3523/    12BD : 32 F7 1F            		ld	(DAC_REMAINING_LENGTH+1), a
    3524/    12C0 : 3A 44 15            		ld	a, (CURRENTLY_MANAGING_SFX)
    3525/    12C3 : B7                  		or	a
    3526/    12C4 : C2 D0 12            		jp	nz, SendDacByte_ldSfxBk
    3527/    12C7 : 3A 4D 15            		ld	a, (MUSIC_BANK)
    3528/    12CA : CD 43 01            		call	LoadAnyBank
    3529/    12CD : C3 D5 12            		jp	SendDacByte_ret
    3530/    12D0 :                     
    3531/    12D0 :                     SendDacByte_ldSfxBk:
    3532/    12D0 : 3E 00               		ld	a, SFX_BANK
    3533/    12D2 : CD 43 01            		call	LoadAnyBank
    3534/    12D5 :                     
    3535/    12D5 :                     SendDacByte_ret:
    3536/    12D5 : E1                  		pop	hl
    3537/    12D6 : D1                  		pop	de
    3538/    12D7 : C1                  		pop	bc
    3539/    12D8 : F1                  		pop	af
    3540/    12D9 : C9                  		ret
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 60 - 8/17/2019 18:52:23


    3541/    12DA :                     ; End of function Copy_Byte
    3542/    12DA :                     
    3543/    12DA :                     ; ---------------------------------------------------------------------------
    3544/    12DA : 8A                  		db 08Ah
    3545/    12DB : 0A                  t_YM_FREQUENCIES:db 0Ah			; DATA XREF: YM1_ParseData+DDo
    3546/    12DC :                     					; YM2_ParseData+10Bo
    3547/    12DC :                     					; these	words are not pointers,	they are the two frequency bytes to send to YM for a given note
    3548/    12DC : B1 0A               		dw 0AB1h
    3549/    12DE : DA 0A               		dw 0ADAh
    3550/    12E0 : 06 0B               		dw 0B06h
    3551/    12E2 : 33 0B               		dw 0B33h
    3552/    12E4 : 64 0B               		dw 0B64h
    3553/    12E6 : 98 0B               		dw 0B98h
    3554/    12E8 : CE 0B               		dw 0BCEh
    3555/    12EA : 09 0C               		dw 0C09h
    3556/    12EC : 46 0C               		dw 0C46h
    3557/    12EE : 87 0C               		dw 0C87h
    3558/    12F0 : 66 12               		dw 1266h
    3559/    12F2 : 8A 12               		dw 128Ah
    3560/    12F4 : B1 12               		dw 12B1h
    3561/    12F6 : DA 12               		dw 12DAh
    3562/    12F8 : 06 13               		dw 1306h
    3563/    12FA : 33 13               		dw 1333h
    3564/    12FC : 64 13               		dw 1364h
    3565/    12FE : 98 13               		dw 1398h
    3566/    1300 : CE 13               		dw 13CEh
    3567/    1302 : 09 14               		dw 1409h
    3568/    1304 : 46 14               		dw 1446h
    3569/    1306 : 87 14               		dw 1487h
    3570/    1308 : 66 1A               		dw 1A66h
    3571/    130A : 8A 1A               		dw 1A8Ah
    3572/    130C : B1 1A               		dw 1AB1h
    3573/    130E : DA 1A               		dw 1ADAh
    3574/    1310 : 06 1B               		dw 1B06h
    3575/    1312 : 33 1B               		dw 1B33h
    3576/    1314 : 64 1B               		dw 1B64h
    3577/    1316 : 98 1B               		dw 1B98h
    3578/    1318 : CE 1B               		dw 1BCEh
    3579/    131A : 09 1C               		dw 1C09h
    3580/    131C : 46 1C               		dw 1C46h
    3581/    131E : 87 1C               		dw 1C87h
    3582/    1320 : 66 22               		dw 2266h
    3583/    1322 : 8A 22               		dw 228Ah
    3584/    1324 : B1 22               		dw 22B1h
    3585/    1326 : DA 22               		dw 22DAh
    3586/    1328 : 06 23               		dw 2306h
    3587/    132A : 33 23               		dw 2333h
    3588/    132C : 64 23               		dw 2364h
    3589/    132E : 98 23               		dw 2398h
    3590/    1330 : CE 23               		dw 23CEh
    3591/    1332 : 09 24               		dw 2409h
    3592/    1334 : 46 24               		dw 2446h
    3593/    1336 : 87 24               		dw 2487h
    3594/    1338 : 66 2A               		dw 2A66h
    3595/    133A : 8A 2A               		dw 2A8Ah
    3596/    133C : B1 2A               		dw 2AB1h
    3597/    133E : DA 2A               		dw 2ADAh
    3598/    1340 : 06 2B               		dw 2B06h
    3599/    1342 : 33 2B               		dw 2B33h
    3600/    1344 : 64 2B               		dw 2B64h
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 61 - 8/17/2019 18:52:23


    3601/    1346 : 98 2B               		dw 2B98h
    3602/    1348 : CE 2B               		dw 2BCEh
    3603/    134A : 09 2C               		dw 2C09h
    3604/    134C : 46 2C               		dw 2C46h
    3605/    134E : 87 2C               		dw 2C87h
    3606/    1350 : 66 32               		dw 3266h
    3607/    1352 : 8A 32               		dw 328Ah
    3608/    1354 : B1 32               		dw 32B1h
    3609/    1356 : DA 32               		dw 32DAh
    3610/    1358 : 06 33               		dw 3306h
    3611/    135A : 33 33               		dw 3333h
    3612/    135C : 64 33               		dw 3364h
    3613/    135E : 98 33               		dw 3398h
    3614/    1360 : CE 33               		dw 33CEh
    3615/    1362 : 09 34               		dw 3409h
    3616/    1364 : 46 34               		dw 3446h
    3617/    1366 : 87 34               		dw 3487h
    3618/    1368 : 66 3A               		dw 3A66h
    3619/    136A : 8A 3A               		dw 3A8Ah
    3620/    136C : B1 3A               		dw 3AB1h
    3621/    136E : DA 3A               		dw 3ADAh
    3622/    1370 : 06 3B               		dw 3B06h
    3623/    1372 : 33 3B               		dw 3B33h
    3624/    1374 : 64 3B               		dw 3B64h
    3625/    1376 : 98 3B               		dw 3B98h
    3626/    1378 : CE 3B               		dw 3BCEh
    3627/    137A : 09 3C               		dw 3C09h
    3628/    137C : 46 3C               		dw 3C46h
    3629/    137E : 87 3C               		dw 3C87h
    3630/    1380 : CB 3C               		dw 3CCBh
    3631/    1382 : EF 03               t_PSG_FREQUENCIES:dw 3EFh		; DATA XREF: PSG_ParseToneData+C5o
    3632/    1384 :                     					; PSG Frequency	table, same idea as YM Frequency table but for PSG Tone	Channels
    3633/    1384 : B6 03               		dw 3B6h
    3634/    1386 : 81 03               		dw 381h
    3635/    1388 : 4F 03               		dw 34Fh
    3636/    138A : 20 03               		dw 320h
    3637/    138C : F2 02               		dw 2F2h
    3638/    138E : C8 02               		dw 2C8h
    3639/    1390 : A0 02               		dw 2A0h
    3640/    1392 : 7A 02               		dw 27Ah
    3641/    1394 : 57 02               		dw 257h
    3642/    1396 : 35 02               		dw 235h
    3643/    1398 : 15 02               		dw 215h
    3644/    139A : F7 01               		dw 1F7h
    3645/    139C : DC 01               		dw 1DCh
    3646/    139E : C1 01               		dw 1C1h
    3647/    13A0 : A7 01               		dw 1A7h
    3648/    13A2 : 8F 01               		dw 18Fh
    3649/    13A4 : 79 01               		dw 179h
    3650/    13A6 : 64 01               		dw 164h
    3651/    13A8 : 50 01               		dw 150h
    3652/    13AA : 3D 01               		dw 13Dh
    3653/    13AC : 2B 01               		dw 12Bh
    3654/    13AE : 1A 01               		dw 11Ah
    3655/    13B0 : 0B 01               		dw 10Bh
    3656/    13B2 : FC 00               		dw 0FCh
    3657/    13B4 : EE 00               		dw 0EEh
    3658/    13B6 : E1 00               		dw 0E1h
    3659/    13B8 : D4 00               		dw 0D4h
    3660/    13BA : C8 00               		dw 0C8h
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 62 - 8/17/2019 18:52:23


    3661/    13BC : BD 00               		dw 0BDh
    3662/    13BE : B2 00               		dw 0B2h
    3663/    13C0 : A8 00               		dw 0A8h
    3664/    13C2 : 9F 00               		dw 9Fh
    3665/    13C4 : 96 00               		dw 96h
    3666/    13C6 : 8D 00               		dw 8Dh
    3667/    13C8 : 85 00               		dw 85h
    3668/    13CA : 7E 00               		dw 7Eh
    3669/    13CC : 77 00               		dw 77h
    3670/    13CE : 70 00               		dw 70h
    3671/    13D0 : 6A 00               		dw 6Ah
    3672/    13D2 : 64 00               		dw 64h
    3673/    13D4 : 5E 00               		dw 5Eh
    3674/    13D6 : 59 00               		dw 59h
    3675/    13D8 : 54 00               		dw 54h
    3676/    13DA : 4F 00               		dw 4Fh
    3677/    13DC : 4B 00               		dw 4Bh
    3678/    13DE : 47 00               		dw 47h
    3679/    13E0 : 43 00               		dw 43h
    3680/    13E2 : 3F 00               		dw 3Fh
    3681/    13E4 : 3B 00               		dw 3Bh
    3682/    13E6 : 38 00               		dw 38h
    3683/    13E8 : 35 00               		dw 35h
    3684/    13EA : 32 00               		dw 32h
    3685/    13EC : 2F 00               		dw 2Fh
    3686/    13EE : 2C 00               		dw 2Ch
    3687/    13F0 : 2A 00               		dw 2Ah
    3688/    13F2 : 28 00               		dw 28h
    3689/    13F4 : 25 00               		dw 25h
    3690/    13F6 : 23 00               		dw 23h
    3691/    13F8 : 22 00               		dw 22h
    3692/    13FA : 1F 00               		dw 1Fh
    3693/    13FC : 1D 00               		dw 1Dh
    3694/    13FE : 1C 00               		dw 1Ch
    3695/    1400 : 1B 00               		dw 1Bh
    3696/    1402 : 70                  t_YM_LEVELS:	db 70h			; DATA XREF: YM1_LoadInstrument+58o
    3697/    1403 :                     					; YM2_LoadInstrument+63o
    3698/    1403 : 60                  		db 60h			; this table contains the actual YM level values corresponding
    3699/    1404 : 50                  		db 50h			; to the 16 possible values of the sound engine
    3700/    1405 : 40                  		db 40h			; First	value being almost YM's min level,
    3701/    1406 : 38                  		db 38h			; and last value being almost YM's max level
    3702/    1407 : 30                  		db 30h
    3703/    1408 : 2A                  		db 2Ah
    3704/    1409 : 26                  		db 26h
    3705/    140A : 20                  		db 20h
    3706/    140B : 1C                  		db 1Ch
    3707/    140C : 18                  		db 18h
    3708/    140D : 14                  		db 14h
    3709/    140E : 10                  		db 10h
    3710/    140F : 0B                  		db 0Bh
    3711/    1410 : 08                  		db  8
    3712/    1411 : 04                  		db  4
    3713/    1412 : 08                  t_SLOTS_PER_ALGO:db 8			; DATA XREF: YM1_LoadInstrument+61o
    3714/    1413 :                     					; YM2_LoadInstrument+6Co
    3715/    1413 : 08                  		db  8
    3716/    1414 : 08                  		db  8			; table	used to	know which operators have to be	affected by the	channel's level
    3717/    1415 : 08                  		db  8			; bit 0	related	to operator 1, bit 1 to	operator 2 etc ...
    3718/    1416 : 0C                  		db 0Ch			; if 0,	then operator is not a slot, so	use the	instrument's original level value
    3719/    1417 : 0E                  		db 0Eh			; if 1,	then operator is a slot, so use	channel	level value
    3720/    1418 : 0E                  		db 0Eh
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 63 - 8/17/2019 18:52:23


    3721/    1419 : 0F                  		db 0Fh
    3722/    141A : 3A 14               pt_PITCH_EFFECTS:dw byte_126B		; DATA XREF: LoadVibrato+8o
    3723/    141C :                     					; The pitch effects mostly are vibratos, but also effects that make pitch go up	or down	indefinitely
    3724/    141C : 3C 14               		dw byte_126D		; vibrato 1
    3725/    141E : 41 14               		dw byte_1272
    3726/    1420 : 4C 14               		dw byte_127D
    3727/    1422 : 57 14               		dw byte_1288
    3728/    1424 : 62 14               		dw byte_1293
    3729/    1426 : 6D 14               		dw byte_129E		; from here, the pitch effects are not vibratos, they just make	the pitch constantly go	up or down
    3730/    1428 : 6F 14               		dw byte_12A0
    3731/    142A : 71 14               		dw byte_12A2
    3732/    142C : 73 14               		dw byte_12A4
    3733/    142E : 75 14               		dw byte_12A6
    3734/    1430 : 77 14               		dw byte_12A8
    3735/    1432 : 79 14               		dw byte_12AA
    3736/    1434 : 7B 14               		dw byte_12AC
    3737/    1436 : 7D 14               		dw byte_12AE
    3738/    1438 : 7F 14               		dw byte_12B0
    3739/    143A : 00                  byte_126B:	db  0			; DATA XREF: RAM:pt_PITCH_EFFECTSo
    3740/    143B :                     					; vibrato 0 : nothing !	used to	cancel a previous vibrato ?
    3741/    143B : 80                  		db 80h
    3742/    143C : F0                  byte_126D:	db 0F0h			; DATA XREF: RAM:124Do
    3743/    143D :                     					; vibrato 1
    3744/    143D : 10                  		db 10h			; at each sound	frame, the next	data byte is added to the current frequency to slightly	affect it
    3745/    143E : 10                  		db 10h
    3746/    143F : F0                  		db 0F0h
    3747/    1440 : 80                  		db 80h			; value	$80 means that it's end of data, so go back to the first byte of the pitch effect
    3748/    1441 : FD                  byte_1272:	db 0FDh			; DATA XREF: RAM:124Fo
    3749/    1442 : FD                  		db 0FDh
    3750/    1443 : FF                  		db 0FFh
    3751/    1444 : 01                  		db  1
    3752/    1445 : 03                  		db  3
    3753/    1446 : 03                  		db  3
    3754/    1447 : 03                  		db  3
    3755/    1448 : 01                  		db  1
    3756/    1449 : FF                  		db 0FFh
    3757/    144A : FD                  		db 0FDh
    3758/    144B : 80                  		db 80h
    3759/    144C : FE                  byte_127D:	db 0FEh			; DATA XREF: RAM:1251o
    3760/    144D : FE                  		db 0FEh
    3761/    144E : FF                  		db 0FFh
    3762/    144F : 01                  		db  1
    3763/    1450 : 02                  		db  2
    3764/    1451 : 02                  		db  2
    3765/    1452 : 02                  		db  2
    3766/    1453 : 01                  		db  1
    3767/    1454 : FF                  		db 0FFh
    3768/    1455 : FE                  		db 0FEh
    3769/    1456 : 80                  		db 80h
    3770/    1457 : FF                  byte_1288:	db 0FFh			; DATA XREF: RAM:1253o
    3771/    1458 : FF                  		db 0FFh
    3772/    1459 : 00                  		db  0
    3773/    145A : 01                  		db  1
    3774/    145B : 01                  		db  1
    3775/    145C : 01                  		db  1
    3776/    145D : 01                  		db  1
    3777/    145E : 00                  		db  0
    3778/    145F : FF                  		db 0FFh
    3779/    1460 : FF                  		db 0FFh
    3780/    1461 : 80                  		db 80h
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 64 - 8/17/2019 18:52:23


    3781/    1462 : FF                  byte_1293:	db 0FFh			; DATA XREF: RAM:1255o
    3782/    1463 : 00                  		db  0
    3783/    1464 : 00                  		db  0
    3784/    1465 : 01                  		db  1
    3785/    1466 : 00                  		db  0
    3786/    1467 : 01                  		db  1
    3787/    1468 : 00                  		db  0
    3788/    1469 : 00                  		db  0
    3789/    146A : FF                  		db 0FFh
    3790/    146B : 00                  		db  0
    3791/    146C : 80                  		db 80h
    3792/    146D : 02                  byte_129E:	db  2			; DATA XREF: RAM:1257o
    3793/    146E :                     					; from here, the pitch effects are not vibratos, they just make	the pitch constantly go	up or down
    3794/    146E : 80                  		db 80h
    3795/    146F : FE                  byte_12A0:	db 0FEh			; DATA XREF: RAM:1259o
    3796/    1470 : 80                  		db 80h
    3797/    1471 : 04                  byte_12A2:	db  4			; DATA XREF: RAM:125Bo
    3798/    1472 : 80                  		db 80h
    3799/    1473 : FC                  byte_12A4:	db 0FCh			; DATA XREF: RAM:125Do
    3800/    1474 : 80                  		db 80h
    3801/    1475 : 08                  byte_12A6:	db  8			; DATA XREF: RAM:125Fo
    3802/    1476 : 80                  		db 80h
    3803/    1477 : F8                  byte_12A8:	db 0F8h			; DATA XREF: RAM:1261o
    3804/    1478 : 80                  		db 80h
    3805/    1479 : 10                  byte_12AA:	db 10h			; DATA XREF: RAM:1263o
    3806/    147A : 80                  		db 80h
    3807/    147B : F0                  byte_12AC:	db 0F0h			; DATA XREF: RAM:1265o
    3808/    147C : 80                  		db 80h
    3809/    147D : 20                  byte_12AE:	db 20h			; DATA XREF: RAM:1267o
    3810/    147E : 80                  		db 80h
    3811/    147F : E0                  byte_12B0:	db 0E0h			; DATA XREF: RAM:1269o
    3812/    1480 : 80                  		db 80h
    3813/    1481 : A1 14               pt_PSG_INSTRUMENTS:dw byte_12D2		; DATA XREF: PSG_LoadInstrument+22o
    3814/    1483 :                     					; The PSG instruments only affect the channel level
    3815/    1483 : A3 14               		dw byte_12D4		; more details about the data layout in	psg-intruments.txt
    3816/    1485 : B5 14               		dw byte_12E6		; instrument 2
    3817/    1487 : C3 14               		dw byte_12F4		; instrument 3
    3818/    1489 : DA 14               		dw byte_130B		; instrument 4
    3819/    148B : E1 14               		dw byte_1312		; instrument 5
    3820/    148D : EC 14               		dw byte_131D		; instrument 6
    3821/    148F : F4 14               		dw byte_1325		; instrument 7
    3822/    1491 : F9 14               		dw byte_132A		; instrument 8
    3823/    1493 : 07 15               		dw byte_1338		; instrument 9
    3824/    1495 : 0D 15               		dw byte_133E		; instrument A
    3825/    1497 : 18 15               		dw byte_1349		; instrument B
    3826/    1499 : 1A 15               		dw byte_134B		; instrument C
    3827/    149B : 1E 15               		dw byte_134F		; instrument D
    3828/    149D : 24 15               		dw byte_1355		; instrument E
    3829/    149F : 2C 15               		dw byte_135D		; instrument F
    3830/    14A1 : 8F                  byte_12D2:	db 8Fh			; DATA XREF: RAM:pt_PSG_INSTRUMENTSo
    3831/    14A2 :                     					; start	of data	: instrument 0
    3832/    14A2 : 8B                  		db 8Bh
    3833/    14A3 : 0F                  byte_12D4:	db 0Fh			; DATA XREF: RAM:12B4o
    3834/    14A4 :                     					; instrument 1
    3835/    14A4 : 0F                  		db 0Fh
    3836/    14A5 : 0E                  		db 0Eh
    3837/    14A6 : 0D                  		db 0Dh
    3838/    14A7 : 0C                  		db 0Ch
    3839/    14A8 : 0B                  		db 0Bh
    3840/    14A9 : 0A                  		db 0Ah
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 65 - 8/17/2019 18:52:23


    3841/    14AA : 09                  		db  9
    3842/    14AB : 08                  		db  8
    3843/    14AC : 07                  		db  7
    3844/    14AD : 06                  		db  6
    3845/    14AE : 05                  		db  5
    3846/    14AF : 04                  		db  4
    3847/    14B0 : 03                  		db  3
    3848/    14B1 : 02                  		db  2
    3849/    14B2 : 01                  		db  1
    3850/    14B3 : 80                  		db 80h
    3851/    14B4 : 80                  		db 80h
    3852/    14B5 : 0F                  byte_12E6:	db 0Fh			; DATA XREF: RAM:12B6o
    3853/    14B6 :                     					; instrument 2
    3854/    14B6 : 0E                  		db 0Eh
    3855/    14B7 : 0E                  		db 0Eh
    3856/    14B8 : 0D                  		db 0Dh
    3857/    14B9 : 0D                  		db 0Dh
    3858/    14BA : 0D                  		db 0Dh
    3859/    14BB : 0C                  		db 0Ch
    3860/    14BC : 0C                  		db 0Ch
    3861/    14BD : 0C                  		db 0Ch
    3862/    14BE : 0C                  		db 0Ch
    3863/    14BF : 8B                  		db 8Bh
    3864/    14C0 : 0A                  		db 0Ah
    3865/    14C1 : 0A                  		db 0Ah
    3866/    14C2 : 89                  		db 89h
    3867/    14C3 : 0F                  byte_12F4:	db 0Fh			; DATA XREF: RAM:12B8o
    3868/    14C4 :                     					; instrument 3
    3869/    14C4 : 0F                  		db 0Fh
    3870/    14C5 : 0F                  		db 0Fh
    3871/    14C6 : 0F                  		db 0Fh
    3872/    14C7 : 0F                  		db 0Fh
    3873/    14C8 : 0F                  		db 0Fh
    3874/    14C9 : 0E                  		db 0Eh
    3875/    14CA : 0E                  		db 0Eh
    3876/    14CB : 0E                  		db 0Eh
    3877/    14CC : 0E                  		db 0Eh
    3878/    14CD : 0E                  		db 0Eh
    3879/    14CE : 0E                  		db 0Eh
    3880/    14CF : 0E                  		db 0Eh
    3881/    14D0 : 0E                  		db 0Eh
    3882/    14D1 : 0E                  		db 0Eh
    3883/    14D2 : 0E                  		db 0Eh
    3884/    14D3 : 0E                  		db 0Eh
    3885/    14D4 : 0E                  		db 0Eh
    3886/    14D5 : 8D                  		db 8Dh
    3887/    14D6 : 0B                  		db 0Bh
    3888/    14D7 : 0B                  		db 0Bh
    3889/    14D8 : 0B                  		db 0Bh
    3890/    14D9 : 8A                  		db 8Ah
    3891/    14DA : 0F                  byte_130B:	db 0Fh			; DATA XREF: RAM:12BAo
    3892/    14DB :                     					; instrument 4
    3893/    14DB : 0F                  		db 0Fh
    3894/    14DC : 8E                  		db 8Eh
    3895/    14DD : 0B                  		db 0Bh
    3896/    14DE : 0B                  		db 0Bh
    3897/    14DF : 0B                  		db 0Bh
    3898/    14E0 : 8A                  		db 8Ah
    3899/    14E1 : 0F                  byte_1312:	db 0Fh			; DATA XREF: RAM:12BCo
    3900/    14E2 :                     					; instrument 5
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 66 - 8/17/2019 18:52:23


    3901/    14E2 : 0E                  		db 0Eh
    3902/    14E3 : 8D                  		db 8Dh
    3903/    14E4 : 0B                  		db 0Bh
    3904/    14E5 : 09                  		db  9
    3905/    14E6 : 07                  		db  7
    3906/    14E7 : 05                  		db  5
    3907/    14E8 : 03                  		db  3
    3908/    14E9 : 02                  		db  2
    3909/    14EA : 01                  		db  1
    3910/    14EB : 80                  		db 80h
    3911/    14EC : 0D                  byte_131D:	db 0Dh			; DATA XREF: RAM:12BEo
    3912/    14ED :                     					; instrument 6
    3913/    14ED : 0E                  		db 0Eh
    3914/    14EE : 0F                  		db 0Fh
    3915/    14EF : 8E                  		db 8Eh
    3916/    14F0 : 04                  		db  4
    3917/    14F1 : 02                  		db  2
    3918/    14F2 : 01                  		db  1
    3919/    14F3 : 80                  		db 80h
    3920/    14F4 : 0D                  byte_1325:	db 0Dh			; DATA XREF: RAM:12C0o
    3921/    14F5 :                     					; instrument 7
    3922/    14F5 : 0E                  		db 0Eh
    3923/    14F6 : 0F                  		db 0Fh
    3924/    14F7 : 8E                  		db 8Eh
    3925/    14F8 : 8B                  		db 8Bh
    3926/    14F9 : 0F                  byte_132A:	db 0Fh			; DATA XREF: RAM:12C2o
    3927/    14FA :                     					; instrument 8
    3928/    14FA : 0F                  		db 0Fh
    3929/    14FB : 0E                  		db 0Eh
    3930/    14FC : 0E                  		db 0Eh
    3931/    14FD : 0D                  		db 0Dh
    3932/    14FE : 0C                  		db 0Ch
    3933/    14FF : 0F                  		db 0Fh
    3934/    1500 : 0F                  		db 0Fh
    3935/    1501 : 0E                  		db 0Eh
    3936/    1502 : 0E                  		db 0Eh
    3937/    1503 : 0D                  		db 0Dh
    3938/    1504 : 0D                  		db 0Dh
    3939/    1505 : 8C                  		db 8Ch
    3940/    1506 : 8A                  		db 8Ah
    3941/    1507 : 0B                  byte_1338:	db 0Bh			; DATA XREF: RAM:12C4o
    3942/    1508 :                     					; instrument 9
    3943/    1508 : 0C                  		db 0Ch
    3944/    1509 : 0D                  		db 0Dh
    3945/    150A : 0E                  		db 0Eh
    3946/    150B : 8F                  		db 8Fh
    3947/    150C : 88                  		db 88h
    3948/    150D : 0B                  byte_133E:	db 0Bh			; DATA XREF: RAM:12C6o
    3949/    150E :                     					; instrument A
    3950/    150E : 0D                  		db 0Dh
    3951/    150F : 0F                  		db 0Fh
    3952/    1510 : 0E                  		db 0Eh
    3953/    1511 : 0D                  		db 0Dh
    3954/    1512 : 8C                  		db 8Ch
    3955/    1513 : 0A                  		db 0Ah
    3956/    1514 : 0A                  		db 0Ah
    3957/    1515 : 09                  		db  9
    3958/    1516 : 09                  		db  9
    3959/    1517 : 88                  		db 88h
    3960/    1518 : 8F                  byte_1349:	db 8Fh			; DATA XREF: RAM:12C8o
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 67 - 8/17/2019 18:52:23


    3961/    1519 :                     					; instrument B
    3962/    1519 : 8F                  		db 8Fh
    3963/    151A : 0F                  byte_134B:	db 0Fh			; DATA XREF: RAM:12CAo
    3964/    151B :                     					; instrument C
    3965/    151B : 0A                  		db 0Ah
    3966/    151C : 86                  		db 86h
    3967/    151D : 83                  		db 83h
    3968/    151E : 0F                  byte_134F:	db 0Fh			; DATA XREF: RAM:12CCo
    3969/    151F :                     					; instrument D
    3970/    151F : 0C                  		db 0Ch
    3971/    1520 : 0A                  		db 0Ah
    3972/    1521 : 08                  		db  8
    3973/    1522 : 86                  		db 86h
    3974/    1523 : 83                  		db 83h
    3975/    1524 : 0F                  byte_1355:	db 0Fh			; DATA XREF: RAM:12CEo
    3976/    1525 :                     					; instrument E
    3977/    1525 : 0D                  		db 0Dh
    3978/    1526 : 0B                  		db 0Bh
    3979/    1527 : 09                  		db  9
    3980/    1528 : 08                  		db  8
    3981/    1529 : 07                  		db  7
    3982/    152A : 86                  		db 86h
    3983/    152B : 83                  		db 83h
    3984/    152C : 8F                  byte_135D:	db 8Fh			; DATA XREF: RAM:12D0o
    3985/    152D :                     					; instrument F
    3986/    152D : 80                  		db 80h			; end of data
    3987/    152E :                     
    3988/    152E :                     		align 020h
    3989/    1540 :                     
    3990/    1540 : 00                  USELESS_BYTE:	db 0			; DATA XREF: Main+62w
    3991/    1541 :                     					; YM1_SetStereo:loc_1016r
    3992/    1541 :                     					; YM1_SetStereo+2Bw
    3993/    1541 :                     					; incremented each time	new stereo byte	has bit	0 set to 1, but	actually has no	effect on sound. Useless !
    3994/    1541 : 00                  CURRENT_PSG_CHANNEL:db 0		; DATA XREF: PSG_ParseToneData-6FDr
    3995/    1542 :                     					; PSG_ParseToneData+17w
    3996/    1542 :                     					; PSG_ParseToneData+1DEr
    3997/    1542 :                     					; PSG_ParseToneData+1FBr
    3998/    1542 :                     					; PSG_ParseNoiseData+9w
    3999/    1542 :                     					; current PSG channel to process, stored in the	right bits ready to be sent to PSG
    4000/    1542 : 00                  CURRENT_CHANNEL:db 0			; DATA XREF: YM_UpdateInstrumentsLevelso
    4001/    1543 :                     					; StopMusic+1o	UpdateSound+62o
    4002/    1543 :                     					; indicates the	channel	to process, from a relative point of view : YM1, YM2, PSG or SFX channels
    4003/    1543 : 00                  CURRENTLY_FADING_OUT:db	0		; DATA XREF: Main+76w StopMusic+A8w
    4004/    1544 :                     					; UpdateSound+39r
    4005/    1544 :                     					; PSG_LoadInstrument+Dr Fade_Out+7w
    4006/    1544 :                     					; set to 01 when a fade	out operation is being executed
    4007/    1544 : 00                  CURRENTLY_MANAGING_SFX:		db 0
    4008/    1545 : 00                  CALL_YM2_INSTEAD_OF_YM1:db 0		; DATA XREF: Pause_Sound+6w
    4009/    1546 :                     					; Pause_Sound+20w
    4010/    1546 :                     					; YM_UpdateInstrumentsLevels+5w
    4011/    1546 :                     					; YM_UpdateInstrumentsLevels+35w
    4012/    1546 :                     					; Main+CFw StopMusic+6w StopMusic+3Dw
    4013/    1546 :                     					; UpdateSound+6Aw UpdateSound+81w
    4014/    1546 :                     					; YM_Inputr
    4015/    1546 :                     					; set to $01 when managing YM4,5,6 channels, to	call part 2 of YM
    4016/    1546 : 00                  CURRENTLY_MANAGING_SFX_TYPE_2:db 0	; DATA XREF: Pause_Sound+3w
    4017/    1547 :                     					; YM_UpdateInstrumentsLevels+5Fw
    4018/    1547 :                     					; UpdateSound+67w UpdateSound+B2w
    4019/    1547 :                     					; YM1_ConditionnalInputr
    4020/    1547 :                     					; YM2_ConditionalInputr
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 68 - 8/17/2019 18:52:23


    4021/    1547 :                     					; DAC_SetNewSample+1r
    4022/    1547 :                     					; YM2_ParseData+12r YM2_ParseData+80r
    4023/    1547 :                     					; YM2_ParseData+24Fr
    4024/    1547 :                     					; YM2_LoadInstrument+6r
    4025/    1547 :                     					; YM2_ParseChannel6Data+4r
    4026/    1547 :                     					; YM2_ParseChannel6Data+64r
    4027/    1547 :                     					; indicates if an SFX type 2 is	being processed, because these ones use	extra channel ram areas, to keep current music data for	when SFX is finished
    4028/    1547 : 01                  FADE_OUT_LENGTH:db 1			; DATA XREF: UpdateSound+45r
    4029/    1548 :                     					; Fade_Out+2w Fade_Out+Ar
    4030/    1548 :                     					; number of YM Timer overflows to handle before	incrementing the fade out counter
    4031/    1548 : 63                  FADE_OUT_TIMER:	db 63h			; DATA XREF: Main+7Ew StopMusic+B0w
    4032/    1549 :                     					; UpdateSound+3Fr UpdateSound+48w
    4033/    1549 :                     					; UpdateSound+5Cw YM1_ParseData+21Fr
    4034/    1549 :                     					; YM2_ParseData+254r
    4035/    1549 :                     					; YM2_ParseChannel6Data+D9r
    4036/    1549 :                     					; PSG_ParseToneData:loc_DF2r
    4037/    1549 :                     					; PSG_ParseNoiseData:loc_F88r
    4038/    1549 :                     					; Fade_Out+Dw
    4039/    1549 :                     					; Starts with fade out length value, decrements	at each	YM Timer overflow. set to $63 while loading music
    4040/    1549 : 00                  FADE_OUT_COUNTER:db 0			; DATA XREF: Main+79w StopMusic+ABw
    4041/    154A :                     					; UpdateSound+4Br UpdateSound+4Fw
    4042/    154A :                     					; DAC_SetNewSample+13r
    4043/    154A :                     					; YM1_LoadInstrument+6r
    4044/    154A :                     					; YM2_LoadInstrument:loc_AB6r
    4045/    154A :                     					; Counts how many times	the fade out timer reached 0. Fade out stops at	value $0C.
    4046/    154A : 00                  		db    0
    4047/    154B : 00                  		db    0
    4048/    154C : 3C                  DAC_BANK:	db 3Ch			; DATA XREF: LoadBank+5o
    4049/    154D :                     					; LoadDacSound+1Dw
    4050/    154D : 00                  MUSIC_BANK:db 0			; DATA XREF: LoadMusicBank+8r Main+2Dw
    4051/    154E :                     					; Main+3Bw
    4052/    154E : 00                  		db    0
    4053/    154F : 00 00               TEMP_FREQUENCY:	dw 0			; DATA XREF: YM1_ParseData+15Ew
    4054/    1551 :                     					; YM1_ParseData+17Ar
    4055/    1551 :                     					; YM1_ParseData+188w
    4056/    1551 :                     					; YM1_ParseData:loc_700r
    4057/    1551 :                     					; YM2_ParseData+18Ew
    4058/    1551 :                     					; YM2_ParseData+1AAr
    4059/    1551 :                     					; YM2_ParseData+1B8w
    4060/    1551 :                     					; YM2_ParseData:loc_95Ar
    4061/    1551 :                     					; temp space to	store frequency	values when YM data is parsed
    4062/    1551 : 00                  TEMP_REGISTER:	db 0			; DATA XREF: YM1_LoadInstrument+50w
    4063/    1552 :                     					; YM1_LoadInstrument+66r
    4064/    1552 :                     					; YM2_LoadInstrument+5Bw
    4065/    1552 :                     					; YM2_LoadInstrument+71r
    4066/    1552 :                     					; temp place to	keep a register	value when an YM instrument is loaded
    4067/    1552 : 00                  FADE_IN_TIMER:	db 0			; DATA XREF: Main+5Fw UpdateSound+18o
    4068/    1553 :                     					; incremented at each YM Timer overflow. When it corresponds to	fade in	parameter, increment YM	instruments level until	max level
    4069/    1553 : 00                  MUSIC_DOESNT_USE_SAMPLES:db 0		; DATA XREF: Main+6Cw UpdateSound+6r
    4070/    1554 :                     					; YM2_ParseChannel6Data:loc_B68r
    4071/    1554 :                     					; YM2_ParseChannel6Data+5Er
    4072/    1554 :                     
    4073/    1554 :                     		align 010h
    4074/    1560 :                     
    4075/    1560 :                     t_SAMPLE_LOAD_DATA: 		; Data layout of the 8-byte entries
    4076/    1560 : 02 00 3A 00 51 09   		db 2, 0,		DAC_BANK_1, 0, 51h, 9, 0, 80h			; byte 0 : PCM frame period parameter
                    00 80 
    4077/    1568 : 02 00 3A 00 0A 0F   		db 2, 0,		DAC_BANK_1, 0, 0Ah, 0Fh, 52h, 89h	; byte 1 : always 0 (ignored when data is parsed)
                    52 89 
    4078/    1570 : 01 00 3A 00 B3 13   		db 1, 0,		DAC_BANK_1, 0, 0B3h, 13h, 5Dh, 98h	; byte 2 : bank to load
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 69 - 8/17/2019 18:52:23


                    5D 98 
    4079/    1578 : 04 00 3A 00 B3 13   		db 4, 0,		DAC_BANK_1, 0, 0B3h, 13h, 5Dh, 98h	; byte 3 : always 0 (ignored when data is parsed)
                    5D 98 
    4080/    1580 : 08 00 3A 00 B3 13   		db 8, 0, 		DAC_BANK_1, 0, 0B3h, 13h, 5Dh, 98h	; bytes 5-4 : sample length
                    5D 98 
    4081/    1588 : 0F 00 3A 00 17 1E   		db 0Fh, 0,	DAC_BANK_1, 0, 17h, 1Eh, 11h,	0ACh	; bytes 7-6 : pointer to sound PCM Data once bank is loaded
                    11 AC 
    4082/    1590 : 01 00 3A 00 05 1E   		db 1, 0, 		DAC_BANK_1, 0, 5, 1Eh, 29h, 0CAh
                    29 CA 
    4083/    1598 : 03 00 3A 00 05 1E   		db 3, 0, 		DAC_BANK_1, 0, 5, 1Eh, 29h, 0CAh		; With this table, the same sound sample can be played at different rates,
                    29 CA 
    4084/    15A0 : 04 00 3A 00 05 1E   		db 4, 0, 		DAC_BANK_1, 0, 5, 1Eh, 29h, 0CAh		; resulting with quick high-pitched, or slow low-pitched sounds,
                    29 CA 
    4085/    15A8 : 06 00 3A 00 05 1E   		db 6, 0, 		DAC_BANK_1, 0, 5, 1Eh, 29h, 0CAh		; which is quite appropriate	for drums or attack hits or explosions !
                    29 CA 
    4086/    15B0 : 08 00 3A 00 05 1E   		db 8, 0, 		DAC_BANK_1, 0, 5, 1Eh, 29h, 0CAh
                    29 CA 
    4087/    15B8 : 01 00 3A 00 C3 1D   		db 1, 0, 		DAC_BANK_1, 0, 0C3h, 1Dh, 0D5h,	87h
                    D5 87 
    4088/    15C0 : 02 00 3A 00 C3 1D   		db 2, 0,		DAC_BANK_1, 0, 0C3h, 1Dh, 0D5h,	87h
                    D5 87 
    4089/    15C8 : 05 00 3A 00 C3 1D   		db 5, 0,		DAC_BANK_1, 0, 0C3h, 1Dh, 0D5h,	87h
                    D5 87 
    4090/    15D0 : 06 00 3A 00 C3 1D   		db 6, 0,		DAC_BANK_1, 0, 0C3h, 1Dh, 0D5h,	87h
                    D5 87 
    4091/    15D8 : 05 00 3A 00 B2 2C   		db 5, 0,		DAC_BANK_1, 0, 0B2h, 2Ch, 99h, 0A5h
                    99 A5 
    4092/    15E0 : 01 00 3A 00 50 18   		db 1, 0, 		DAC_BANK_1, 0, 50h, 18h, 4Ch, 0D2h
                    4C D2 
    4093/    15E8 : 01 00 3A 00 93 1C   		db 1, 0,		DAC_BANK_1, 0, 93h, 1Ch, 0, 80h
                    00 80 
    4094/    15F0 : 01 00 3A 00 AA 19   		db 1, 0, 		DAC_BANK_1, 0, 0AAh, 19h, 94h, 9Ch
                    94 9C 
    4095/    15F8 : 05 00 3A 00 50 18   		db 5, 0, 		DAC_BANK_1, 0, 50h, 18h, 4Ch, 0D2h
                    4C D2 
    4096/    1600 : 0F 00 3A 00 EB 18   		db 0Fh,	0,	DAC_BANK_1, 0, 0EBh, 18h, 3Fh, 0B6h
                    3F B6 
    4097/    1608 : 0F 00 3A 00 C0 1D   		db 0Fh,	0,	DAC_BANK_1, 0, 0C0h, 1Dh, 0, 80h
                    00 80 
    4098/    1610 : 06 00 3A 00 0D 1A   		db 6, 0, 		DAC_BANK_1, 0, 0Dh, 1Ah, 2Bh, 0CFh
                    2B CF 
    4099/    1618 : 0A 00 3A 00 2F 1D   		db 0Ah,	0, 	DAC_BANK_1, 0, 2Fh, 1Dh, 0, 80h
                    00 80 
    4100/    1620 : 06 00 3A 00 5D 10   		db 6, 0,		DAC_BANK_1, 0, 5Dh, 10h, 9Dh, 0EAh
                    9D EA 
    4101/    1628 : 06 00 3A 00 7B 0F   		db 6, 0,		DAC_BANK_1, 0, 7Bh, 0Fh, 39h, 0E9h
                    39 E9 
    4102/    1630 : 02 00 3A 00 FC 20   		db 2, 0,		DAC_BANK_1, 0, 0FCh, 20h, 30h, 9Dh
                    30 9D 
    4103/    1638 : 08 00 3A 00 FC 20   		db 8, 0,		DAC_BANK_1, 0, 0FCh, 20h, 30h, 9Dh
                    30 9D 
    4104/    1640 : 0F 00 3A 00 FC 20   		db 0Fh, 0, 	DAC_BANK_1, 0, 0FCh, 20h, 30h, 9Dh
                    30 9D 
    4105/    1648 : 01 00 3A 00 69 07   		db 1, 0,		DAC_BANK_1, 0, 69h, 7, 2Fh, 0E8h
                    2F E8 
    4106/    1650 : 1E 00 3A 00 17 1E   		db 1Eh, 0, 	DAC_BANK_1, 0, 17h, 1Eh, 11h,	0ACh
                    11 AC 
    4107/    1658 : 03 00 3A 00 D4 07   		db 3, 0,		DAC_BANK_1, 0, 0D4h, 7,	0, 80h
                    00 80 
    4108/    1660 : 08 00 3A 00 C0 1D   		db 8, 0,		DAC_BANK_1, 0, 0C0h, 1Dh, 0, 80h
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 70 - 8/17/2019 18:52:23


                    00 80 
    4109/    1668 : 05 00 3A 00 D3 1F   		db 5, 0,		DAC_BANK_1, 0, 0D3h, 1Fh, 2Dh, 0BEh
                    2D BE 
    4110/    1670 : 02 00 3A 00 0A 0F   		db 2, 0,		DAC_BANK_1, 0, 0Ah, 0Fh, 99h, 0EFh
                    99 EF 
    4111/    1678 : 08 00 3A 00 07 1C   		db 8, 0,		DAC_BANK_1, 0, 7, 1Ch, 1, 0DEh
                    01 DE 
    4112/    1680 : 03 00 3A 00 10 50   		db 3, 0,		DAC_BANK_1, 0, 10h, 50h, 0C1h, 9Dh
                    C1 9D 
    4113/    1688 :                     
    4114/    1688 :                     		align 800h
    4115/    1800 :                     
    4116/    1800 : 4D 55 53 49 43 59   		db  "MUSICYM1"
                    4D 31 
    4117/    1808 :                     		align	10h
    4118/    1810 :                     MUSIC_CHANNEL_YM1:
    4119/    1810 : 00                  		db 0
    4120/    1811 : 00                  		db 0
    4121/    1812 : 00                  		db 0
    4122/    1813 :                     MUSIC_CHANNEL_YM1_NOT_IN_USE:
    4123/    1813 : 01                  		db 1
    4124/    1814 : 0E                  		db 0Eh
    4125/    1815 : 00                  		db  0
    4126/    1816 : 01                  		db  1
    4127/    1817 : 18                  		db 18h
    4128/    1818 : 00                  		db  0
    4129/    1819 : 00                  		db  0
    4130/    181A : 00                  		db  0
    4131/    181B : 6B                  		db 6Bh
    4132/    181C : 12                  		db 12h
    4133/    181D : 00                  		db  0
    4134/    181E : 00                  		db  0
    4135/    181F : 00                  		db  0
    4136/    1820 : 00                  		db  0
    4137/    1821 : 00                  		db  0
    4138/    1822 : 00                  		db  0
    4139/    1823 : 00                  		db  0
    4140/    1824 : 00                  		db  0
    4141/    1825 : 00                  		db  0
    4142/    1826 : 00                  		db  0
    4143/    1827 : 00                  		db  0
    4144/    1828 : 00                  		db  0
    4145/    1829 : 00                  		db  0
    4146/    182A : 00                  		db  0
    4147/    182B : 00                  		db  0
    4148/    182C : 00                  		db  0
    4149/    182D : 00                  		db  0
    4150/    182E : 00                  MUSIC_CHANNEL_YM1_STEREO: db  0
    4151/    182F : 00                  		db  0
    4152/    1830 : 4D 55 53 49 43 59   		db  "MUSICYM2"
                    4D 32 
    4153/    1838 :                     		align	10h
    4154/    1840 :                     MUSIC_CHANNEL_YM2:
    4155/    1840 : 00                  		db 0
    4156/    1841 : 00                  		db 0
    4157/    1842 : 00                  		db 0
    4158/    1843 :                     MUSIC_CHANNEL_YM2_NOT_IN_USE:
    4159/    1843 : 01                  		db 1
    4160/    1844 : 0E                  		db 0Eh
    4161/    1845 : 00                  		db  0
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 71 - 8/17/2019 18:52:23


    4162/    1846 : 01                  		db  1
    4163/    1847 : 18                  		db 18h
    4164/    1848 : 00                  		db  0
    4165/    1849 : 00                  		db  0
    4166/    184A : 00                  		db  0
    4167/    184B : 6B                  		db 6Bh
    4168/    184C : 12                  		db 12h
    4169/    184D : 00                  		db  0
    4170/    184E : 00                  		db  0
    4171/    184F : 00                  		db  0
    4172/    1850 : 00                  		db  0
    4173/    1851 : 00                  		db  0
    4174/    1852 : 00                  		db  0
    4175/    1853 : 00                  		db  0
    4176/    1854 : 00                  		db  0
    4177/    1855 : 00                  		db  0
    4178/    1856 : 00                  		db  0
    4179/    1857 : 00                  		db  0
    4180/    1858 : 00                  		db  0
    4181/    1859 : 00                  		db  0
    4182/    185A : 00                  		db  0
    4183/    185B : 00                  		db  0
    4184/    185C : 00                  		db  0
    4185/    185D : 00                  		db  0
    4186/    185E : 00                  MUSIC_CHANNEL_YM2_STEREO: db  0
    4187/    185F : 00                  		db  0
    4188/    1860 : 4D 55 53 49 43 59   		db  "MUSICYM3"
                    4D 33 
    4189/    1868 :                     		align	10h
    4190/    1870 :                     MUSIC_CHANNEL_YM3:
    4191/    1870 : 00                  		db 0
    4192/    1871 : 00                  		db 0
    4193/    1872 : 00                  		db 0
    4194/    1873 :                     MUSIC_CHANNEL_YM3_NOT_IN_USE:
    4195/    1873 : 01                  		db 1
    4196/    1874 : 0E                  		db 0Eh
    4197/    1875 : 00                  		db  0
    4198/    1876 : 01                  		db  1
    4199/    1877 : 18                  		db 18h
    4200/    1878 : 00                  		db  0
    4201/    1879 : 00                  		db  0
    4202/    187A : 00                  		db  0
    4203/    187B : 6B                  		db 6Bh
    4204/    187C : 12                  		db 12h
    4205/    187D : 00                  		db  0
    4206/    187E : 00                  		db  0
    4207/    187F : 00                  		db  0
    4208/    1880 : 00                  		db  0
    4209/    1881 : 00                  		db  0
    4210/    1882 : 00                  		db  0
    4211/    1883 : 00                  		db  0
    4212/    1884 : 00                  		db  0
    4213/    1885 : 00                  		db  0
    4214/    1886 : 00                  		db  0
    4215/    1887 : 00                  		db  0
    4216/    1888 : 00                  		db  0
    4217/    1889 : 00                  		db  0
    4218/    188A : 00                  		db  0
    4219/    188B : 00                  		db  0
    4220/    188C : 00                  		db  0
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 72 - 8/17/2019 18:52:23


    4221/    188D : 00                  		db  0
    4222/    188E :                     MUSIC_CHANNEL_YM3_STEREO:
    4223/    188E : 00                  		db  0
    4224/    188F : 00                  		db  0
    4225/    1890 : 4D 55 53 49 43 59   		db  "MUSICYM4"
                    4D 34 
    4226/    1898 :                     		align	10h
    4227/    18A0 :                     MUSIC_CHANNEL_YM4:
    4228/    18A0 : 00                  		db 0
    4229/    18A1 : 00                  		db 0
    4230/    18A2 : 00                  		db 0
    4231/    18A3 :                     MUSIC_CHANNEL_YM4_NOT_IN_USE:
    4232/    18A3 : 01                  		db 1
    4233/    18A4 : 0E                  		db 0Eh
    4234/    18A5 : 00                  		db  0
    4235/    18A6 : 01                  		db  1
    4236/    18A7 : 18                  		db 18h
    4237/    18A8 : 00                  		db  0
    4238/    18A9 : 00                  		db  0
    4239/    18AA : 00                  		db  0
    4240/    18AB : 6B                  		db 6Bh
    4241/    18AC : 12                  		db 12h
    4242/    18AD : 00                  		db  0
    4243/    18AE : 00                  		db  0
    4244/    18AF : 00                  		db  0
    4245/    18B0 : 00                  		db  0
    4246/    18B1 : 00                  		db  0
    4247/    18B2 : 00                  		db  0
    4248/    18B3 : 00                  		db  0
    4249/    18B4 : 00                  		db  0
    4250/    18B5 : 00                  		db  0
    4251/    18B6 : 00                  		db  0
    4252/    18B7 : 00                  		db  0
    4253/    18B8 : 00                  		db  0
    4254/    18B9 : 00                  		db  0
    4255/    18BA : 00                  		db  0
    4256/    18BB : 00                  		db  0
    4257/    18BC : 00                  		db  0
    4258/    18BD : 00                  		db  0
    4259/    18BE :                     MUSIC_CHANNEL_YM4_STEREO:
    4260/    18BE : 00                  		db  0
    4261/    18BF : 00                  		db  0
    4262/    18C0 : 4D 55 53 49 43 59   		db  "MUSICYM5"
                    4D 35 
    4263/    18C8 :                     		align	10h
    4264/    18D0 :                     MUSIC_CHANNEL_YM5:
    4265/    18D0 : 00                  		db 0
    4266/    18D1 : 00                  		db 0
    4267/    18D2 : 00                  		db 0
    4268/    18D3 :                     MUSIC_CHANNEL_YM5_NOT_IN_USE:
    4269/    18D3 : 01                  		db 1
    4270/    18D4 : 0E                  		db 0Eh
    4271/    18D5 : 00                  		db  0
    4272/    18D6 : 01                  		db  1
    4273/    18D7 : 18                  		db 18h
    4274/    18D8 : 00                  		db  0
    4275/    18D9 : 00                  		db  0
    4276/    18DA : 00                  		db  0
    4277/    18DB : 6B                  		db 6Bh
    4278/    18DC : 12                  		db 12h
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 73 - 8/17/2019 18:52:23


    4279/    18DD : 00                  		db  0
    4280/    18DE : 00                  		db  0
    4281/    18DF : 00                  		db  0
    4282/    18E0 : 00                  		db  0
    4283/    18E1 : 00                  		db  0
    4284/    18E2 : 00                  		db  0
    4285/    18E3 : 00                  		db  0
    4286/    18E4 : 00                  		db  0
    4287/    18E5 : 00                  		db  0
    4288/    18E6 : 00                  		db  0
    4289/    18E7 : 00                  		db  0
    4290/    18E8 : 00                  		db  0
    4291/    18E9 : 00                  		db  0
    4292/    18EA : 00                  		db  0
    4293/    18EB : 00                  		db  0
    4294/    18EC : 00                  		db  0
    4295/    18ED : 00                  		db  0
    4296/    18EE : 00                  MUSIC_CHANNEL_YM5_STEREO:		db  0
    4297/    18EF : 00                  		db  0
    4298/    18F0 : 4D 55 53 49 43 59   		db  "MUSICYM6"
                    4D 36 
    4299/    18F8 :                     		align	10h
    4300/    1900 :                     MUSIC_CHANNEL_YM6:
    4301/    1900 : 00                  		db 0
    4302/    1901 : 00                  		db 0
    4303/    1902 : 00                  		db 0
    4304/    1903 :                     MUSIC_CHANNEL_YM6_NOT_IN_USE:
    4305/    1903 : 01                  		db 1
    4306/    1904 : 0E                  		db 0Eh
    4307/    1905 : 00                  		db  0
    4308/    1906 : 01                  		db  1
    4309/    1907 : 18                  		db 18h
    4310/    1908 : 00                  		db  0
    4311/    1909 : 00                  		db  0
    4312/    190A : 00                  		db  0
    4313/    190B : 6B                  		db 6Bh
    4314/    190C : 12                  		db 12h
    4315/    190D : 00                  		db  0
    4316/    190E : 00                  		db  0
    4317/    190F : 00                  		db  0
    4318/    1910 : 00                  		db  0
    4319/    1911 : 00                  		db  0
    4320/    1912 : 00                  		db  0
    4321/    1913 : 00                  		db  0
    4322/    1914 : 00                  		db  0
    4323/    1915 : 00                  		db  0
    4324/    1916 : 00                  		db  0
    4325/    1917 : 00                  		db  0
    4326/    1918 : 00                  		db  0
    4327/    1919 : 00                  		db  0
    4328/    191A : 00                  		db  0
    4329/    191B : 00                  		db  0
    4330/    191C : 00                  		db  0
    4331/    191D : 00                  		db  0
    4332/    191E : 00                  MUSIC_CHANNEL_YM6_STEREO:		db  0
    4333/    191F : 00                  		db  0
    4334/    1920 : 4D 55 53 49 43 54   		db  "MUSICTN1"
                    4E 31 
    4335/    1928 :                     		align	10h
    4336/    1930 :                     MUSIC_CHANNEL_PSG1:
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 74 - 8/17/2019 18:52:23


    4337/    1930 : 00                  		db 0
    4338/    1931 : 00                  		db 0
    4339/    1932 : 00                  		db 0
    4340/    1933 :                     MUSIC_CHANNEL_PSG1_NOT_IN_USE:
    4341/    1933 : 01                  		db 1
    4342/    1934 : 0E                  		db 0Eh
    4343/    1935 : 00                  		db  0
    4344/    1936 : 01                  		db  1
    4345/    1937 : 18                  		db 18h
    4346/    1938 : 00                  		db  0
    4347/    1939 : 00                  		db  0
    4348/    193A : 00                  		db  0
    4349/    193B : 6B                  		db 6Bh
    4350/    193C : 12                  		db 12h
    4351/    193D : 00                  		db  0
    4352/    193E : 00                  		db  0
    4353/    193F : 00                  		db  0
    4354/    1940 : 00                  		db  0
    4355/    1941 : 00                  		db  0
    4356/    1942 : 00                  		db  0
    4357/    1943 : 00                  		db  0
    4358/    1944 : 00                  		db  0
    4359/    1945 : 00                  		db  0
    4360/    1946 : 00                  		db  0
    4361/    1947 : 00                  		db  0
    4362/    1948 : 00                  		db  0
    4363/    1949 : 00                  		db  0
    4364/    194A : 00                  		db  0
    4365/    194B : 00                  		db  0
    4366/    194C : 00                  		db  0
    4367/    194D : 00                  		db  0
    4368/    194E : 00                  		db  0
    4369/    194F : 00                  		db  0
    4370/    1950 : 4D 55 53 49 43 54   		db  "MUSICTN2"
                    4E 32 
    4371/    1958 :                     		align	10h
    4372/    1960 :                     MUSIC_CHANNEL_PSG2:
    4373/    1960 : 00                  		db 0
    4374/    1961 : 00                  		db 0
    4375/    1962 : 00                  		db 0
    4376/    1963 :                     MUSIC_CHANNEL_PSG2_NOT_IN_USE:
    4377/    1963 : 01                  		db 1
    4378/    1964 : 0E                  		db 0Eh
    4379/    1965 : 00                  		db  0
    4380/    1966 : 01                  		db  1
    4381/    1967 : 18                  		db 18h
    4382/    1968 : 00                  		db  0
    4383/    1969 : 00                  		db  0
    4384/    196A : 00                  		db  0
    4385/    196B : 6B                  		db 6Bh
    4386/    196C : 12                  		db 12h
    4387/    196D : 00                  		db  0
    4388/    196E : 00                  		db  0
    4389/    196F : 00                  		db  0
    4390/    1970 : 00                  		db  0
    4391/    1971 : 00                  		db  0
    4392/    1972 : 00                  		db  0
    4393/    1973 : 00                  		db  0
    4394/    1974 : 00                  		db  0
    4395/    1975 : 00                  		db  0
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 75 - 8/17/2019 18:52:23


    4396/    1976 : 00                  		db  0
    4397/    1977 : 00                  		db  0
    4398/    1978 : 00                  		db  0
    4399/    1979 : 00                  		db  0
    4400/    197A : 00                  		db  0
    4401/    197B : 00                  		db  0
    4402/    197C : 00                  		db  0
    4403/    197D : 00                  		db  0
    4404/    197E : 00                  		db  0
    4405/    197F : 00                  		db  0
    4406/    1980 : 4D 55 53 49 43 54   		db  "MUSICTN3"
                    4E 33 
    4407/    1988 :                     		align	10h
    4408/    1990 :                     MUSIC_CHANNEL_PSG3:
    4409/    1990 : 00                  		db 0
    4410/    1991 : 00                  		db 0
    4411/    1992 : 00                  		db 0
    4412/    1993 :                     MUSIC_CHANNEL_PSG3_NOT_IN_USE:
    4413/    1993 : 01                  		db 1
    4414/    1994 : 0E                  		db 0Eh
    4415/    1995 : 00                  		db  0
    4416/    1996 : 01                  		db  1
    4417/    1997 : 18                  		db 18h
    4418/    1998 : 00                  		db  0
    4419/    1999 : 00                  		db  0
    4420/    199A : 00                  		db  0
    4421/    199B : 6B                  		db 6Bh
    4422/    199C : 12                  		db 12h
    4423/    199D : 00                  		db  0
    4424/    199E : 00                  		db  0
    4425/    199F : 00                  		db  0
    4426/    19A0 : 00                  		db  0
    4427/    19A1 : 00                  		db  0
    4428/    19A2 : 00                  		db  0
    4429/    19A3 : 00                  		db  0
    4430/    19A4 : 00                  		db  0
    4431/    19A5 : 00                  		db  0
    4432/    19A6 : 00                  		db  0
    4433/    19A7 : 00                  		db  0
    4434/    19A8 : 00                  		db  0
    4435/    19A9 : 00                  		db  0
    4436/    19AA : 00                  		db  0
    4437/    19AB : 00                  		db  0
    4438/    19AC : 00                  		db  0
    4439/    19AD : 00                  		db  0
    4440/    19AE : 00                  		db  0
    4441/    19AF : 00                  		db  0
    4442/    19B0 : 4D 55 53 49 43 4E   		db  "MUSICNOI"
                    4F 49 
    4443/    19B8 :                     		align	10h
    4444/    19C0 :                     MUSIC_CHANNEL_NOISE:
    4445/    19C0 : 00                  		db 0
    4446/    19C1 : 00                  		db 0
    4447/    19C2 : 00                  		db 0
    4448/    19C3 :                     MUSIC_CHANNEL_NOISE_NOT_IN_USE:
    4449/    19C3 : 01                  		db 1
    4450/    19C4 : 0E                  		db 0Eh
    4451/    19C5 : 00                  		db  0
    4452/    19C6 : 01                  		db  1
    4453/    19C7 : 18                  		db 18h
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 76 - 8/17/2019 18:52:23


    4454/    19C8 : 00                  		db  0
    4455/    19C9 : 00                  		db  0
    4456/    19CA : 00                  		db  0
    4457/    19CB : 6B                  		db 6Bh
    4458/    19CC : 12                  		db 12h
    4459/    19CD : 00                  		db  0
    4460/    19CE : 00                  		db  0
    4461/    19CF : 00                  		db  0
    4462/    19D0 : 00                  		db  0
    4463/    19D1 : 00                  		db  0
    4464/    19D2 : 00                  		db  0
    4465/    19D3 : 00                  		db  0
    4466/    19D4 : 00                  		db  0
    4467/    19D5 : 00                  		db  0
    4468/    19D6 : 00                  		db  0
    4469/    19D7 : 00                  		db  0
    4470/    19D8 : 00                  		db  0
    4471/    19D9 : 00                  		db  0
    4472/    19DA : 00                  		db  0
    4473/    19DB : 00                  		db  0
    4474/    19DC :                     		align	10h
    4475/    19E0 : 53 46 58 59 4D 31   		db  "SFXYM1"
    4476/    19E6 :                     		align	10h
    4477/    19F0 :                     SFX_CHANNEL_YM1:
    4478/    19F0 : 00                  		db 0
    4479/    19F1 : 00                  		db 0
    4480/    19F2 : 00                  		db 0
    4481/    19F3 :                     SFX_CHANNEL_YM1_NOT_IN_USE:
    4482/    19F3 : 01                  		db 1
    4483/    19F4 : 0E                  		db 0Eh
    4484/    19F5 : 00                  		db  0
    4485/    19F6 : 01                  		db  1
    4486/    19F7 : 18                  		db 18h
    4487/    19F8 : 00                  		db  0
    4488/    19F9 : 00                  		db  0
    4489/    19FA : 00                  		db  0
    4490/    19FB : 6B                  		db 6Bh
    4491/    19FC : 12                  		db 12h
    4492/    19FD : 00                  		db  0
    4493/    19FE : 00                  		db  0
    4494/    19FF : 00                  		db  0
    4495/    1A00 : 00                  		db  0
    4496/    1A01 : 00                  		db  0
    4497/    1A02 : 00                  		db  0
    4498/    1A03 : 00                  		db  0
    4499/    1A04 : 00                  		db  0
    4500/    1A05 : 00                  		db  0
    4501/    1A06 : 00                  		db  0
    4502/    1A07 : 00                  		db  0
    4503/    1A08 : 00                  		db  0
    4504/    1A09 : 00                  		db  0
    4505/    1A0A :                     		align	10h
    4506/    1A10 : 53 46 58 59 4D 32   		db  "SFXYM2"
    4507/    1A16 :                     		align	10h
    4508/    1A20 :                     SFX_CHANNEL_YM2:
    4509/    1A20 : 00                  		db 0
    4510/    1A21 : 00                  		db 0
    4511/    1A22 : 00                  		db 0
    4512/    1A23 :                     SFX_CHANNEL_YM2_NOT_IN_USE:
    4513/    1A23 : 01                  		db 1
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 77 - 8/17/2019 18:52:23


    4514/    1A24 : 0E                  		db 0Eh
    4515/    1A25 : 00                  		db  0
    4516/    1A26 : 01                  		db  1
    4517/    1A27 : 18                  		db 18h
    4518/    1A28 : 00                  		db  0
    4519/    1A29 : 00                  		db  0
    4520/    1A2A : 00                  		db  0
    4521/    1A2B : 6B                  		db 6Bh
    4522/    1A2C : 12                  		db 12h
    4523/    1A2D : 00                  		db  0
    4524/    1A2E : 00                  		db  0
    4525/    1A2F : 00                  		db  0
    4526/    1A30 : 00                  		db  0
    4527/    1A31 : 00                  		db  0
    4528/    1A32 : 00                  		db  0
    4529/    1A33 : 00                  		db  0
    4530/    1A34 : 00                  		db  0
    4531/    1A35 : 00                  		db  0
    4532/    1A36 : 00                  		db  0
    4533/    1A37 : 00                  		db  0
    4534/    1A38 : 00                  		db  0
    4535/    1A39 : 00                  		db  0
    4536/    1A3A : 00                  		db  0
    4537/    1A3B : 00                  		db  0
    4538/    1A3C : 00                  		db  0
    4539/    1A3D :                     		align	10h
    4540/    1A40 : 53 46 58 59 4D 33   		db  "SFXYM3"
    4541/    1A46 :                     		align	10h
    4542/    1A50 :                     SFX_CHANNEL_YM3:
    4543/    1A50 : 00                  		db 0
    4544/    1A51 : 00                  		db 0
    4545/    1A52 : 00                  		db 0
    4546/    1A53 :                     SFX_CHANNEL_YM3_NOT_IN_USE:
    4547/    1A53 : 01                  		db 1
    4548/    1A54 : 0E                  		db 0Eh
    4549/    1A55 : 00                  		db  0
    4550/    1A56 : 01                  		db  1
    4551/    1A57 : 18                  		db 18h
    4552/    1A58 : 00                  		db  0
    4553/    1A59 : 00                  		db  0
    4554/    1A5A : 00                  		db  0
    4555/    1A5B : 6B                  		db 6Bh
    4556/    1A5C : 12                  		db 12h
    4557/    1A5D : 00                  		db  0
    4558/    1A5E : 00                  		db  0
    4559/    1A5F : 00                  		db  0
    4560/    1A60 : 00                  		db  0
    4561/    1A61 : 00                  		db  0
    4562/    1A62 : 00                  		db  0
    4563/    1A63 : 00                  		db  0
    4564/    1A64 : 00                  		db  0
    4565/    1A65 : 00                  		db  0
    4566/    1A66 : 00                  		db  0
    4567/    1A67 : 00                  		db  0
    4568/    1A68 : 00                  		db  0
    4569/    1A69 : 00                  		db  0
    4570/    1A6A : 00                  		db  0
    4571/    1A6B : 00                  		db  0
    4572/    1A6C : 00                  		db  0
    4573/    1A6D :                     		align	10h
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 78 - 8/17/2019 18:52:23


    4574/    1A70 : 53 46 58 59 4D 34   		db  "SFXYM4"
    4575/    1A76 :                     		align	10h
    4576/    1A80 :                     SFX_CHANNEL_YM4:
    4577/    1A80 : 00                  		db 0
    4578/    1A81 : 00                  		db 0
    4579/    1A82 : 00                  		db 0
    4580/    1A83 :                     SFX_CHANNEL_YM4_NOT_IN_USE:
    4581/    1A83 : 01                  		db 1
    4582/    1A84 : 0E                  		db 0Eh
    4583/    1A85 : 00                  		db  0
    4584/    1A86 : 01                  		db  1
    4585/    1A87 : 18                  		db 18h
    4586/    1A88 : 00                  		db  0
    4587/    1A89 : 00                  		db  0
    4588/    1A8A : 00                  		db  0
    4589/    1A8B : 6B                  		db 6Bh
    4590/    1A8C : 12                  		db 12h
    4591/    1A8D : 00                  		db  0
    4592/    1A8E : 00                  		db  0
    4593/    1A8F : 00                  		db  0
    4594/    1A90 : 00                  		db  0
    4595/    1A91 : 00                  		db  0
    4596/    1A92 : 00                  		db  0
    4597/    1A93 : 00                  		db  0
    4598/    1A94 : 00                  		db  0
    4599/    1A95 : 00                  		db  0
    4600/    1A96 : 00                  		db  0
    4601/    1A97 : 00                  		db  0
    4602/    1A98 : 00                  		db  0
    4603/    1A99 : 00                  		db  0
    4604/    1A9A : 00                  		db  0
    4605/    1A9B : 00                  		db  0
    4606/    1A9C : 00                  		db  0
    4607/    1A9D : 00                  		db  0
    4608/    1A9E : 00                  SFX_CHANNEL_YM4_STEREO:		db  0
    4609/    1A9F : 00                  		db  0
    4610/    1AA0 : 53 46 58 59 4D 35   		db  "SFXYM5"
    4611/    1AA6 :                     		align	10h
    4612/    1AB0 :                     SFX_CHANNEL_YM5:
    4613/    1AB0 : 00                  		db 0
    4614/    1AB1 : 00                  		db 0
    4615/    1AB2 : 00                  		db 0
    4616/    1AB3 :                     SFX_CHANNEL_YM5_NOT_IN_USE:
    4617/    1AB3 : 01                  		db 1
    4618/    1AB4 : 0E                  		db 0Eh
    4619/    1AB5 : 00                  		db  0
    4620/    1AB6 : 01                  		db  1
    4621/    1AB7 : 18                  		db 18h
    4622/    1AB8 : 00                  		db  0
    4623/    1AB9 : 00                  		db  0
    4624/    1ABA : 00                  		db  0
    4625/    1ABB : 6B                  		db 6Bh
    4626/    1ABC : 12                  		db 12h
    4627/    1ABD : 00                  		db  0
    4628/    1ABE : 00                  		db  0
    4629/    1ABF : 00                  		db  0
    4630/    1AC0 : 00                  		db  0
    4631/    1AC1 : 00                  		db  0
    4632/    1AC2 : 00                  		db  0
    4633/    1AC3 : 00                  		db  0
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 79 - 8/17/2019 18:52:23


    4634/    1AC4 : 00                  		db  0
    4635/    1AC5 : 00                  		db  0
    4636/    1AC6 : 00                  		db  0
    4637/    1AC7 : 00                  		db  0
    4638/    1AC8 : 00                  		db  0
    4639/    1AC9 : 00                  		db  0
    4640/    1ACA : 00                  		db  0
    4641/    1ACB : 00                  		db  0
    4642/    1ACC : 00                  		db  0
    4643/    1ACD : 00                  		db  0
    4644/    1ACE : 00                  SFX_CHANNEL_YM5_STEREO:		db  0
    4645/    1ACF : 00                  		db  0
    4646/    1AD0 : 53 46 58 59 4D 36   		db  "SFXYM6"
    4647/    1AD6 :                     		align	10h
    4648/    1AE0 :                     SFX_CHANNEL_YM6:
    4649/    1AE0 : 00                  		db 0
    4650/    1AE1 : 00                  		db 0
    4651/    1AE2 : 00                  		db 0
    4652/    1AE3 :                     SFX_CHANNEL_YM6_NOT_IN_USE:
    4653/    1AE3 : 01                  		db 1
    4654/    1AE4 : 0E                  		db 0Eh
    4655/    1AE5 : 00                  		db  0
    4656/    1AE6 : 01                  		db  1
    4657/    1AE7 : 18                  		db 18h
    4658/    1AE8 : 00                  		db  0
    4659/    1AE9 : 00                  		db  0
    4660/    1AEA : 00                  		db  0
    4661/    1AEB : 6B                  		db 6Bh
    4662/    1AEC : 12                  		db 12h
    4663/    1AED : 00                  		db  0
    4664/    1AEE : 00                  		db  0
    4665/    1AEF : 00                  		db  0
    4666/    1AF0 : 00                  		db  0
    4667/    1AF1 : 00                  		db  0
    4668/    1AF2 : 00                  		db  0
    4669/    1AF3 : 00                  		db  0
    4670/    1AF4 : 00                  		db  0
    4671/    1AF5 : 00                  		db  0
    4672/    1AF6 : 00                  		db  0
    4673/    1AF7 : 00                  		db  0
    4674/    1AF8 : 00                  		db  0
    4675/    1AF9 : 00                  		db  0
    4676/    1AFA : 00                  		db  0
    4677/    1AFB : 00                  		db  0
    4678/    1AFC : 00                  		db  0
    4679/    1AFD : 00                  		db  0
    4680/    1AFE : 00                  SFX_CHANNEL_YM6_STEREO:		db  0
    4681/    1AFF : 00                  		db  0
    4682/    1B00 : 53 46 58 54 4F 4E   		db  "SFXTONE1"
                    45 31 
    4683/    1B08 :                     		align	10h
    4684/    1B10 :                     SFX_CHANNEL_PSG1:
    4685/    1B10 : 00                  		db 0
    4686/    1B11 : 00                  		db 0
    4687/    1B12 : 00                  		db 0
    4688/    1B13 :                     SFX_CHANNEL_PSG1_NOT_IN_USE:
    4689/    1B13 : 01                  		db 1
    4690/    1B14 : 0E                  		db 0Eh
    4691/    1B15 : 00                  		db  0
    4692/    1B16 : 01                  		db  1
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 80 - 8/17/2019 18:52:23


    4693/    1B17 : 18                  		db 18h
    4694/    1B18 : 00                  		db  0
    4695/    1B19 : 00                  		db  0
    4696/    1B1A : 00                  		db  0
    4697/    1B1B : 6B                  		db 6Bh
    4698/    1B1C : 12                  		db 12h
    4699/    1B1D : 00                  		db  0
    4700/    1B1E : 00                  		db  0
    4701/    1B1F : 00                  		db  0
    4702/    1B20 : 00                  		db  0
    4703/    1B21 : 00                  		db  0
    4704/    1B22 : 00                  		db  0
    4705/    1B23 : 00                  		db  0
    4706/    1B24 : 00                  		db  0
    4707/    1B25 : 00                  		db  0
    4708/    1B26 :                     		align	10h
    4709/    1B30 : 53 46 58 54 4F 4E   		db  "SFXTONE2"
                    45 32 
    4710/    1B38 :                     		align	10h
    4711/    1B40 :                     SFX_CHANNEL_PSG2:
    4712/    1B40 : 00                  		db 0
    4713/    1B41 : 00                  		db 0
    4714/    1B42 : 00                  		db 0
    4715/    1B43 :                     SFX_CHANNEL_PSG2_NOT_IN_USE:
    4716/    1B43 : 01                  		db 1
    4717/    1B44 : 0E                  		db 0Eh
    4718/    1B45 : 00                  		db  0
    4719/    1B46 : 01                  		db  1
    4720/    1B47 : 18                  		db 18h
    4721/    1B48 : 00                  		db  0
    4722/    1B49 : 00                  		db  0
    4723/    1B4A : 00                  		db  0
    4724/    1B4B : 6B                  		db 6Bh
    4725/    1B4C : 12                  		db 12h
    4726/    1B4D : 00                  		db  0
    4727/    1B4E : 00                  		db  0
    4728/    1B4F : 00                  		db  0
    4729/    1B50 : 00                  		db  0
    4730/    1B51 : 00                  		db  0
    4731/    1B52 : 00                  		db  0
    4732/    1B53 : 00                  		db  0
    4733/    1B54 : 00                  		db  0
    4734/    1B55 : 00                  		db  0
    4735/    1B56 : 00                  		db  0
    4736/    1B57 : 00                  		db  0
    4737/    1B58 : 00                  		db  0
    4738/    1B59 :                     		align	10h
    4739/    1B60 : 53 46 58 54 4F 4E   		db  "SFXTONE3"
                    45 33 
    4740/    1B68 :                     		align	10h
    4741/    1B70 :                     SFX_CHANNEL_PSG3:
    4742/    1B70 : 00                  		db 0
    4743/    1B71 : 00                  		db 0
    4744/    1B72 : 00                  		db 0
    4745/    1B73 :                     SFX_CHANNEL_PSG3_NOT_IN_USE:
    4746/    1B73 : 01                  		db 1
    4747/    1B74 : 0E                  		db 0Eh
    4748/    1B75 : 00                  		db  0
    4749/    1B76 : 01                  		db  1
    4750/    1B77 : 18                  		db 18h
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 81 - 8/17/2019 18:52:23


    4751/    1B78 : 00                  		db  0
    4752/    1B79 : 00                  		db  0
    4753/    1B7A : 00                  		db  0
    4754/    1B7B : 6B                  		db 6Bh
    4755/    1B7C : 12                  		db 12h
    4756/    1B7D : 00                  		db  0
    4757/    1B7E : 00                  		db  0
    4758/    1B7F : 00                  		db  0
    4759/    1B80 : 00                  		db  0
    4760/    1B81 : 00                  		db  0
    4761/    1B82 : 00                  		db  0
    4762/    1B83 : 00                  		db  0
    4763/    1B84 : 00                  		db  0
    4764/    1B85 : 00                  		db  0
    4765/    1B86 : 00                  		db  0
    4766/    1B87 : 00                  		db  0
    4767/    1B88 : 00                  		db  0
    4768/    1B89 : 00                  		db  0
    4769/    1B8A : 00                  		db  0
    4770/    1B8B : 00                  		db  0
    4771/    1B8C : 00                  		db  0
    4772/    1B8D : 00                  		db  0
    4773/    1B8E :                     		align	10h
    4774/    1B90 : 53 46 58 4E 4F 49   		db  "SFXNOISE"
                    53 45 
    4775/    1B98 :                     		align	10h
    4776/    1BA0 :                     SFX_CHANNEL_NOISE:
    4777/    1BA0 : 00                  		db 0
    4778/    1BA1 : 00                  		db 0
    4779/    1BA2 : 00                  		db 0
    4780/    1BA3 :                     SFX_CHANNEL_NOISE_NOT_IN_USE:
    4781/    1BA3 : 01                  		db 1
    4782/    1BA4 : 0E                  		db 0Eh
    4783/    1BA5 : 00                  		db  0
    4784/    1BA6 : 01                  		db  1
    4785/    1BA7 : 18                  		db 18h
    4786/    1BA8 : 00                  		db  0
    4787/    1BA9 : 00                  		db  0
    4788/    1BAA : 00                  		db  0
    4789/    1BAB : 6B                  		db 6Bh
    4790/    1BAC : 12                  		db 12h
    4791/    1BAD : 00                  		db  0
    4792/    1BAE : 00                  		db  0
    4793/    1BAF : 00                  		db  0
    4794/    1BB0 : 00                  		db  0
    4795/    1BB1 : 00                  		db  0
    4796/    1BB2 : 00                  		db  0
    4797/    1BB3 : 00                  		db  0
    4798/    1BB4 : 00                  		db  0
    4799/    1BB5 : 00                  		db  0
    4800/    1BB6 : 00                  		db  0
    4801/    1BB7 : 00                  		db  0
    4802/    1BB8 : 00                  		db  0
    4803/    1BB9 : 00                  		db  0
    4804/    1BBA : 00                  		db  0
    4805/    1BBB : 00                  		db  0
    4806/    1BBC :                     		align	10h
    4807/    1BC0 : 53 41 56 45 44 59   		db  "SAVEDYM1"
                    4D 31 
    4808/    1BC8 :                     		align	10h
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 82 - 8/17/2019 18:52:23


    4809/    1BD0 :                     SAVED_MUSIC_CHANNEL_YM1:
    4810/    1BD0 : 00                  		db 0
    4811/    1BD1 : 00                  		db 0
    4812/    1BD2 : 00                  		db 0
    4813/    1BD3 :                     SAVED_MUSIC_CHANNEL_YM1_NOT_IN_USE:
    4814/    1BD3 : 01                  		db 1
    4815/    1BD4 : 0E                  		db 0Eh
    4816/    1BD5 : 00                  		db  0
    4817/    1BD6 : 01                  		db  1
    4818/    1BD7 : 18                  		db 18h
    4819/    1BD8 : 00                  		db  0
    4820/    1BD9 : 00                  		db  0
    4821/    1BDA : 00                  		db  0
    4822/    1BDB : 6B                  		db 6Bh
    4823/    1BDC : 12                  		db 12h
    4824/    1BDD : 00                  		db  0
    4825/    1BDE : 00                  		db  0
    4826/    1BDF : 00                  		db  0
    4827/    1BE0 : 00                  		db  0
    4828/    1BE1 : 00                  		db  0
    4829/    1BE2 :                     		align	10h
    4830/    1BF0 : 53 41 56 45 44 59   		db  "SAVEDYM2"
                    4D 32 
    4831/    1BF8 :                     		align	10h
    4832/    1C00 :                     SAVED_MUSIC_CHANNEL_YM2:
    4833/    1C00 : 00                  		db 0
    4834/    1C01 : 00                  		db 0
    4835/    1C02 : 00                  		db 0
    4836/    1C03 :                     SAVED_MUSIC_CHANNEL_YM2_NOT_IN_USE:
    4837/    1C03 : 01                  		db 1
    4838/    1C04 : 0E                  		db 0Eh
    4839/    1C05 : 00                  		db  0
    4840/    1C06 : 01                  		db  1
    4841/    1C07 : 18                  		db 18h
    4842/    1C08 : 00                  		db  0
    4843/    1C09 : 00                  		db  0
    4844/    1C0A : 00                  		db  0
    4845/    1C0B : 6B                  		db 6Bh
    4846/    1C0C : 12                  		db 12h
    4847/    1C0D : 00                  		db  0
    4848/    1C0E : 00                  		db  0
    4849/    1C0F : 00                  		db  0
    4850/    1C10 : 00                  		db  0
    4851/    1C11 : 00                  		db  0
    4852/    1C12 : 00                  		db  0
    4853/    1C13 : 00                  		db  0
    4854/    1C14 : 00                  		db  0
    4855/    1C15 : 00                  		db  0
    4856/    1C16 : 00                  		db  0
    4857/    1C17 : 00                  		db  0
    4858/    1C18 : 00                  		db  0
    4859/    1C19 : 00                  		db  0
    4860/    1C1A : 00                  		db  0
    4861/    1C1B :                     		align	10h
    4862/    1C20 : 53 41 56 45 44 59   		db  "SAVEDYM3"
                    4D 33 
    4863/    1C28 :                     		align	10h
    4864/    1C30 :                     SAVED_MUSIC_CHANNEL_YM3:
    4865/    1C30 : 00                  		db 0
    4866/    1C31 : 00                  		db 0
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 83 - 8/17/2019 18:52:23


    4867/    1C32 : 00                  		db 0
    4868/    1C33 :                     SAVED_MUSIC_CHANNEL_YM3_NOT_IN_USE:
    4869/    1C33 : 01                  		db 1
    4870/    1C34 : 0E                  		db 0Eh
    4871/    1C35 : 00                  		db  0
    4872/    1C36 : 01                  		db  1
    4873/    1C37 : 18                  		db 18h
    4874/    1C38 : 00                  		db  0
    4875/    1C39 : 00                  		db  0
    4876/    1C3A : 00                  		db  0
    4877/    1C3B : 6B                  		db 6Bh
    4878/    1C3C : 12                  		db 12h
    4879/    1C3D : 00                  		db  0
    4880/    1C3E : 00                  		db  0
    4881/    1C3F : 00                  		db  0
    4882/    1C40 : 00                  		db  0
    4883/    1C41 : 00                  		db  0
    4884/    1C42 : 00                  		db  0
    4885/    1C43 : 00                  		db  0
    4886/    1C44 : 00                  		db  0
    4887/    1C45 : 00                  		db  0
    4888/    1C46 : 00                  		db  0
    4889/    1C47 : 00                  		db  0
    4890/    1C48 : 00                  		db  0
    4891/    1C49 : 00                  		db  0
    4892/    1C4A : 00                  		db  0
    4893/    1C4B : 00                  		db  0
    4894/    1C4C :                     		align	10h
    4895/    1C50 : 53 41 56 45 44 59   		db  "SAVEDYM4"
                    4D 34 
    4896/    1C58 :                     		align	10h
    4897/    1C60 :                     SAVED_MUSIC_CHANNEL_YM4:
    4898/    1C60 : 00                  		db 0
    4899/    1C61 : 00                  		db 0
    4900/    1C62 : 00                  		db 0
    4901/    1C63 :                     SAVED_MUSIC_CHANNEL_YM4_NOT_IN_USE:
    4902/    1C63 : 01                  		db 1
    4903/    1C64 : 0E                  		db 0Eh
    4904/    1C65 : 00                  		db  0
    4905/    1C66 : 01                  		db  1
    4906/    1C67 : 18                  		db 18h
    4907/    1C68 : 00                  		db  0
    4908/    1C69 : 00                  		db  0
    4909/    1C6A : 00                  		db  0
    4910/    1C6B : 6B                  		db 6Bh
    4911/    1C6C : 12                  		db 12h
    4912/    1C6D : 00                  		db  0
    4913/    1C6E : 00                  		db  0
    4914/    1C6F : 00                  		db  0
    4915/    1C70 : 00                  		db  0
    4916/    1C71 : 00                  		db  0
    4917/    1C72 : 00                  		db  0
    4918/    1C73 : 00                  		db  0
    4919/    1C74 : 00                  		db  0
    4920/    1C75 : 00                  		db  0
    4921/    1C76 : 00                  		db  0
    4922/    1C77 : 00                  		db  0
    4923/    1C78 : 00                  		db  0
    4924/    1C79 :                     		align	10h
    4925/    1C80 : 53 41 56 45 44 59   		db  "SAVEDYM5"
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 84 - 8/17/2019 18:52:23


                    4D 35 
    4926/    1C88 :                     		align	10h
    4927/    1C90 :                     SAVED_MUSIC_CHANNEL_YM5:
    4928/    1C90 : 00                  		db 0
    4929/    1C91 : 00                  		db 0
    4930/    1C92 : 00                  		db 0
    4931/    1C93 :                     SAVED_MUSIC_CHANNEL_YM5_NOT_IN_USE:
    4932/    1C93 : 01                  		db 1
    4933/    1C94 : 0E                  		db 0Eh
    4934/    1C95 : 00                  		db  0
    4935/    1C96 : 01                  		db  1
    4936/    1C97 : 18                  		db 18h
    4937/    1C98 : 00                  		db  0
    4938/    1C99 : 00                  		db  0
    4939/    1C9A : 00                  		db  0
    4940/    1C9B : 6B                  		db 6Bh
    4941/    1C9C : 12                  		db 12h
    4942/    1C9D : 00                  		db  0
    4943/    1C9E : 00                  		db  0
    4944/    1C9F : 00                  		db  0
    4945/    1CA0 : 00                  		db  0
    4946/    1CA1 : 00                  		db  0
    4947/    1CA2 : 00                  		db  0
    4948/    1CA3 : 00                  		db  0
    4949/    1CA4 : 00                  		db  0
    4950/    1CA5 : 00                  		db  0
    4951/    1CA6 : 00                  		db  0
    4952/    1CA7 : 00                  		db  0
    4953/    1CA8 : 00                  		db  0
    4954/    1CA9 :                     		align	10h
    4955/    1CB0 : 53 41 56 45 44 59   		db  "SAVEDYM6"
                    4D 36 
    4956/    1CB8 :                     		align	10h
    4957/    1CC0 :                     SAVED_MUSIC_CHANNEL_YM6:
    4958/    1CC0 : 00                  		db 0
    4959/    1CC1 : 00                  		db 0
    4960/    1CC2 : 00                  		db 0
    4961/    1CC3 :                     SAVED_MUSIC_CHANNEL_YM6_NOT_IN_USE:
    4962/    1CC3 : 01                  		db 1
    4963/    1CC4 : 0E                  		db 0Eh
    4964/    1CC5 : 00                  		db  0
    4965/    1CC6 : 01                  		db  1
    4966/    1CC7 : 18                  		db 18h
    4967/    1CC8 : 00                  		db  0
    4968/    1CC9 : 00                  		db  0
    4969/    1CCA : 00                  		db  0
    4970/    1CCB : 6B                  		db 6Bh
    4971/    1CCC : 12                  		db 12h
    4972/    1CCD : 00                  		db  0
    4973/    1CCE : 00                  		db  0
    4974/    1CCF : 00                  		db  0
    4975/    1CD0 : 00                  		db  0
    4976/    1CD1 : 00                  		db  0
    4977/    1CD2 : 00                  		db  0
    4978/    1CD3 : 00                  		db  0
    4979/    1CD4 : 00                  		db  0
    4980/    1CD5 : 00                  		db  0
    4981/    1CD6 : 00                  		db  0
    4982/    1CD7 : 00                  		db  0
    4983/    1CD8 : 00                  		db  0
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 85 - 8/17/2019 18:52:23


    4984/    1CD9 : 00                  		db  0
    4985/    1CDA :                     		align	10h
    4986/    1CE0 : 53 41 56 45 44 54   		db  "SAVEDTN1"
                    4E 31 
    4987/    1CE8 :                     		align	10h
    4988/    1CF0 :                     SAVED_MUSIC_CHANNEL_PSG1:
    4989/    1CF0 : 00                  		db 0
    4990/    1CF1 : 00                  		db 0
    4991/    1CF2 : 00                  		db 0
    4992/    1CF3 :                     SAVED_MUSIC_CHANNEL_PSG1_NOT_IN_USE:
    4993/    1CF3 : 01                  		db 1
    4994/    1CF4 : 0E                  		db 0Eh
    4995/    1CF5 : 00                  		db  0
    4996/    1CF6 : 01                  		db  1
    4997/    1CF7 : 18                  		db 18h
    4998/    1CF8 : 00                  		db  0
    4999/    1CF9 : 00                  		db  0
    5000/    1CFA : 00                  		db  0
    5001/    1CFB : 6B                  		db 6Bh
    5002/    1CFC : 12                  		db 12h
    5003/    1CFD : 00                  		db  0
    5004/    1CFE : 00                  		db  0
    5005/    1CFF : 00                  		db  0
    5006/    1D00 : 00                  		db  0
    5007/    1D01 : 00                  		db  0
    5008/    1D02 : 00                  		db  0
    5009/    1D03 : 00                  		db  0
    5010/    1D04 : 00                  		db  0
    5011/    1D05 : 00                  		db  0
    5012/    1D06 : 00                  		db  0
    5013/    1D07 : 00                  		db  0
    5014/    1D08 : 00                  		db  0
    5015/    1D09 : 00                  		db  0
    5016/    1D0A : 00                  		db  0
    5017/    1D0B :                     		align	10h
    5018/    1D10 : 53 41 56 45 44 54   		db  "SAVEDTN2"
                    4E 32 
    5019/    1D18 :                     SAVED_MUSIC_CHANNEL_PSG2:
    5020/    1D18 : 00                  		db 0
    5021/    1D19 : 00                  		db 0
    5022/    1D1A : 00                  		db 0
    5023/    1D1B :                     SAVED_MUSIC_CHANNEL_PSG2_NOT_IN_USE:
    5024/    1D1B : 01                  		db 1
    5025/    1D1C : 0E                  		db 0Eh
    5026/    1D1D : 00                  		db  0
    5027/    1D1E : 01                  		db  1
    5028/    1D1F : 18                  		db 18h
    5029/    1D20 : 00                  		db  0
    5030/    1D21 : 00                  		db  0
    5031/    1D22 : 00                  		db  0
    5032/    1D23 : 6B                  		db 6Bh
    5033/    1D24 : 12                  		db 12h
    5034/    1D25 : 00                  		db  0
    5035/    1D26 : 00                  		db  0
    5036/    1D27 : 00                  		db  0
    5037/    1D28 : 00                  		db  0
    5038/    1D29 : 00                  		db  0
    5039/    1D2A : 00                  		db  0
    5040/    1D2B : 00                  		db  0
    5041/    1D2C : 00                  		db  0
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 86 - 8/17/2019 18:52:23


    5042/    1D2D : 00                  		db  0
    5043/    1D2E : 00                  		db  0
    5044/    1D2F : 00                  		db  0
    5045/    1D30 : 00                  		db  0
    5046/    1D31 : 00                  		db  0
    5047/    1D32 : 00                  		db  0
    5048/    1D33 : 00                  		db  0
    5049/    1D34 :                     		align	10h
    5050/    1D40 : 53 41 56 45 44 54   		db  "SAVEDTN3"
                    4E 33 
    5051/    1D48 :                     		align	10h
    5052/    1D50 :                     SAVED_MUSIC_CHANNEL_PSG3:
    5053/    1D50 : 00                  		db 0
    5054/    1D51 : 00                  		db 0
    5055/    1D52 : 00                  		db 0
    5056/    1D53 :                     SAVED_MUSIC_CHANNEL_PSG3_NOT_IN_USE:
    5057/    1D53 : 01                  		db 1
    5058/    1D54 : 0E                  		db 0Eh
    5059/    1D55 : 00                  		db  0
    5060/    1D56 : 01                  		db  1
    5061/    1D57 : 18                  		db 18h
    5062/    1D58 : 00                  		db  0
    5063/    1D59 : 00                  		db  0
    5064/    1D5A : 00                  		db  0
    5065/    1D5B : 6B                  		db 6Bh
    5066/    1D5C : 12                  		db 12h
    5067/    1D5D : 00                  		db  0
    5068/    1D5E : 00                  		db  0
    5069/    1D5F : 00                  		db  0
    5070/    1D60 : 00                  		db  0
    5071/    1D61 : 00                  		db  0
    5072/    1D62 : 00                  		db  0
    5073/    1D63 : 00                  		db  0
    5074/    1D64 : 00                  		db  0
    5075/    1D65 : 00                  		db  0
    5076/    1D66 : 00                  		db  0
    5077/    1D67 : 00                  		db  0
    5078/    1D68 : 00                  		db  0
    5079/    1D69 : 00                  		db  0
    5080/    1D6A : 00                  		db  0
    5081/    1D6B :                     		align	10h
    5082/    1D70 : 53 41 56 45 44 4E   		db  "SAVEDNOI"
                    4F 49 
    5083/    1D78 :                     		align	10h
    5084/    1D80 :                     SAVED_MUSIC_CHANNEL_NOISE:
    5085/    1D80 : 00                  		db 0
    5086/    1D81 : 00                  		db 0
    5087/    1D82 : 00                  		db 0
    5088/    1D83 :                     SAVED_MUSIC_CHANNEL_NOISE_NOT_IN_USE:
    5089/    1D83 : 01                  		db 1
    5090/    1D84 : 0E                  		db 0Eh
    5091/    1D85 : 00                  		db  0
    5092/    1D86 : 01                  		db  1
    5093/    1D87 : 18                  		db 18h
    5094/    1D88 : 00                  		db  0
    5095/    1D89 : 00                  		db  0
    5096/    1D8A : 00                  		db  0
    5097/    1D8B : 6B                  		db 6Bh
    5098/    1D8C : 12                  		db 12h
    5099/    1D8D : 00                  		db  0
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 87 - 8/17/2019 18:52:23


    5100/    1D8E : 00                  		db  0
    5101/    1D8F : 00                  		db  0
    5102/    1D90 : 00                  		db  0
    5103/    1D91 : 00                  		db  0
    5104/    1D92 : 00                  		db  0
    5105/    1D93 : 00                  		db  0
    5106/    1D94 : 00                  		db  0
    5107/    1D95 : 00                  		db  0
    5108/    1D96 : 00                  		db  0
    5109/    1D97 : 00                  		db  0
    5110/    1D98 : 00                  		db  0
    5111/    1D99 : 00                  		db  0
    5112/    1D9A : 00                  		db  0
    5113/    1D9B : 00                  		db  0
    5114/    1D9C : 00                  		db  0
    5115/    1D9D : 00                  		db  0
    5116/    1D9E : 00                  		db  0
    5117/    1D9F : 00                  		db  0
    5118/    1DA0 : 00                  		db  0
    5119/    1DA1 : 00                  		db  0
    5120/    1DA2 : 00                  		db  0
    5121/    1DA3 : 00                  		db  0
    5122/    1DA4 : 00                  		db  0
    5123/    1DA5 : 00                  		db  0
    5124/    1DA6 : 00                  		db  0
    5125/    1DA7 : 00                  		db  0
    5126/    1DA8 :                     END_OF_DRIVER:
    5127/    1DA8 : =>TRUE              	if MOMPASS==2
    5128/    1DA8 : =>FALSE             		if $ > 1FC0h
    5129/    1DA8 :                     			fatal "Driver too big to fit in Z80 Ram ; the last offset must be < 1FC0h. It is currently \{END_OF_DRIVER}h"
    5130/    1DA8 : =>TRUE              		else
Last offset: 1DA8h
    5131/    1DA8 :                     			message "Last offset: \{END_OF_DRIVER}h"
    5132/    1DA8 : [5128]              		endif
    5133/    1DA8 : [5127]              	endif
    5134/    1DA8 :                     
    5135/    1DA8 :                     ; =============== S U B R O U T I N E =======================================
    5136/    1DA8 :                     
    5137/    1DA8 :                     ; end of 'ROM'
    5138/    1DA8 :                     
    5139/    1DA8 :                     		END
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 88 - 8/17/2019 18:52:23


  symbol table (* = unused):
  ------------------------

 ACTIVATE_STEREO_OUTPUTS :      285 C |  APPLY_VIBRATO :                E2D C |
*ARCHITECTURE :  i386-unknown-win32 - |  BANK_REGISTER :               6000 - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
 BYTE_126B :                   143A C |  BYTE_126D :                   143C C |
 BYTE_1272 :                   1441 C |  BYTE_127D :                   144C C |
 BYTE_1288 :                   1457 C |  BYTE_1293 :                   1462 C |
 BYTE_129E :                   146D C |  BYTE_12A0 :                   146F C |
 BYTE_12A2 :                   1471 C |  BYTE_12A4 :                   1473 C |
 BYTE_12A6 :                   1475 C |  BYTE_12A8 :                   1477 C |
 BYTE_12AA :                   1479 C |  BYTE_12AC :                   147B C |
 BYTE_12AE :                   147D C |  BYTE_12B0 :                   147F C |
 BYTE_12D2 :                   14A1 C |  BYTE_12D4 :                   14A3 C |
 BYTE_12E6 :                   14B5 C |  BYTE_12F4 :                   14C3 C |
 BYTE_130B :                   14DA C |  BYTE_1312 :                   14E1 C |
 BYTE_131D :                   14EC C |  BYTE_1325 :                   14F4 C |
 BYTE_132A :                   14F9 C |  BYTE_1338 :                   1507 C |
 BYTE_133E :                   150D C |  BYTE_1349 :                   1518 C |
 BYTE_134B :                   151A C |  BYTE_134F :                   151E C |
 BYTE_1355 :                   1524 C |  BYTE_135D :                   152C C |
 CALL_YM2_INSTEAD_OF_YM1 :     1545 C | *CASESENSITIVE :                  0 - |
 COMMANDS_COUNTER :            1FF0 - |  COMMAND_F0 :                   747 C |
*CONSTPI :        3.141592653589793 - |  COPY_BYTE :                   1272 C |
 COPY_CHANNEL_DATA :           1264 C |  COPY_CHANNEL_DATA_LOOP :      1267 C |
 CURRENTLY_FADING_OUT :        1543 C |  CURRENTLY_MANAGING_SFX :      1544 C |
*CURRENTLY_MANAGING_SFX_TYPE_2 :                                       1546 C |
 CURRENT_CHANNEL :             1542 C |  CURRENT_PSG_CHANNEL :         1541 C |
 DAC_BANK :                    154C C |  DAC_BANK_1 :                    3A - |
 DAC_LAST_OFFSET :             1FF4 - |  DAC_LOOP :                      4B C |
 DAC_REMAINING_LENGTH :        1FF6 - |  DAC_SETNEWSAMPLE :             5C2 C |
*DATE :                   8/17/2019 - |  ENDPART :                      812 C |
 END_OF_DRIVER :               1DA8 C |  FADE_IN_PARAMETERS :          1FFC - |
 FADE_IN_TIMER :               1552 C |  FADE_OUT :                    11E7 C |
 FADE_OUT_COUNTER :            1549 C |  FADE_OUT_LENGTH :             1547 C |
 FADE_OUT_TIMER :              1548 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  IFCOMMANDUNIDENTIFIED :        CD4 C |
*INEXTMODE :                      0 - | *INIT :                           0 C |
 INITCHANNELDATAFORSFX :        34E C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  LAST_COMMAND :                1FF1 - |
*LISTON :                         1 - |  LOADANYBANK :                  143 C |
 LOADDACSOUND :                 158 C |  LOADNOTESHIFT :               1118 C |
 LOADVIBRATO :                 10CA C |  LOAD_END :                     2B8 C |
 LOAD_MUSIC :                   1FF C |  LOAD_MUSIC_CHANNELS :          241 C |
 LOAD_NOTE :                    69F C |  LOAD_NOTE_SHIFT :              6CC C |
 LOAD_SFX :                     2C0 C |  LOAD_SFX_CHANNELS :            2FB C |
 LOAD_SFX_TYPE_2 :              318 C |  LOAD_VIBRATO :                 6B8 C |
 LOC_1029 :                    1122 C |  LOC_1049 :                    1142 C |
 LOC_105B :                    1154 C |  LOC_106B :                    1164 C |
 LOC_1081 :                    117A C |  LOC_1086 :                    117F C |
 LOC_1089 :                    1182 C |  LOC_1099 :                    1192 C |
 LOC_10AF :                    11A8 C |  LOC_10B6 :                    11AF C |
 LOC_10BB :                    11B4 C |  LOC_10CA :                    11C3 C |
 LOC_10D1 :                    11CA C |  LOC_10E3 :                    11DC C |
 LOC_1A0 :                      163 C |  LOC_201 :                      1DC C |
 LOC_201_1 :                    1F1 C |  LOC_28A :                      27C C |
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 89 - 8/17/2019 18:52:23


 LOC_2EA :                      30F C |  LOC_309 :                      31F C |
*LOC_32 :                        4D C |  LOC_324 :                      342 C |
 LOC_34 :                        4F C |  LOC_3B5 :                      3D3 C |
 LOC_3CC :                      3EA C |  LOC_3E3 :                      401 C |
 LOC_3FC :                      41A C |  LOC_42B :                      444 C |
 LOC_44C :                      465 C |  LOC_471 :                      488 C |
 LOC_475 :                      48C C |  LOC_4A :                        65 C |
 LOC_4DE :                      557 C |  LOC_562 :                      5E1 C |
 LOC_586 :                      612 C |  LOC_5A2 :                      62E C |
 LOC_5D7 :                      663 C |  LOC_636 :                      6E5 C |
 LOC_668 :                      717 C |  LOC_680 :                      72F C |
 LOC_68E :                      73D C |  LOC_69D :                      74C C |
 LOC_6AA :                      759 C |  LOC_6B :                        86 C |
 LOC_6D2 :                      781 C |  LOC_6DA :                      789 C |
 LOC_700 :                      7AF C |  LOC_711 :                      7C0 C |
 LOC_714 :                      7C3 C |  LOC_721 :                      7D0 C |
 LOC_72E :                      7DD C |  LOC_73A :                      7E9 C |
 LOC_757 :                      806 C |  LOC_773 :                      822 C |
 LOC_774 :                      823 C |  LOC_77D :                      82C C |
 LOC_7AE :                      85F C |  LOC_7BB :                      86C C |
 LOC_7D9 :                      88A C |  LOC_7E6 :                      897 C |
 LOC_834 :                      8E4 C |  LOC_838 :                      8E8 C |
 LOC_848 :                      8F8 C |  LOC_85 :                        A0 C |
 LOC_857 :                      907 C |  LOC_861 :                      911 C |
 LOC_86B :                      91B C |  LOC_875 :                      925 C |
 LOC_87F :                      92F C |  LOC_889 :                      939 C |
 LOC_88E :                      93E C |  LOC_8C0 :                      970 C |
 LOC_8D8 :                      988 C |  LOC_8E8 :                      998 C |
 LOC_8F2 :                      9A2 C |  LOC_8F7 :                      9A7 C |
 LOC_904 :                      9B4 C |  LOC_92C :                      9DC C |
 LOC_934 :                      9E4 C |  LOC_95A :                      A0A C |
 LOC_96B :                      A1B C |  LOC_96E :                      A1E C |
 LOC_97B :                      A2B C |  LOC_988 :                      A38 C |
 LOC_994 :                      A44 C |  LOC_9B1 :                      A61 C |
 LOC_9BD :                      A6D C |  LOC_9CD :                      A7D C |
 LOC_9CE :                      A7E C |  LOC_9D7 :                      A87 C |
 LOC_A0D :                      AC9 C |  LOC_A39 :                      AF5 C |
 LOC_A4 :                        BF C |  LOC_A63 :                      B1F C |
 LOC_A75 :                      B31 C |  LOC_A78 :                      B34 C |
 LOC_A79 :                      B35 C |  LOC_A85 :                      B41 C |
 LOC_AB6 :                      B81 C |  LOC_AC6 :                      B91 C |
 LOC_AF2 :                      BBD C |  LOC_B1C :                      BE7 C |
 LOC_B2E :                      BF9 C |  LOC_B31 :                      BFC C |
 LOC_B32 :                      BFD C |  LOC_B3E :                      C09 C |
 LOC_B68 :                      C41 C |  LOC_B6F :                      C48 C |
 LOC_B87 :                      C60 C | *LOC_B97 :                      C70 C |
*LOC_BCC :                      CA0 C |  LOC_C05 :                      CD9 C |
*LOC_C08 :                      CDC C |  LOC_C11 :                      CE5 C |
 LOC_C1B :                      CEF C |  LOC_C20 :                      CF4 C |
 LOC_C2D :                      D01 C |  LOC_C50 :                      D34 C |
 LOC_C62 :                      D46 C |  LOC_C8B :                      D6A C |
 LOC_C95 :                      D74 C |  LOC_C9F :                      D7E C |
 LOC_CB9 :                      D98 C |  LOC_CC3 :                      DA2 C |
 LOC_CD2 :                      DB1 C |  LOC_D1B :                      DFA C |
 LOC_D20 :                      DFF C |  LOC_D2D :                      E0C C |
 LOC_D32 :                      E11 C |  LOC_D3F :                      E1E C |
 LOC_D6A :                      E49 C |  LOC_D76 :                      E55 C |
 LOC_D88 :                      E67 C |  LOC_D91 :                      E70 C |
 LOC_D9D :                      E7C C |  LOC_DAA :                      E89 C |
 LOC_DB6 :                      E95 C |  LOC_DB9 :                      E98 C |
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 90 - 8/17/2019 18:52:23


 LOC_DBF :                      E9E C |  LOC_DE2 :                      EC1 C |
 LOC_DEF :                      ECE C |  LOC_DF2 :                      ED1 C |
 LOC_E5E :                      F58 C |  LOC_E61 :                      F5B C |
 LOC_E87 :                      F8C C |  LOC_E99 :                      F9E C |
 LOC_EBF :                      FBF C |  LOC_EC3 :                      FC3 C |
 LOC_ECD :                      FCD C |  LOC_ED7 :                      FD7 C |
 LOC_EE6 :                      FE6 C |  LOC_EFC :                      FFC C |
 LOC_F0B :                     100B C |  LOC_F10 :                     1010 C |
 LOC_F1D :                     101D C |  LOC_F22 :                     1022 C |
 LOC_F2F :                     102F C |  LOC_F3E :                     103E C |
 LOC_F4B :                     104B C |  LOC_F55 :                     1055 C |
 LOC_F78 :                     1078 C |  LOC_F85 :                     1085 C |
 LOC_F88 :                     1088 C |  LOC_FAF :                     10AF C |
 LOC_FBC :                     10BC C |  LOC_FEA :                     10EA C |
 LOC_NIMP :                     605 C |  LOC_NIMP2 :                    68B C |
 LOC_NIMP3 :                    AB9 C |  LOOPCOMMAND :                  CCA C |
 LOOP_COMMAND :                 6D6 C | *MACEXP :                         1 - |
 MAIN :                         18D C |  MAIN_LOOP :                     1E C |
*MOMCPU :                        80 - | *MOMCPUNAME :                   Z80 - |
 MUSIC_BANK :                  154D C |  MUSIC_BANK_1 :                  3B - |
 MUSIC_BANK_2 :                  3C - |  MUSIC_BANK_3 :                  3D - |
 MUSIC_CHANNEL_NOISE :         19C0 C |
*MUSIC_CHANNEL_NOISE_NOT_IN_USE :                                      19C3 C |
 MUSIC_CHANNEL_PSG1 :          1930 C |
*MUSIC_CHANNEL_PSG1_NOT_IN_USE :                                       1933 C |
*MUSIC_CHANNEL_PSG2 :          1960 C |
*MUSIC_CHANNEL_PSG2_NOT_IN_USE :                                       1963 C |
*MUSIC_CHANNEL_PSG3 :          1990 C |
*MUSIC_CHANNEL_PSG3_NOT_IN_USE :                                       1993 C |
 MUSIC_CHANNEL_YM1 :           1810 C |
*MUSIC_CHANNEL_YM1_NOT_IN_USE :                                        1813 C |
 MUSIC_CHANNEL_YM1_STEREO :    182E C |  MUSIC_CHANNEL_YM2 :           1840 C |
*MUSIC_CHANNEL_YM2_NOT_IN_USE :                                        1843 C |
 MUSIC_CHANNEL_YM2_STEREO :    185E C |  MUSIC_CHANNEL_YM3 :           1870 C |
*MUSIC_CHANNEL_YM3_NOT_IN_USE :                                        1873 C |
 MUSIC_CHANNEL_YM3_STEREO :    188E C |  MUSIC_CHANNEL_YM4 :           18A0 C |
*MUSIC_CHANNEL_YM4_NOT_IN_USE :                                        18A3 C |
 MUSIC_CHANNEL_YM4_STEREO :    18BE C |  MUSIC_CHANNEL_YM5 :           18D0 C |
*MUSIC_CHANNEL_YM5_NOT_IN_USE :                                        18D3 C |
 MUSIC_CHANNEL_YM5_STEREO :    18EE C |  MUSIC_CHANNEL_YM6 :           1900 C |
*MUSIC_CHANNEL_YM6_NOT_IN_USE :                                        1903 C |
 MUSIC_CHANNEL_YM6_STEREO :    191E C |  MUSIC_DOESNT_USE_SAMPLES :    1553 C |
 MUSIC_LEVEL :                 1FFD - | *NESTMAX :                      100 - |
 NEW_OPERATION :               1FFF - |  NEW_SAMPLE_TO_LOAD :          1FF8 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PARSEATNEWOFFSET :             CB3 C |  PARSEBYTE :                    C6D C |
 PARSELOOPCOMMAND :            1130 C |  PARSING_START :                63B C |
 PAUSE_SOUND :                   78 C |  PSG_CONDITIONNALINPUT :        F1A C |
 PSG_GETINSTRUMENTPOINTER :     F35 C |  PSG_LOADINSTRUMENT :           F45 C |
 PSG_PARSENOISEDATA :           F75 C |  PSG_PARSETONEDATA :            D0A C |
 PSG_PARSE_AT_NEW_OFFSET :      D67 C |  PSG_PORT :                    7F11 - |
 PSG_RELEASE_KEY :              EB3 C |  PSG_SETCHANNELATTENUATION :    5B5 C |
 PT_PITCH_EFFECTS :            141A C |  PT_PSG_INSTRUMENTS :          1481 C |
*PT_SFX :                      1500 - | *RELAXED :                        0 - |
 RELEASE_KEY :                 106A C |  RESUME_MUSIC :                122F C |
 RESUME_MUSIC_LOOP :           1253 C |  RETURN_BDE :                   CB2 C |
*SAVED_MUSIC_CHANNEL_NOISE :   1D80 C |
*SAVED_MUSIC_CHANNEL_NOISE_NOT_IN_USE :                                1D83 C |
*SAVED_MUSIC_CHANNEL_PSG1 :    1CF0 C |
*SAVED_MUSIC_CHANNEL_PSG1_NOT_IN_USE :                                 1CF3 C |
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 91 - 8/17/2019 18:52:23


*SAVED_MUSIC_CHANNEL_PSG2 :    1D18 C |
*SAVED_MUSIC_CHANNEL_PSG2_NOT_IN_USE :                                 1D1B C |
*SAVED_MUSIC_CHANNEL_PSG3 :    1D50 C |
*SAVED_MUSIC_CHANNEL_PSG3_NOT_IN_USE :                                 1D53 C |
 SAVED_MUSIC_CHANNEL_YM1 :     1BD0 C |
*SAVED_MUSIC_CHANNEL_YM1_NOT_IN_USE :                                  1BD3 C |
*SAVED_MUSIC_CHANNEL_YM2 :     1C00 C |
*SAVED_MUSIC_CHANNEL_YM2_NOT_IN_USE :                                  1C03 C |
*SAVED_MUSIC_CHANNEL_YM3 :     1C30 C |
*SAVED_MUSIC_CHANNEL_YM3_NOT_IN_USE :                                  1C33 C |
*SAVED_MUSIC_CHANNEL_YM4 :     1C60 C |
*SAVED_MUSIC_CHANNEL_YM4_NOT_IN_USE :                                  1C63 C |
*SAVED_MUSIC_CHANNEL_YM5 :     1C90 C |
*SAVED_MUSIC_CHANNEL_YM5_NOT_IN_USE :                                  1C93 C |
*SAVED_MUSIC_CHANNEL_YM6 :     1CC0 C |
*SAVED_MUSIC_CHANNEL_YM6_NOT_IN_USE :                                  1CC3 C |
 SAVED_YM_TIMER_VALUE :        1FFA - |  SAVE_MUSIC :                  1204 C |
 SAVE_MUSIC_LOOP :             121E C |  SENDDACBYTE :                 127D C |
 SENDDACBYTE_LDSFXBK :         12D0 C |  SENDDACBYTE_RET :             12D5 C |
 SENDDACBYTE_YMREQUEST :       12A0 C |  SEND_PSG_DATA :                F30 C |
 SETINSTRUMENT :                8EB C |  SETKEYRELEASE :                CB6 C |
 SETRELEASE :                  10BA C |  SETSTEREO :                    CC0 C |
 SET_INSTRUMENT :               692 C |  SET_NEW_NOTE :                 DCD C |
 SET_SLIDE_OR_KEY_RELEASE :     6AE C |  SET_STEREO :                   6C2 C |
 SET_TIMER :                    D88 C |  SFX_BANK :                       0 - |
 SFX_BANK_OFFSET :             8000 - | *SFX_CHANNEL_NOISE :           1BA0 C |
*SFX_CHANNEL_NOISE_NOT_IN_USE :                                        1BA3 C |
*SFX_CHANNEL_PSG1 :            1B10 C | *SFX_CHANNEL_PSG1_NOT_IN_USE : 1B13 C |
*SFX_CHANNEL_PSG2 :            1B40 C | *SFX_CHANNEL_PSG2_NOT_IN_USE : 1B43 C |
*SFX_CHANNEL_PSG3 :            1B70 C | *SFX_CHANNEL_PSG3_NOT_IN_USE : 1B73 C |
 SFX_CHANNEL_YM1 :             19F0 C | *SFX_CHANNEL_YM1_NOT_IN_USE :  19F3 C |
*SFX_CHANNEL_YM2 :             1A20 C | *SFX_CHANNEL_YM2_NOT_IN_USE :  1A23 C |
*SFX_CHANNEL_YM3 :             1A50 C | *SFX_CHANNEL_YM3_NOT_IN_USE :  1A53 C |
 SFX_CHANNEL_YM4 :             1A80 C |  SFX_CHANNEL_YM4_NOT_IN_USE :  1A83 C |
*SFX_CHANNEL_YM4_STEREO :      1A9E C | *SFX_CHANNEL_YM5 :             1AB0 C |
 SFX_CHANNEL_YM5_NOT_IN_USE :  1AB3 C | *SFX_CHANNEL_YM5_STEREO :      1ACE C |
*SFX_CHANNEL_YM6 :             1AE0 C |  SFX_CHANNEL_YM6_NOT_IN_USE :  1AE3 C |
*SFX_CHANNEL_YM6_STEREO :      1AFE C |  SMEUUH1 :                      C2A C |
 SMEUUH2 :                      C2C C |  SMEUUH3 :                      B62 C |
 SMEUUH4 :                      B64 C |  STACK_START :                 1FF0 - |
 STOPMUSIC :                    37B C |  TEMP_FREQUENCY :              154F C |
 TEMP_REGISTER :               1551 C |  THEORETICALLY_UNREACHABLE :    6E0 C |
*TIME :                    18:52:23 - |  TRANSMIT_ATTENUATION :        1098 C |
 TRANSMIT_DATA :                EE8 C | *TRUE :                           1 - |
 T_PSG_FREQUENCIES :           1382 C |  T_SAMPLE_LOAD_DATA :          1560 C |
 T_SLOTS_PER_ALGO :            1412 C |  T_YM_FREQUENCIES :            12DB C |
 T_YM_LEVELS :                 1402 C |  UNIDENTIFIEDCOMMAND :          DAC C |
 UNIDENTIFIED_COMMAND :         FE1 C |  UPDATESOUND :                  42F C |
 UPDATE_YM_INSTRUMENTS :         CD C |  UPDATE_YM_LEVEL :              131 C |
*USELESS_BYTE :                1540 C | *VERSION :                     142F - |
 YM1_CONDITIONNALINPUT :        566 C |  YM1_DATA :                    4001 - |
 YM1_INPUT :                    583 C |  YM1_LOADINSTRUMENT :           AA4 C |
 YM1_PARSEDATA :                5E6 C |  YM1_PARSE_AT_NEW_OFFSET :      68F C |
 YM1_REGISTER :                4000 - |  YM1_SETCHANNELINSTRUMENT :     AA0 C |
 YM1_SETSTEREO :               10EF C |  YM2_CONDITIONALINPUT :         593 C |
 YM2_DATA :                    4003 - |  YM2_INPUT :                    5A5 C |
 YM2_LOADINSTRUMENT :           B6C C |  YM2_PARSECHANNEL6DATA :        C30 C |
 YM2_PARSEDATA :                840 C |  YM2_REGISTER :                4002 - |
 YM2_SETCHANNELINSTRUMENT :     B68 C |  YM2_SETSTEREO :               1105 C |
 YM_INPUT :                     57A C |  YM_INSTRUMENTS_BANK :           39 - |
 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 92 - 8/17/2019 18:52:23


 YM_INSTRUMENTS_BANK_OFFSET :  CA00 - |  YM_LOADTIMERB :                561 C |
 YM_SETSLIDEORKEYRELEASE :     10A3 C |  YM_SETTIMER :                 11F8 C |
 YM_TIMER_VALUE :              1FF9 - |  YM_UPDATEINSTRUMENTSLEVELS :    D6 C |

    443 symbols
     85 unused symbols

 AS V1.42 Beta [Bld 111] - source file Z80 Driver.asm - page 93 - 8/17/2019 18:52:23


  codepages:
  ----------

STANDARD (0 changed characters)


0.05 seconds assembly time

   5140 lines source file
      2 passes
      0 errors
      0 warnings
